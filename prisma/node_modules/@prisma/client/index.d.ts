
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model System
 * 
 */
export type System = $Result.DefaultSelection<Prisma.$SystemPayload>
/**
 * Model Auth
 * 
 */
export type Auth = $Result.DefaultSelection<Prisma.$AuthPayload>
/**
 * Model Hostel
 * 
 */
export type Hostel = $Result.DefaultSelection<Prisma.$HostelPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model HostelRequest
 * 
 */
export type HostelRequest = $Result.DefaultSelection<Prisma.$HostelRequestPayload>
/**
 * Model ReportsComplaints
 * 
 */
export type ReportsComplaints = $Result.DefaultSelection<Prisma.$ReportsComplaintsPayload>
/**
 * Model ReportReply
 * 
 */
export type ReportReply = $Result.DefaultSelection<Prisma.$ReportReplyPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model HostelStudent
 * 
 */
export type HostelStudent = $Result.DefaultSelection<Prisma.$HostelStudentPayload>
/**
 * Model HostelRoom
 * 
 */
export type HostelRoom = $Result.DefaultSelection<Prisma.$HostelRoomPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  SuperAdmin: 'SuperAdmin',
  Admin: 'Admin',
  Student: 'Student',
  User: 'User'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Status: {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected'
};

export type Status = (typeof Status)[keyof typeof Status]


export const ReportType: {
  Complaint: 'Complaint',
  Suggestion: 'Suggestion',
  Feedback: 'Feedback'
};

export type ReportType = (typeof ReportType)[keyof typeof ReportType]


export const Priority: {
  Low: 'Low',
  Medium: 'Medium',
  High: 'High'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const NotificationType: {
  Complaint: 'Complaint',
  Suggestion: 'Suggestion',
  Feedback: 'Feedback',
  Maintenance: 'Maintenance',
  Alert: 'Alert',
  System: 'System',
  Other: 'Other'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const PaymentMethod: {
  Cash: 'Cash',
  Card: 'Card',
  BankTransfer: 'BankTransfer',
  Wallet: 'Wallet',
  Other: 'Other'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const Gender: {
  Male: 'Male',
  Female: 'Female',
  Other: 'Other'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const RoomType: {
  Single: 'Single',
  Double: 'Double',
  Triple: 'Triple'
};

export type RoomType = (typeof RoomType)[keyof typeof RoomType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type ReportType = $Enums.ReportType

export const ReportType: typeof $Enums.ReportType

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type RoomType = $Enums.RoomType

export const RoomType: typeof $Enums.RoomType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Systems
 * const systems = await prisma.system.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Systems
   * const systems = await prisma.system.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.system`: Exposes CRUD operations for the **System** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Systems
    * const systems = await prisma.system.findMany()
    * ```
    */
  get system(): Prisma.SystemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auth`: Exposes CRUD operations for the **Auth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auths
    * const auths = await prisma.auth.findMany()
    * ```
    */
  get auth(): Prisma.AuthDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hostel`: Exposes CRUD operations for the **Hostel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hostels
    * const hostels = await prisma.hostel.findMany()
    * ```
    */
  get hostel(): Prisma.HostelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hostelRequest`: Exposes CRUD operations for the **HostelRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HostelRequests
    * const hostelRequests = await prisma.hostelRequest.findMany()
    * ```
    */
  get hostelRequest(): Prisma.HostelRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportsComplaints`: Exposes CRUD operations for the **ReportsComplaints** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportsComplaints
    * const reportsComplaints = await prisma.reportsComplaints.findMany()
    * ```
    */
  get reportsComplaints(): Prisma.ReportsComplaintsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reportReply`: Exposes CRUD operations for the **ReportReply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportReplies
    * const reportReplies = await prisma.reportReply.findMany()
    * ```
    */
  get reportReply(): Prisma.ReportReplyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hostelStudent`: Exposes CRUD operations for the **HostelStudent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HostelStudents
    * const hostelStudents = await prisma.hostelStudent.findMany()
    * ```
    */
  get hostelStudent(): Prisma.HostelStudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hostelRoom`: Exposes CRUD operations for the **HostelRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HostelRooms
    * const hostelRooms = await prisma.hostelRoom.findMany()
    * ```
    */
  get hostelRoom(): Prisma.HostelRoomDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    System: 'System',
    Auth: 'Auth',
    Hostel: 'Hostel',
    Admin: 'Admin',
    HostelRequest: 'HostelRequest',
    ReportsComplaints: 'ReportsComplaints',
    ReportReply: 'ReportReply',
    Notification: 'Notification',
    Payment: 'Payment',
    HostelStudent: 'HostelStudent',
    HostelRoom: 'HostelRoom'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "system" | "auth" | "hostel" | "admin" | "hostelRequest" | "reportsComplaints" | "reportReply" | "notification" | "payment" | "hostelStudent" | "hostelRoom"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      System: {
        payload: Prisma.$SystemPayload<ExtArgs>
        fields: Prisma.SystemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          findFirst: {
            args: Prisma.SystemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          findMany: {
            args: Prisma.SystemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>[]
          }
          create: {
            args: Prisma.SystemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          createMany: {
            args: Prisma.SystemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>[]
          }
          delete: {
            args: Prisma.SystemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          update: {
            args: Prisma.SystemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          deleteMany: {
            args: Prisma.SystemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>[]
          }
          upsert: {
            args: Prisma.SystemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          aggregate: {
            args: Prisma.SystemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystem>
          }
          groupBy: {
            args: Prisma.SystemGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemCountArgs<ExtArgs>
            result: $Utils.Optional<SystemCountAggregateOutputType> | number
          }
        }
      }
      Auth: {
        payload: Prisma.$AuthPayload<ExtArgs>
        fields: Prisma.AuthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          findFirst: {
            args: Prisma.AuthFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          findMany: {
            args: Prisma.AuthFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>[]
          }
          create: {
            args: Prisma.AuthCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          createMany: {
            args: Prisma.AuthCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuthCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>[]
          }
          delete: {
            args: Prisma.AuthDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          update: {
            args: Prisma.AuthUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          deleteMany: {
            args: Prisma.AuthDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuthUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>[]
          }
          upsert: {
            args: Prisma.AuthUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthPayload>
          }
          aggregate: {
            args: Prisma.AuthAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuth>
          }
          groupBy: {
            args: Prisma.AuthGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthCountArgs<ExtArgs>
            result: $Utils.Optional<AuthCountAggregateOutputType> | number
          }
        }
      }
      Hostel: {
        payload: Prisma.$HostelPayload<ExtArgs>
        fields: Prisma.HostelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HostelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HostelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelPayload>
          }
          findFirst: {
            args: Prisma.HostelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HostelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelPayload>
          }
          findMany: {
            args: Prisma.HostelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelPayload>[]
          }
          create: {
            args: Prisma.HostelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelPayload>
          }
          createMany: {
            args: Prisma.HostelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HostelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelPayload>[]
          }
          delete: {
            args: Prisma.HostelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelPayload>
          }
          update: {
            args: Prisma.HostelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelPayload>
          }
          deleteMany: {
            args: Prisma.HostelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HostelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HostelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelPayload>[]
          }
          upsert: {
            args: Prisma.HostelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelPayload>
          }
          aggregate: {
            args: Prisma.HostelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHostel>
          }
          groupBy: {
            args: Prisma.HostelGroupByArgs<ExtArgs>
            result: $Utils.Optional<HostelGroupByOutputType>[]
          }
          count: {
            args: Prisma.HostelCountArgs<ExtArgs>
            result: $Utils.Optional<HostelCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      HostelRequest: {
        payload: Prisma.$HostelRequestPayload<ExtArgs>
        fields: Prisma.HostelRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HostelRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HostelRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRequestPayload>
          }
          findFirst: {
            args: Prisma.HostelRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HostelRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRequestPayload>
          }
          findMany: {
            args: Prisma.HostelRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRequestPayload>[]
          }
          create: {
            args: Prisma.HostelRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRequestPayload>
          }
          createMany: {
            args: Prisma.HostelRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HostelRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRequestPayload>[]
          }
          delete: {
            args: Prisma.HostelRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRequestPayload>
          }
          update: {
            args: Prisma.HostelRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRequestPayload>
          }
          deleteMany: {
            args: Prisma.HostelRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HostelRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HostelRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRequestPayload>[]
          }
          upsert: {
            args: Prisma.HostelRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRequestPayload>
          }
          aggregate: {
            args: Prisma.HostelRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHostelRequest>
          }
          groupBy: {
            args: Prisma.HostelRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<HostelRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.HostelRequestCountArgs<ExtArgs>
            result: $Utils.Optional<HostelRequestCountAggregateOutputType> | number
          }
        }
      }
      ReportsComplaints: {
        payload: Prisma.$ReportsComplaintsPayload<ExtArgs>
        fields: Prisma.ReportsComplaintsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportsComplaintsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsComplaintsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportsComplaintsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsComplaintsPayload>
          }
          findFirst: {
            args: Prisma.ReportsComplaintsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsComplaintsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportsComplaintsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsComplaintsPayload>
          }
          findMany: {
            args: Prisma.ReportsComplaintsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsComplaintsPayload>[]
          }
          create: {
            args: Prisma.ReportsComplaintsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsComplaintsPayload>
          }
          createMany: {
            args: Prisma.ReportsComplaintsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportsComplaintsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsComplaintsPayload>[]
          }
          delete: {
            args: Prisma.ReportsComplaintsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsComplaintsPayload>
          }
          update: {
            args: Prisma.ReportsComplaintsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsComplaintsPayload>
          }
          deleteMany: {
            args: Prisma.ReportsComplaintsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportsComplaintsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportsComplaintsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsComplaintsPayload>[]
          }
          upsert: {
            args: Prisma.ReportsComplaintsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportsComplaintsPayload>
          }
          aggregate: {
            args: Prisma.ReportsComplaintsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportsComplaints>
          }
          groupBy: {
            args: Prisma.ReportsComplaintsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportsComplaintsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportsComplaintsCountArgs<ExtArgs>
            result: $Utils.Optional<ReportsComplaintsCountAggregateOutputType> | number
          }
        }
      }
      ReportReply: {
        payload: Prisma.$ReportReplyPayload<ExtArgs>
        fields: Prisma.ReportReplyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportReplyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportReplyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportReplyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportReplyPayload>
          }
          findFirst: {
            args: Prisma.ReportReplyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportReplyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportReplyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportReplyPayload>
          }
          findMany: {
            args: Prisma.ReportReplyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportReplyPayload>[]
          }
          create: {
            args: Prisma.ReportReplyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportReplyPayload>
          }
          createMany: {
            args: Prisma.ReportReplyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportReplyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportReplyPayload>[]
          }
          delete: {
            args: Prisma.ReportReplyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportReplyPayload>
          }
          update: {
            args: Prisma.ReportReplyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportReplyPayload>
          }
          deleteMany: {
            args: Prisma.ReportReplyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportReplyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportReplyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportReplyPayload>[]
          }
          upsert: {
            args: Prisma.ReportReplyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportReplyPayload>
          }
          aggregate: {
            args: Prisma.ReportReplyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportReply>
          }
          groupBy: {
            args: Prisma.ReportReplyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportReplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportReplyCountArgs<ExtArgs>
            result: $Utils.Optional<ReportReplyCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      HostelStudent: {
        payload: Prisma.$HostelStudentPayload<ExtArgs>
        fields: Prisma.HostelStudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HostelStudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelStudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HostelStudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelStudentPayload>
          }
          findFirst: {
            args: Prisma.HostelStudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelStudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HostelStudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelStudentPayload>
          }
          findMany: {
            args: Prisma.HostelStudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelStudentPayload>[]
          }
          create: {
            args: Prisma.HostelStudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelStudentPayload>
          }
          createMany: {
            args: Prisma.HostelStudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HostelStudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelStudentPayload>[]
          }
          delete: {
            args: Prisma.HostelStudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelStudentPayload>
          }
          update: {
            args: Prisma.HostelStudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelStudentPayload>
          }
          deleteMany: {
            args: Prisma.HostelStudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HostelStudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HostelStudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelStudentPayload>[]
          }
          upsert: {
            args: Prisma.HostelStudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelStudentPayload>
          }
          aggregate: {
            args: Prisma.HostelStudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHostelStudent>
          }
          groupBy: {
            args: Prisma.HostelStudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<HostelStudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.HostelStudentCountArgs<ExtArgs>
            result: $Utils.Optional<HostelStudentCountAggregateOutputType> | number
          }
        }
      }
      HostelRoom: {
        payload: Prisma.$HostelRoomPayload<ExtArgs>
        fields: Prisma.HostelRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HostelRoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HostelRoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRoomPayload>
          }
          findFirst: {
            args: Prisma.HostelRoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HostelRoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRoomPayload>
          }
          findMany: {
            args: Prisma.HostelRoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRoomPayload>[]
          }
          create: {
            args: Prisma.HostelRoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRoomPayload>
          }
          createMany: {
            args: Prisma.HostelRoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HostelRoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRoomPayload>[]
          }
          delete: {
            args: Prisma.HostelRoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRoomPayload>
          }
          update: {
            args: Prisma.HostelRoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRoomPayload>
          }
          deleteMany: {
            args: Prisma.HostelRoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HostelRoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HostelRoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRoomPayload>[]
          }
          upsert: {
            args: Prisma.HostelRoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostelRoomPayload>
          }
          aggregate: {
            args: Prisma.HostelRoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHostelRoom>
          }
          groupBy: {
            args: Prisma.HostelRoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<HostelRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.HostelRoomCountArgs<ExtArgs>
            result: $Utils.Optional<HostelRoomCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    system?: SystemOmit
    auth?: AuthOmit
    hostel?: HostelOmit
    admin?: AdminOmit
    hostelRequest?: HostelRequestOmit
    reportsComplaints?: ReportsComplaintsOmit
    reportReply?: ReportReplyOmit
    notification?: NotificationOmit
    payment?: PaymentOmit
    hostelStudent?: HostelStudentOmit
    hostelRoom?: HostelRoomOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type HostelCountOutputType
   */

  export type HostelCountOutputType = {
    admins: number
    reportsComplaints: number
  }

  export type HostelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admins?: boolean | HostelCountOutputTypeCountAdminsArgs
    reportsComplaints?: boolean | HostelCountOutputTypeCountReportsComplaintsArgs
  }

  // Custom InputTypes
  /**
   * HostelCountOutputType without action
   */
  export type HostelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelCountOutputType
     */
    select?: HostelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HostelCountOutputType without action
   */
  export type HostelCountOutputTypeCountAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
  }

  /**
   * HostelCountOutputType without action
   */
  export type HostelCountOutputTypeCountReportsComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportsComplaintsWhereInput
  }


  /**
   * Count Type ReportsComplaintsCountOutputType
   */

  export type ReportsComplaintsCountOutputType = {
    reportReplies: number
  }

  export type ReportsComplaintsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportReplies?: boolean | ReportsComplaintsCountOutputTypeCountReportRepliesArgs
  }

  // Custom InputTypes
  /**
   * ReportsComplaintsCountOutputType without action
   */
  export type ReportsComplaintsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaintsCountOutputType
     */
    select?: ReportsComplaintsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReportsComplaintsCountOutputType without action
   */
  export type ReportsComplaintsCountOutputTypeCountReportRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportReplyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model System
   */

  export type AggregateSystem = {
    _count: SystemCountAggregateOutputType | null
    _avg: SystemAvgAggregateOutputType | null
    _sum: SystemSumAggregateOutputType | null
    _min: SystemMinAggregateOutputType | null
    _max: SystemMaxAggregateOutputType | null
  }

  export type SystemAvgAggregateOutputType = {
    id: number | null
    SMTPPort: number | null
    sessionDuration: number | null
    academicYear: number | null
  }

  export type SystemSumAggregateOutputType = {
    id: number | null
    SMTPPort: number | null
    sessionDuration: number | null
    academicYear: number | null
  }

  export type SystemMinAggregateOutputType = {
    id: number | null
    systemId: string | null
    systemName: string | null
    systemEmail: string | null
    sytemMaintenanceMode: boolean | null
    SMTPHost: string | null
    SMTPPort: number | null
    SMTPUser: string | null
    SMTPPassword: string | null
    passwordPolicy: boolean | null
    twoFactorAuth: boolean | null
    sessionDuration: number | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type SystemMaxAggregateOutputType = {
    id: number | null
    systemId: string | null
    systemName: string | null
    systemEmail: string | null
    sytemMaintenanceMode: boolean | null
    SMTPHost: string | null
    SMTPPort: number | null
    SMTPUser: string | null
    SMTPPassword: string | null
    passwordPolicy: boolean | null
    twoFactorAuth: boolean | null
    sessionDuration: number | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type SystemCountAggregateOutputType = {
    id: number
    systemId: number
    systemName: number
    systemEmail: number
    sytemMaintenanceMode: number
    SMTPHost: number
    SMTPPort: number
    SMTPUser: number
    SMTPPassword: number
    passwordPolicy: number
    twoFactorAuth: number
    sessionDuration: number
    createdAt: number
    updatedAt: number
    academicYear: number
    _all: number
  }


  export type SystemAvgAggregateInputType = {
    id?: true
    SMTPPort?: true
    sessionDuration?: true
    academicYear?: true
  }

  export type SystemSumAggregateInputType = {
    id?: true
    SMTPPort?: true
    sessionDuration?: true
    academicYear?: true
  }

  export type SystemMinAggregateInputType = {
    id?: true
    systemId?: true
    systemName?: true
    systemEmail?: true
    sytemMaintenanceMode?: true
    SMTPHost?: true
    SMTPPort?: true
    SMTPUser?: true
    SMTPPassword?: true
    passwordPolicy?: true
    twoFactorAuth?: true
    sessionDuration?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type SystemMaxAggregateInputType = {
    id?: true
    systemId?: true
    systemName?: true
    systemEmail?: true
    sytemMaintenanceMode?: true
    SMTPHost?: true
    SMTPPort?: true
    SMTPUser?: true
    SMTPPassword?: true
    passwordPolicy?: true
    twoFactorAuth?: true
    sessionDuration?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type SystemCountAggregateInputType = {
    id?: true
    systemId?: true
    systemName?: true
    systemEmail?: true
    sytemMaintenanceMode?: true
    SMTPHost?: true
    SMTPPort?: true
    SMTPUser?: true
    SMTPPassword?: true
    passwordPolicy?: true
    twoFactorAuth?: true
    sessionDuration?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    _all?: true
  }

  export type SystemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which System to aggregate.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Systems
    **/
    _count?: true | SystemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemMaxAggregateInputType
  }

  export type GetSystemAggregateType<T extends SystemAggregateArgs> = {
        [P in keyof T & keyof AggregateSystem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystem[P]>
      : GetScalarType<T[P], AggregateSystem[P]>
  }




  export type SystemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemWhereInput
    orderBy?: SystemOrderByWithAggregationInput | SystemOrderByWithAggregationInput[]
    by: SystemScalarFieldEnum[] | SystemScalarFieldEnum
    having?: SystemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemCountAggregateInputType | true
    _avg?: SystemAvgAggregateInputType
    _sum?: SystemSumAggregateInputType
    _min?: SystemMinAggregateInputType
    _max?: SystemMaxAggregateInputType
  }

  export type SystemGroupByOutputType = {
    id: number
    systemId: string
    systemName: string
    systemEmail: string
    sytemMaintenanceMode: boolean
    SMTPHost: string | null
    SMTPPort: number | null
    SMTPUser: string | null
    SMTPPassword: string | null
    passwordPolicy: boolean
    twoFactorAuth: boolean
    sessionDuration: number
    createdAt: Date
    updatedAt: Date
    academicYear: number
    _count: SystemCountAggregateOutputType | null
    _avg: SystemAvgAggregateOutputType | null
    _sum: SystemSumAggregateOutputType | null
    _min: SystemMinAggregateOutputType | null
    _max: SystemMaxAggregateOutputType | null
  }

  type GetSystemGroupByPayload<T extends SystemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemGroupByOutputType[P]>
            : GetScalarType<T[P], SystemGroupByOutputType[P]>
        }
      >
    >


  export type SystemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    systemId?: boolean
    systemName?: boolean
    systemEmail?: boolean
    sytemMaintenanceMode?: boolean
    SMTPHost?: boolean
    SMTPPort?: boolean
    SMTPUser?: boolean
    SMTPPassword?: boolean
    passwordPolicy?: boolean
    twoFactorAuth?: boolean
    sessionDuration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["system"]>

  export type SystemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    systemId?: boolean
    systemName?: boolean
    systemEmail?: boolean
    sytemMaintenanceMode?: boolean
    SMTPHost?: boolean
    SMTPPort?: boolean
    SMTPUser?: boolean
    SMTPPassword?: boolean
    passwordPolicy?: boolean
    twoFactorAuth?: boolean
    sessionDuration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["system"]>

  export type SystemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    systemId?: boolean
    systemName?: boolean
    systemEmail?: boolean
    sytemMaintenanceMode?: boolean
    SMTPHost?: boolean
    SMTPPort?: boolean
    SMTPUser?: boolean
    SMTPPassword?: boolean
    passwordPolicy?: boolean
    twoFactorAuth?: boolean
    sessionDuration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["system"]>

  export type SystemSelectScalar = {
    id?: boolean
    systemId?: boolean
    systemName?: boolean
    systemEmail?: boolean
    sytemMaintenanceMode?: boolean
    SMTPHost?: boolean
    SMTPPort?: boolean
    SMTPUser?: boolean
    SMTPPassword?: boolean
    passwordPolicy?: boolean
    twoFactorAuth?: boolean
    sessionDuration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }

  export type SystemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "systemId" | "systemName" | "systemEmail" | "sytemMaintenanceMode" | "SMTPHost" | "SMTPPort" | "SMTPUser" | "SMTPPassword" | "passwordPolicy" | "twoFactorAuth" | "sessionDuration" | "createdAt" | "updatedAt" | "academicYear", ExtArgs["result"]["system"]>

  export type $SystemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "System"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      systemId: string
      systemName: string
      systemEmail: string
      sytemMaintenanceMode: boolean
      SMTPHost: string | null
      SMTPPort: number | null
      SMTPUser: string | null
      SMTPPassword: string | null
      passwordPolicy: boolean
      twoFactorAuth: boolean
      sessionDuration: number
      createdAt: Date
      updatedAt: Date
      academicYear: number
    }, ExtArgs["result"]["system"]>
    composites: {}
  }

  type SystemGetPayload<S extends boolean | null | undefined | SystemDefaultArgs> = $Result.GetResult<Prisma.$SystemPayload, S>

  type SystemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemCountAggregateInputType | true
    }

  export interface SystemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['System'], meta: { name: 'System' } }
    /**
     * Find zero or one System that matches the filter.
     * @param {SystemFindUniqueArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemFindUniqueArgs>(args: SelectSubset<T, SystemFindUniqueArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one System that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemFindUniqueOrThrowArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first System that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemFindFirstArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemFindFirstArgs>(args?: SelectSubset<T, SystemFindFirstArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first System that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemFindFirstOrThrowArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Systems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Systems
     * const systems = await prisma.system.findMany()
     * 
     * // Get first 10 Systems
     * const systems = await prisma.system.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemWithIdOnly = await prisma.system.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemFindManyArgs>(args?: SelectSubset<T, SystemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a System.
     * @param {SystemCreateArgs} args - Arguments to create a System.
     * @example
     * // Create one System
     * const System = await prisma.system.create({
     *   data: {
     *     // ... data to create a System
     *   }
     * })
     * 
     */
    create<T extends SystemCreateArgs>(args: SelectSubset<T, SystemCreateArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Systems.
     * @param {SystemCreateManyArgs} args - Arguments to create many Systems.
     * @example
     * // Create many Systems
     * const system = await prisma.system.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemCreateManyArgs>(args?: SelectSubset<T, SystemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Systems and returns the data saved in the database.
     * @param {SystemCreateManyAndReturnArgs} args - Arguments to create many Systems.
     * @example
     * // Create many Systems
     * const system = await prisma.system.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Systems and only return the `id`
     * const systemWithIdOnly = await prisma.system.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a System.
     * @param {SystemDeleteArgs} args - Arguments to delete one System.
     * @example
     * // Delete one System
     * const System = await prisma.system.delete({
     *   where: {
     *     // ... filter to delete one System
     *   }
     * })
     * 
     */
    delete<T extends SystemDeleteArgs>(args: SelectSubset<T, SystemDeleteArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one System.
     * @param {SystemUpdateArgs} args - Arguments to update one System.
     * @example
     * // Update one System
     * const system = await prisma.system.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemUpdateArgs>(args: SelectSubset<T, SystemUpdateArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Systems.
     * @param {SystemDeleteManyArgs} args - Arguments to filter Systems to delete.
     * @example
     * // Delete a few Systems
     * const { count } = await prisma.system.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemDeleteManyArgs>(args?: SelectSubset<T, SystemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Systems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Systems
     * const system = await prisma.system.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemUpdateManyArgs>(args: SelectSubset<T, SystemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Systems and returns the data updated in the database.
     * @param {SystemUpdateManyAndReturnArgs} args - Arguments to update many Systems.
     * @example
     * // Update many Systems
     * const system = await prisma.system.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Systems and only return the `id`
     * const systemWithIdOnly = await prisma.system.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one System.
     * @param {SystemUpsertArgs} args - Arguments to update or create a System.
     * @example
     * // Update or create a System
     * const system = await prisma.system.upsert({
     *   create: {
     *     // ... data to create a System
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the System we want to update
     *   }
     * })
     */
    upsert<T extends SystemUpsertArgs>(args: SelectSubset<T, SystemUpsertArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Systems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemCountArgs} args - Arguments to filter Systems to count.
     * @example
     * // Count the number of Systems
     * const count = await prisma.system.count({
     *   where: {
     *     // ... the filter for the Systems we want to count
     *   }
     * })
    **/
    count<T extends SystemCountArgs>(
      args?: Subset<T, SystemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a System.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemAggregateArgs>(args: Subset<T, SystemAggregateArgs>): Prisma.PrismaPromise<GetSystemAggregateType<T>>

    /**
     * Group by System.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemGroupByArgs['orderBy'] }
        : { orderBy?: SystemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the System model
   */
  readonly fields: SystemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for System.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the System model
   */
  interface SystemFieldRefs {
    readonly id: FieldRef<"System", 'Int'>
    readonly systemId: FieldRef<"System", 'String'>
    readonly systemName: FieldRef<"System", 'String'>
    readonly systemEmail: FieldRef<"System", 'String'>
    readonly sytemMaintenanceMode: FieldRef<"System", 'Boolean'>
    readonly SMTPHost: FieldRef<"System", 'String'>
    readonly SMTPPort: FieldRef<"System", 'Int'>
    readonly SMTPUser: FieldRef<"System", 'String'>
    readonly SMTPPassword: FieldRef<"System", 'String'>
    readonly passwordPolicy: FieldRef<"System", 'Boolean'>
    readonly twoFactorAuth: FieldRef<"System", 'Boolean'>
    readonly sessionDuration: FieldRef<"System", 'Int'>
    readonly createdAt: FieldRef<"System", 'DateTime'>
    readonly updatedAt: FieldRef<"System", 'DateTime'>
    readonly academicYear: FieldRef<"System", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * System findUnique
   */
  export type SystemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System findUniqueOrThrow
   */
  export type SystemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System findFirst
   */
  export type SystemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Systems.
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Systems.
     */
    distinct?: SystemScalarFieldEnum | SystemScalarFieldEnum[]
  }

  /**
   * System findFirstOrThrow
   */
  export type SystemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Systems.
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Systems.
     */
    distinct?: SystemScalarFieldEnum | SystemScalarFieldEnum[]
  }

  /**
   * System findMany
   */
  export type SystemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Filter, which Systems to fetch.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Systems.
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    distinct?: SystemScalarFieldEnum | SystemScalarFieldEnum[]
  }

  /**
   * System create
   */
  export type SystemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * The data needed to create a System.
     */
    data: XOR<SystemCreateInput, SystemUncheckedCreateInput>
  }

  /**
   * System createMany
   */
  export type SystemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Systems.
     */
    data: SystemCreateManyInput | SystemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * System createManyAndReturn
   */
  export type SystemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * The data used to create many Systems.
     */
    data: SystemCreateManyInput | SystemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * System update
   */
  export type SystemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * The data needed to update a System.
     */
    data: XOR<SystemUpdateInput, SystemUncheckedUpdateInput>
    /**
     * Choose, which System to update.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System updateMany
   */
  export type SystemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Systems.
     */
    data: XOR<SystemUpdateManyMutationInput, SystemUncheckedUpdateManyInput>
    /**
     * Filter which Systems to update
     */
    where?: SystemWhereInput
    /**
     * Limit how many Systems to update.
     */
    limit?: number
  }

  /**
   * System updateManyAndReturn
   */
  export type SystemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * The data used to update Systems.
     */
    data: XOR<SystemUpdateManyMutationInput, SystemUncheckedUpdateManyInput>
    /**
     * Filter which Systems to update
     */
    where?: SystemWhereInput
    /**
     * Limit how many Systems to update.
     */
    limit?: number
  }

  /**
   * System upsert
   */
  export type SystemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * The filter to search for the System to update in case it exists.
     */
    where: SystemWhereUniqueInput
    /**
     * In case the System found by the `where` argument doesn't exist, create a new System with this data.
     */
    create: XOR<SystemCreateInput, SystemUncheckedCreateInput>
    /**
     * In case the System was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemUpdateInput, SystemUncheckedUpdateInput>
  }

  /**
   * System delete
   */
  export type SystemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Filter which System to delete.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System deleteMany
   */
  export type SystemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Systems to delete
     */
    where?: SystemWhereInput
    /**
     * Limit how many Systems to delete.
     */
    limit?: number
  }

  /**
   * System without action
   */
  export type SystemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
  }


  /**
   * Model Auth
   */

  export type AggregateAuth = {
    _count: AuthCountAggregateOutputType | null
    _avg: AuthAvgAggregateOutputType | null
    _sum: AuthSumAggregateOutputType | null
    _min: AuthMinAggregateOutputType | null
    _max: AuthMaxAggregateOutputType | null
  }

  export type AuthAvgAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type AuthSumAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type AuthMinAggregateOutputType = {
    id: number | null
    authId: string | null
    userInEmail: string | null
    userInPhone: string | null
    userInName: string | null
    userInPassword: string | null
    isVerified: boolean | null
    isRequestApproved: boolean | null
    role: $Enums.Role | null
    hostelId: string | null
    academicYear: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuthMaxAggregateOutputType = {
    id: number | null
    authId: string | null
    userInEmail: string | null
    userInPhone: string | null
    userInName: string | null
    userInPassword: string | null
    isVerified: boolean | null
    isRequestApproved: boolean | null
    role: $Enums.Role | null
    hostelId: string | null
    academicYear: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AuthCountAggregateOutputType = {
    id: number
    authId: number
    userInEmail: number
    userInPhone: number
    userInName: number
    userInPassword: number
    isVerified: number
    isRequestApproved: number
    role: number
    hostelId: number
    academicYear: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AuthAvgAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type AuthSumAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type AuthMinAggregateInputType = {
    id?: true
    authId?: true
    userInEmail?: true
    userInPhone?: true
    userInName?: true
    userInPassword?: true
    isVerified?: true
    isRequestApproved?: true
    role?: true
    hostelId?: true
    academicYear?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuthMaxAggregateInputType = {
    id?: true
    authId?: true
    userInEmail?: true
    userInPhone?: true
    userInName?: true
    userInPassword?: true
    isVerified?: true
    isRequestApproved?: true
    role?: true
    hostelId?: true
    academicYear?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AuthCountAggregateInputType = {
    id?: true
    authId?: true
    userInEmail?: true
    userInPhone?: true
    userInName?: true
    userInPassword?: true
    isVerified?: true
    isRequestApproved?: true
    role?: true
    hostelId?: true
    academicYear?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AuthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auth to aggregate.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthOrderByWithRelationInput | AuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Auths
    **/
    _count?: true | AuthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthMaxAggregateInputType
  }

  export type GetAuthAggregateType<T extends AuthAggregateArgs> = {
        [P in keyof T & keyof AggregateAuth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuth[P]>
      : GetScalarType<T[P], AggregateAuth[P]>
  }




  export type AuthGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthWhereInput
    orderBy?: AuthOrderByWithAggregationInput | AuthOrderByWithAggregationInput[]
    by: AuthScalarFieldEnum[] | AuthScalarFieldEnum
    having?: AuthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthCountAggregateInputType | true
    _avg?: AuthAvgAggregateInputType
    _sum?: AuthSumAggregateInputType
    _min?: AuthMinAggregateInputType
    _max?: AuthMaxAggregateInputType
  }

  export type AuthGroupByOutputType = {
    id: number
    authId: string
    userInEmail: string
    userInPhone: string
    userInName: string
    userInPassword: string
    isVerified: boolean
    isRequestApproved: boolean
    role: $Enums.Role
    hostelId: string | null
    academicYear: number
    createdAt: Date
    updatedAt: Date
    _count: AuthCountAggregateOutputType | null
    _avg: AuthAvgAggregateOutputType | null
    _sum: AuthSumAggregateOutputType | null
    _min: AuthMinAggregateOutputType | null
    _max: AuthMaxAggregateOutputType | null
  }

  type GetAuthGroupByPayload<T extends AuthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthGroupByOutputType[P]>
            : GetScalarType<T[P], AuthGroupByOutputType[P]>
        }
      >
    >


  export type AuthSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authId?: boolean
    userInEmail?: boolean
    userInPhone?: boolean
    userInName?: boolean
    userInPassword?: boolean
    isVerified?: boolean
    isRequestApproved?: boolean
    role?: boolean
    hostelId?: boolean
    academicYear?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["auth"]>

  export type AuthSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authId?: boolean
    userInEmail?: boolean
    userInPhone?: boolean
    userInName?: boolean
    userInPassword?: boolean
    isVerified?: boolean
    isRequestApproved?: boolean
    role?: boolean
    hostelId?: boolean
    academicYear?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["auth"]>

  export type AuthSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    authId?: boolean
    userInEmail?: boolean
    userInPhone?: boolean
    userInName?: boolean
    userInPassword?: boolean
    isVerified?: boolean
    isRequestApproved?: boolean
    role?: boolean
    hostelId?: boolean
    academicYear?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["auth"]>

  export type AuthSelectScalar = {
    id?: boolean
    authId?: boolean
    userInEmail?: boolean
    userInPhone?: boolean
    userInName?: boolean
    userInPassword?: boolean
    isVerified?: boolean
    isRequestApproved?: boolean
    role?: boolean
    hostelId?: boolean
    academicYear?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AuthOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "authId" | "userInEmail" | "userInPhone" | "userInName" | "userInPassword" | "isVerified" | "isRequestApproved" | "role" | "hostelId" | "academicYear" | "createdAt" | "updatedAt", ExtArgs["result"]["auth"]>

  export type $AuthPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Auth"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      authId: string
      userInEmail: string
      userInPhone: string
      userInName: string
      userInPassword: string
      isVerified: boolean
      isRequestApproved: boolean
      role: $Enums.Role
      hostelId: string | null
      academicYear: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["auth"]>
    composites: {}
  }

  type AuthGetPayload<S extends boolean | null | undefined | AuthDefaultArgs> = $Result.GetResult<Prisma.$AuthPayload, S>

  type AuthCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthCountAggregateInputType | true
    }

  export interface AuthDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Auth'], meta: { name: 'Auth' } }
    /**
     * Find zero or one Auth that matches the filter.
     * @param {AuthFindUniqueArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthFindUniqueArgs>(args: SelectSubset<T, AuthFindUniqueArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Auth that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuthFindUniqueOrThrowArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthFindFirstArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthFindFirstArgs>(args?: SelectSubset<T, AuthFindFirstArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthFindFirstOrThrowArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Auths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auths
     * const auths = await prisma.auth.findMany()
     * 
     * // Get first 10 Auths
     * const auths = await prisma.auth.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authWithIdOnly = await prisma.auth.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuthFindManyArgs>(args?: SelectSubset<T, AuthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Auth.
     * @param {AuthCreateArgs} args - Arguments to create a Auth.
     * @example
     * // Create one Auth
     * const Auth = await prisma.auth.create({
     *   data: {
     *     // ... data to create a Auth
     *   }
     * })
     * 
     */
    create<T extends AuthCreateArgs>(args: SelectSubset<T, AuthCreateArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Auths.
     * @param {AuthCreateManyArgs} args - Arguments to create many Auths.
     * @example
     * // Create many Auths
     * const auth = await prisma.auth.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthCreateManyArgs>(args?: SelectSubset<T, AuthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Auths and returns the data saved in the database.
     * @param {AuthCreateManyAndReturnArgs} args - Arguments to create many Auths.
     * @example
     * // Create many Auths
     * const auth = await prisma.auth.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Auths and only return the `id`
     * const authWithIdOnly = await prisma.auth.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuthCreateManyAndReturnArgs>(args?: SelectSubset<T, AuthCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Auth.
     * @param {AuthDeleteArgs} args - Arguments to delete one Auth.
     * @example
     * // Delete one Auth
     * const Auth = await prisma.auth.delete({
     *   where: {
     *     // ... filter to delete one Auth
     *   }
     * })
     * 
     */
    delete<T extends AuthDeleteArgs>(args: SelectSubset<T, AuthDeleteArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Auth.
     * @param {AuthUpdateArgs} args - Arguments to update one Auth.
     * @example
     * // Update one Auth
     * const auth = await prisma.auth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthUpdateArgs>(args: SelectSubset<T, AuthUpdateArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Auths.
     * @param {AuthDeleteManyArgs} args - Arguments to filter Auths to delete.
     * @example
     * // Delete a few Auths
     * const { count } = await prisma.auth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthDeleteManyArgs>(args?: SelectSubset<T, AuthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auths
     * const auth = await prisma.auth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthUpdateManyArgs>(args: SelectSubset<T, AuthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auths and returns the data updated in the database.
     * @param {AuthUpdateManyAndReturnArgs} args - Arguments to update many Auths.
     * @example
     * // Update many Auths
     * const auth = await prisma.auth.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Auths and only return the `id`
     * const authWithIdOnly = await prisma.auth.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuthUpdateManyAndReturnArgs>(args: SelectSubset<T, AuthUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Auth.
     * @param {AuthUpsertArgs} args - Arguments to update or create a Auth.
     * @example
     * // Update or create a Auth
     * const auth = await prisma.auth.upsert({
     *   create: {
     *     // ... data to create a Auth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auth we want to update
     *   }
     * })
     */
    upsert<T extends AuthUpsertArgs>(args: SelectSubset<T, AuthUpsertArgs<ExtArgs>>): Prisma__AuthClient<$Result.GetResult<Prisma.$AuthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthCountArgs} args - Arguments to filter Auths to count.
     * @example
     * // Count the number of Auths
     * const count = await prisma.auth.count({
     *   where: {
     *     // ... the filter for the Auths we want to count
     *   }
     * })
    **/
    count<T extends AuthCountArgs>(
      args?: Subset<T, AuthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthAggregateArgs>(args: Subset<T, AuthAggregateArgs>): Prisma.PrismaPromise<GetAuthAggregateType<T>>

    /**
     * Group by Auth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthGroupByArgs['orderBy'] }
        : { orderBy?: AuthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Auth model
   */
  readonly fields: AuthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Auth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Auth model
   */
  interface AuthFieldRefs {
    readonly id: FieldRef<"Auth", 'Int'>
    readonly authId: FieldRef<"Auth", 'String'>
    readonly userInEmail: FieldRef<"Auth", 'String'>
    readonly userInPhone: FieldRef<"Auth", 'String'>
    readonly userInName: FieldRef<"Auth", 'String'>
    readonly userInPassword: FieldRef<"Auth", 'String'>
    readonly isVerified: FieldRef<"Auth", 'Boolean'>
    readonly isRequestApproved: FieldRef<"Auth", 'Boolean'>
    readonly role: FieldRef<"Auth", 'Role'>
    readonly hostelId: FieldRef<"Auth", 'String'>
    readonly academicYear: FieldRef<"Auth", 'Int'>
    readonly createdAt: FieldRef<"Auth", 'DateTime'>
    readonly updatedAt: FieldRef<"Auth", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Auth findUnique
   */
  export type AuthFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where: AuthWhereUniqueInput
  }

  /**
   * Auth findUniqueOrThrow
   */
  export type AuthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where: AuthWhereUniqueInput
  }

  /**
   * Auth findFirst
   */
  export type AuthFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthOrderByWithRelationInput | AuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auths.
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auths.
     */
    distinct?: AuthScalarFieldEnum | AuthScalarFieldEnum[]
  }

  /**
   * Auth findFirstOrThrow
   */
  export type AuthFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Filter, which Auth to fetch.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthOrderByWithRelationInput | AuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auths.
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auths.
     */
    distinct?: AuthScalarFieldEnum | AuthScalarFieldEnum[]
  }

  /**
   * Auth findMany
   */
  export type AuthFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Filter, which Auths to fetch.
     */
    where?: AuthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auths to fetch.
     */
    orderBy?: AuthOrderByWithRelationInput | AuthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Auths.
     */
    cursor?: AuthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auths.
     */
    skip?: number
    distinct?: AuthScalarFieldEnum | AuthScalarFieldEnum[]
  }

  /**
   * Auth create
   */
  export type AuthCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * The data needed to create a Auth.
     */
    data: XOR<AuthCreateInput, AuthUncheckedCreateInput>
  }

  /**
   * Auth createMany
   */
  export type AuthCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Auths.
     */
    data: AuthCreateManyInput | AuthCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Auth createManyAndReturn
   */
  export type AuthCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * The data used to create many Auths.
     */
    data: AuthCreateManyInput | AuthCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Auth update
   */
  export type AuthUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * The data needed to update a Auth.
     */
    data: XOR<AuthUpdateInput, AuthUncheckedUpdateInput>
    /**
     * Choose, which Auth to update.
     */
    where: AuthWhereUniqueInput
  }

  /**
   * Auth updateMany
   */
  export type AuthUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Auths.
     */
    data: XOR<AuthUpdateManyMutationInput, AuthUncheckedUpdateManyInput>
    /**
     * Filter which Auths to update
     */
    where?: AuthWhereInput
    /**
     * Limit how many Auths to update.
     */
    limit?: number
  }

  /**
   * Auth updateManyAndReturn
   */
  export type AuthUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * The data used to update Auths.
     */
    data: XOR<AuthUpdateManyMutationInput, AuthUncheckedUpdateManyInput>
    /**
     * Filter which Auths to update
     */
    where?: AuthWhereInput
    /**
     * Limit how many Auths to update.
     */
    limit?: number
  }

  /**
   * Auth upsert
   */
  export type AuthUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * The filter to search for the Auth to update in case it exists.
     */
    where: AuthWhereUniqueInput
    /**
     * In case the Auth found by the `where` argument doesn't exist, create a new Auth with this data.
     */
    create: XOR<AuthCreateInput, AuthUncheckedCreateInput>
    /**
     * In case the Auth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthUpdateInput, AuthUncheckedUpdateInput>
  }

  /**
   * Auth delete
   */
  export type AuthDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
    /**
     * Filter which Auth to delete.
     */
    where: AuthWhereUniqueInput
  }

  /**
   * Auth deleteMany
   */
  export type AuthDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auths to delete
     */
    where?: AuthWhereInput
    /**
     * Limit how many Auths to delete.
     */
    limit?: number
  }

  /**
   * Auth without action
   */
  export type AuthDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auth
     */
    select?: AuthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Auth
     */
    omit?: AuthOmit<ExtArgs> | null
  }


  /**
   * Model Hostel
   */

  export type AggregateHostel = {
    _count: HostelCountAggregateOutputType | null
    _avg: HostelAvgAggregateOutputType | null
    _sum: HostelSumAggregateOutputType | null
    _min: HostelMinAggregateOutputType | null
    _max: HostelMaxAggregateOutputType | null
  }

  export type HostelAvgAggregateOutputType = {
    id: number | null
    totalRooms: number | null
    totalBeds: number | null
    totalFloors: number | null
    hostelExpiryRemainingTime: number | null
    academicYear: number | null
  }

  export type HostelSumAggregateOutputType = {
    id: number | null
    totalRooms: number | null
    totalBeds: number | null
    totalFloors: number | null
    hostelExpiryRemainingTime: number | null
    academicYear: number | null
  }

  export type HostelMinAggregateOutputType = {
    id: number | null
    hostelId: string | null
    hostelNumber: string | null
    hostelName: string | null
    hostelAddress: string | null
    totalRooms: number | null
    totalBeds: number | null
    totalFloors: number | null
    hostelExpiryRemainingTime: number | null
    hostelExpiryDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
    userInId: string | null
    authId: string | null
  }

  export type HostelMaxAggregateOutputType = {
    id: number | null
    hostelId: string | null
    hostelNumber: string | null
    hostelName: string | null
    hostelAddress: string | null
    totalRooms: number | null
    totalBeds: number | null
    totalFloors: number | null
    hostelExpiryRemainingTime: number | null
    hostelExpiryDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
    userInId: string | null
    authId: string | null
  }

  export type HostelCountAggregateOutputType = {
    id: number
    hostelId: number
    hostelNumber: number
    hostelName: number
    hostelAddress: number
    totalRooms: number
    totalBeds: number
    totalFloors: number
    hostelExpiryRemainingTime: number
    hostelExpiryDate: number
    createdAt: number
    updatedAt: number
    academicYear: number
    userInId: number
    authId: number
    _all: number
  }


  export type HostelAvgAggregateInputType = {
    id?: true
    totalRooms?: true
    totalBeds?: true
    totalFloors?: true
    hostelExpiryRemainingTime?: true
    academicYear?: true
  }

  export type HostelSumAggregateInputType = {
    id?: true
    totalRooms?: true
    totalBeds?: true
    totalFloors?: true
    hostelExpiryRemainingTime?: true
    academicYear?: true
  }

  export type HostelMinAggregateInputType = {
    id?: true
    hostelId?: true
    hostelNumber?: true
    hostelName?: true
    hostelAddress?: true
    totalRooms?: true
    totalBeds?: true
    totalFloors?: true
    hostelExpiryRemainingTime?: true
    hostelExpiryDate?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    userInId?: true
    authId?: true
  }

  export type HostelMaxAggregateInputType = {
    id?: true
    hostelId?: true
    hostelNumber?: true
    hostelName?: true
    hostelAddress?: true
    totalRooms?: true
    totalBeds?: true
    totalFloors?: true
    hostelExpiryRemainingTime?: true
    hostelExpiryDate?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    userInId?: true
    authId?: true
  }

  export type HostelCountAggregateInputType = {
    id?: true
    hostelId?: true
    hostelNumber?: true
    hostelName?: true
    hostelAddress?: true
    totalRooms?: true
    totalBeds?: true
    totalFloors?: true
    hostelExpiryRemainingTime?: true
    hostelExpiryDate?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    userInId?: true
    authId?: true
    _all?: true
  }

  export type HostelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hostel to aggregate.
     */
    where?: HostelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hostels to fetch.
     */
    orderBy?: HostelOrderByWithRelationInput | HostelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HostelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hostels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hostels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hostels
    **/
    _count?: true | HostelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HostelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HostelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostelMaxAggregateInputType
  }

  export type GetHostelAggregateType<T extends HostelAggregateArgs> = {
        [P in keyof T & keyof AggregateHostel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHostel[P]>
      : GetScalarType<T[P], AggregateHostel[P]>
  }




  export type HostelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostelWhereInput
    orderBy?: HostelOrderByWithAggregationInput | HostelOrderByWithAggregationInput[]
    by: HostelScalarFieldEnum[] | HostelScalarFieldEnum
    having?: HostelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostelCountAggregateInputType | true
    _avg?: HostelAvgAggregateInputType
    _sum?: HostelSumAggregateInputType
    _min?: HostelMinAggregateInputType
    _max?: HostelMaxAggregateInputType
  }

  export type HostelGroupByOutputType = {
    id: number
    hostelId: string
    hostelNumber: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    hostelExpiryRemainingTime: number
    hostelExpiryDate: Date
    createdAt: Date
    updatedAt: Date
    academicYear: number
    userInId: string
    authId: string
    _count: HostelCountAggregateOutputType | null
    _avg: HostelAvgAggregateOutputType | null
    _sum: HostelSumAggregateOutputType | null
    _min: HostelMinAggregateOutputType | null
    _max: HostelMaxAggregateOutputType | null
  }

  type GetHostelGroupByPayload<T extends HostelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HostelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostelGroupByOutputType[P]>
            : GetScalarType<T[P], HostelGroupByOutputType[P]>
        }
      >
    >


  export type HostelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostelId?: boolean
    hostelNumber?: boolean
    hostelName?: boolean
    hostelAddress?: boolean
    totalRooms?: boolean
    totalBeds?: boolean
    totalFloors?: boolean
    hostelExpiryRemainingTime?: boolean
    hostelExpiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    userInId?: boolean
    authId?: boolean
    admins?: boolean | Hostel$adminsArgs<ExtArgs>
    reportsComplaints?: boolean | Hostel$reportsComplaintsArgs<ExtArgs>
    _count?: boolean | HostelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hostel"]>

  export type HostelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostelId?: boolean
    hostelNumber?: boolean
    hostelName?: boolean
    hostelAddress?: boolean
    totalRooms?: boolean
    totalBeds?: boolean
    totalFloors?: boolean
    hostelExpiryRemainingTime?: boolean
    hostelExpiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    userInId?: boolean
    authId?: boolean
  }, ExtArgs["result"]["hostel"]>

  export type HostelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostelId?: boolean
    hostelNumber?: boolean
    hostelName?: boolean
    hostelAddress?: boolean
    totalRooms?: boolean
    totalBeds?: boolean
    totalFloors?: boolean
    hostelExpiryRemainingTime?: boolean
    hostelExpiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    userInId?: boolean
    authId?: boolean
  }, ExtArgs["result"]["hostel"]>

  export type HostelSelectScalar = {
    id?: boolean
    hostelId?: boolean
    hostelNumber?: boolean
    hostelName?: boolean
    hostelAddress?: boolean
    totalRooms?: boolean
    totalBeds?: boolean
    totalFloors?: boolean
    hostelExpiryRemainingTime?: boolean
    hostelExpiryDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    userInId?: boolean
    authId?: boolean
  }

  export type HostelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "hostelId" | "hostelNumber" | "hostelName" | "hostelAddress" | "totalRooms" | "totalBeds" | "totalFloors" | "hostelExpiryRemainingTime" | "hostelExpiryDate" | "createdAt" | "updatedAt" | "academicYear" | "userInId" | "authId", ExtArgs["result"]["hostel"]>
  export type HostelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admins?: boolean | Hostel$adminsArgs<ExtArgs>
    reportsComplaints?: boolean | Hostel$reportsComplaintsArgs<ExtArgs>
    _count?: boolean | HostelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HostelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type HostelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $HostelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Hostel"
    objects: {
      admins: Prisma.$AdminPayload<ExtArgs>[]
      reportsComplaints: Prisma.$ReportsComplaintsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      hostelId: string
      hostelNumber: string
      hostelName: string
      hostelAddress: string
      totalRooms: number
      totalBeds: number
      totalFloors: number
      hostelExpiryRemainingTime: number
      hostelExpiryDate: Date
      createdAt: Date
      updatedAt: Date
      academicYear: number
      userInId: string
      authId: string
    }, ExtArgs["result"]["hostel"]>
    composites: {}
  }

  type HostelGetPayload<S extends boolean | null | undefined | HostelDefaultArgs> = $Result.GetResult<Prisma.$HostelPayload, S>

  type HostelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HostelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HostelCountAggregateInputType | true
    }

  export interface HostelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Hostel'], meta: { name: 'Hostel' } }
    /**
     * Find zero or one Hostel that matches the filter.
     * @param {HostelFindUniqueArgs} args - Arguments to find a Hostel
     * @example
     * // Get one Hostel
     * const hostel = await prisma.hostel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HostelFindUniqueArgs>(args: SelectSubset<T, HostelFindUniqueArgs<ExtArgs>>): Prisma__HostelClient<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Hostel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HostelFindUniqueOrThrowArgs} args - Arguments to find a Hostel
     * @example
     * // Get one Hostel
     * const hostel = await prisma.hostel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HostelFindUniqueOrThrowArgs>(args: SelectSubset<T, HostelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HostelClient<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Hostel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelFindFirstArgs} args - Arguments to find a Hostel
     * @example
     * // Get one Hostel
     * const hostel = await prisma.hostel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HostelFindFirstArgs>(args?: SelectSubset<T, HostelFindFirstArgs<ExtArgs>>): Prisma__HostelClient<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Hostel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelFindFirstOrThrowArgs} args - Arguments to find a Hostel
     * @example
     * // Get one Hostel
     * const hostel = await prisma.hostel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HostelFindFirstOrThrowArgs>(args?: SelectSubset<T, HostelFindFirstOrThrowArgs<ExtArgs>>): Prisma__HostelClient<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Hostels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hostels
     * const hostels = await prisma.hostel.findMany()
     * 
     * // Get first 10 Hostels
     * const hostels = await prisma.hostel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostelWithIdOnly = await prisma.hostel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HostelFindManyArgs>(args?: SelectSubset<T, HostelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Hostel.
     * @param {HostelCreateArgs} args - Arguments to create a Hostel.
     * @example
     * // Create one Hostel
     * const Hostel = await prisma.hostel.create({
     *   data: {
     *     // ... data to create a Hostel
     *   }
     * })
     * 
     */
    create<T extends HostelCreateArgs>(args: SelectSubset<T, HostelCreateArgs<ExtArgs>>): Prisma__HostelClient<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Hostels.
     * @param {HostelCreateManyArgs} args - Arguments to create many Hostels.
     * @example
     * // Create many Hostels
     * const hostel = await prisma.hostel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HostelCreateManyArgs>(args?: SelectSubset<T, HostelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Hostels and returns the data saved in the database.
     * @param {HostelCreateManyAndReturnArgs} args - Arguments to create many Hostels.
     * @example
     * // Create many Hostels
     * const hostel = await prisma.hostel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Hostels and only return the `id`
     * const hostelWithIdOnly = await prisma.hostel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HostelCreateManyAndReturnArgs>(args?: SelectSubset<T, HostelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Hostel.
     * @param {HostelDeleteArgs} args - Arguments to delete one Hostel.
     * @example
     * // Delete one Hostel
     * const Hostel = await prisma.hostel.delete({
     *   where: {
     *     // ... filter to delete one Hostel
     *   }
     * })
     * 
     */
    delete<T extends HostelDeleteArgs>(args: SelectSubset<T, HostelDeleteArgs<ExtArgs>>): Prisma__HostelClient<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Hostel.
     * @param {HostelUpdateArgs} args - Arguments to update one Hostel.
     * @example
     * // Update one Hostel
     * const hostel = await prisma.hostel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HostelUpdateArgs>(args: SelectSubset<T, HostelUpdateArgs<ExtArgs>>): Prisma__HostelClient<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Hostels.
     * @param {HostelDeleteManyArgs} args - Arguments to filter Hostels to delete.
     * @example
     * // Delete a few Hostels
     * const { count } = await prisma.hostel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HostelDeleteManyArgs>(args?: SelectSubset<T, HostelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hostels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hostels
     * const hostel = await prisma.hostel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HostelUpdateManyArgs>(args: SelectSubset<T, HostelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hostels and returns the data updated in the database.
     * @param {HostelUpdateManyAndReturnArgs} args - Arguments to update many Hostels.
     * @example
     * // Update many Hostels
     * const hostel = await prisma.hostel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Hostels and only return the `id`
     * const hostelWithIdOnly = await prisma.hostel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HostelUpdateManyAndReturnArgs>(args: SelectSubset<T, HostelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Hostel.
     * @param {HostelUpsertArgs} args - Arguments to update or create a Hostel.
     * @example
     * // Update or create a Hostel
     * const hostel = await prisma.hostel.upsert({
     *   create: {
     *     // ... data to create a Hostel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hostel we want to update
     *   }
     * })
     */
    upsert<T extends HostelUpsertArgs>(args: SelectSubset<T, HostelUpsertArgs<ExtArgs>>): Prisma__HostelClient<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Hostels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelCountArgs} args - Arguments to filter Hostels to count.
     * @example
     * // Count the number of Hostels
     * const count = await prisma.hostel.count({
     *   where: {
     *     // ... the filter for the Hostels we want to count
     *   }
     * })
    **/
    count<T extends HostelCountArgs>(
      args?: Subset<T, HostelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hostel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostelAggregateArgs>(args: Subset<T, HostelAggregateArgs>): Prisma.PrismaPromise<GetHostelAggregateType<T>>

    /**
     * Group by Hostel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostelGroupByArgs['orderBy'] }
        : { orderBy?: HostelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Hostel model
   */
  readonly fields: HostelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Hostel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HostelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admins<T extends Hostel$adminsArgs<ExtArgs> = {}>(args?: Subset<T, Hostel$adminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reportsComplaints<T extends Hostel$reportsComplaintsArgs<ExtArgs> = {}>(args?: Subset<T, Hostel$reportsComplaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Hostel model
   */
  interface HostelFieldRefs {
    readonly id: FieldRef<"Hostel", 'Int'>
    readonly hostelId: FieldRef<"Hostel", 'String'>
    readonly hostelNumber: FieldRef<"Hostel", 'String'>
    readonly hostelName: FieldRef<"Hostel", 'String'>
    readonly hostelAddress: FieldRef<"Hostel", 'String'>
    readonly totalRooms: FieldRef<"Hostel", 'Int'>
    readonly totalBeds: FieldRef<"Hostel", 'Int'>
    readonly totalFloors: FieldRef<"Hostel", 'Int'>
    readonly hostelExpiryRemainingTime: FieldRef<"Hostel", 'Int'>
    readonly hostelExpiryDate: FieldRef<"Hostel", 'DateTime'>
    readonly createdAt: FieldRef<"Hostel", 'DateTime'>
    readonly updatedAt: FieldRef<"Hostel", 'DateTime'>
    readonly academicYear: FieldRef<"Hostel", 'Int'>
    readonly userInId: FieldRef<"Hostel", 'String'>
    readonly authId: FieldRef<"Hostel", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Hostel findUnique
   */
  export type HostelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostelInclude<ExtArgs> | null
    /**
     * Filter, which Hostel to fetch.
     */
    where: HostelWhereUniqueInput
  }

  /**
   * Hostel findUniqueOrThrow
   */
  export type HostelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostelInclude<ExtArgs> | null
    /**
     * Filter, which Hostel to fetch.
     */
    where: HostelWhereUniqueInput
  }

  /**
   * Hostel findFirst
   */
  export type HostelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostelInclude<ExtArgs> | null
    /**
     * Filter, which Hostel to fetch.
     */
    where?: HostelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hostels to fetch.
     */
    orderBy?: HostelOrderByWithRelationInput | HostelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hostels.
     */
    cursor?: HostelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hostels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hostels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hostels.
     */
    distinct?: HostelScalarFieldEnum | HostelScalarFieldEnum[]
  }

  /**
   * Hostel findFirstOrThrow
   */
  export type HostelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostelInclude<ExtArgs> | null
    /**
     * Filter, which Hostel to fetch.
     */
    where?: HostelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hostels to fetch.
     */
    orderBy?: HostelOrderByWithRelationInput | HostelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hostels.
     */
    cursor?: HostelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hostels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hostels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hostels.
     */
    distinct?: HostelScalarFieldEnum | HostelScalarFieldEnum[]
  }

  /**
   * Hostel findMany
   */
  export type HostelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostelInclude<ExtArgs> | null
    /**
     * Filter, which Hostels to fetch.
     */
    where?: HostelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hostels to fetch.
     */
    orderBy?: HostelOrderByWithRelationInput | HostelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hostels.
     */
    cursor?: HostelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hostels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hostels.
     */
    skip?: number
    distinct?: HostelScalarFieldEnum | HostelScalarFieldEnum[]
  }

  /**
   * Hostel create
   */
  export type HostelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostelInclude<ExtArgs> | null
    /**
     * The data needed to create a Hostel.
     */
    data: XOR<HostelCreateInput, HostelUncheckedCreateInput>
  }

  /**
   * Hostel createMany
   */
  export type HostelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Hostels.
     */
    data: HostelCreateManyInput | HostelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Hostel createManyAndReturn
   */
  export type HostelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * The data used to create many Hostels.
     */
    data: HostelCreateManyInput | HostelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Hostel update
   */
  export type HostelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostelInclude<ExtArgs> | null
    /**
     * The data needed to update a Hostel.
     */
    data: XOR<HostelUpdateInput, HostelUncheckedUpdateInput>
    /**
     * Choose, which Hostel to update.
     */
    where: HostelWhereUniqueInput
  }

  /**
   * Hostel updateMany
   */
  export type HostelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Hostels.
     */
    data: XOR<HostelUpdateManyMutationInput, HostelUncheckedUpdateManyInput>
    /**
     * Filter which Hostels to update
     */
    where?: HostelWhereInput
    /**
     * Limit how many Hostels to update.
     */
    limit?: number
  }

  /**
   * Hostel updateManyAndReturn
   */
  export type HostelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * The data used to update Hostels.
     */
    data: XOR<HostelUpdateManyMutationInput, HostelUncheckedUpdateManyInput>
    /**
     * Filter which Hostels to update
     */
    where?: HostelWhereInput
    /**
     * Limit how many Hostels to update.
     */
    limit?: number
  }

  /**
   * Hostel upsert
   */
  export type HostelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostelInclude<ExtArgs> | null
    /**
     * The filter to search for the Hostel to update in case it exists.
     */
    where: HostelWhereUniqueInput
    /**
     * In case the Hostel found by the `where` argument doesn't exist, create a new Hostel with this data.
     */
    create: XOR<HostelCreateInput, HostelUncheckedCreateInput>
    /**
     * In case the Hostel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HostelUpdateInput, HostelUncheckedUpdateInput>
  }

  /**
   * Hostel delete
   */
  export type HostelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostelInclude<ExtArgs> | null
    /**
     * Filter which Hostel to delete.
     */
    where: HostelWhereUniqueInput
  }

  /**
   * Hostel deleteMany
   */
  export type HostelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hostels to delete
     */
    where?: HostelWhereInput
    /**
     * Limit how many Hostels to delete.
     */
    limit?: number
  }

  /**
   * Hostel.admins
   */
  export type Hostel$adminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    cursor?: AdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Hostel.reportsComplaints
   */
  export type Hostel$reportsComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsInclude<ExtArgs> | null
    where?: ReportsComplaintsWhereInput
    orderBy?: ReportsComplaintsOrderByWithRelationInput | ReportsComplaintsOrderByWithRelationInput[]
    cursor?: ReportsComplaintsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportsComplaintsScalarFieldEnum | ReportsComplaintsScalarFieldEnum[]
  }

  /**
   * Hostel without action
   */
  export type HostelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hostel
     */
    select?: HostelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hostel
     */
    omit?: HostelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostelInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    adminId: string | null
    adminName: string | null
    adminEmail: string | null
    adminPhone: string | null
    authId: string | null
    hostelId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    adminId: string | null
    adminName: string | null
    adminEmail: string | null
    adminPhone: string | null
    authId: string | null
    hostelId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    adminId: number
    adminName: number
    adminEmail: number
    adminPhone: number
    authId: number
    hostelId: number
    createdAt: number
    updatedAt: number
    academicYear: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    adminId?: true
    adminName?: true
    adminEmail?: true
    adminPhone?: true
    authId?: true
    hostelId?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    adminId?: true
    adminName?: true
    adminEmail?: true
    adminPhone?: true
    authId?: true
    hostelId?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    adminId?: true
    adminName?: true
    adminEmail?: true
    adminPhone?: true
    authId?: true
    hostelId?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    adminId: string
    adminName: string
    adminEmail: string
    adminPhone: string
    authId: string
    hostelId: string
    createdAt: Date
    updatedAt: Date
    academicYear: number
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    adminName?: boolean
    adminEmail?: boolean
    adminPhone?: boolean
    authId?: boolean
    hostelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    adminName?: boolean
    adminEmail?: boolean
    adminPhone?: boolean
    authId?: boolean
    hostelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    adminName?: boolean
    adminEmail?: boolean
    adminPhone?: boolean
    authId?: boolean
    hostelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    adminId?: boolean
    adminName?: boolean
    adminEmail?: boolean
    adminPhone?: boolean
    authId?: boolean
    hostelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adminId" | "adminName" | "adminEmail" | "adminPhone" | "authId" | "hostelId" | "createdAt" | "updatedAt" | "academicYear", ExtArgs["result"]["admin"]>
  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
  }
  export type AdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
  }
  export type AdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
  }

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      hostel: Prisma.$HostelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      adminId: string
      adminName: string
      adminEmail: string
      adminPhone: string
      authId: string
      hostelId: string
      createdAt: Date
      updatedAt: Date
      academicYear: number
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hostel<T extends HostelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HostelDefaultArgs<ExtArgs>>): Prisma__HostelClient<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly adminId: FieldRef<"Admin", 'String'>
    readonly adminName: FieldRef<"Admin", 'String'>
    readonly adminEmail: FieldRef<"Admin", 'String'>
    readonly adminPhone: FieldRef<"Admin", 'String'>
    readonly authId: FieldRef<"Admin", 'String'>
    readonly hostelId: FieldRef<"Admin", 'String'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly updatedAt: FieldRef<"Admin", 'DateTime'>
    readonly academicYear: FieldRef<"Admin", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model HostelRequest
   */

  export type AggregateHostelRequest = {
    _count: HostelRequestCountAggregateOutputType | null
    _avg: HostelRequestAvgAggregateOutputType | null
    _sum: HostelRequestSumAggregateOutputType | null
    _min: HostelRequestMinAggregateOutputType | null
    _max: HostelRequestMaxAggregateOutputType | null
  }

  export type HostelRequestAvgAggregateOutputType = {
    id: number | null
    totalRooms: number | null
    totalBeds: number | null
    totalFloors: number | null
    academicYear: number | null
  }

  export type HostelRequestSumAggregateOutputType = {
    id: number | null
    totalRooms: number | null
    totalBeds: number | null
    totalFloors: number | null
    academicYear: number | null
  }

  export type HostelRequestMinAggregateOutputType = {
    id: number | null
    hostelRequestId: string | null
    hostelName: string | null
    hostelAddress: string | null
    totalRooms: number | null
    totalBeds: number | null
    totalFloors: number | null
    adminName: string | null
    adminEmail: string | null
    adminPhone: string | null
    adminPassword: string | null
    adminAddress: string | null
    status: $Enums.Status | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type HostelRequestMaxAggregateOutputType = {
    id: number | null
    hostelRequestId: string | null
    hostelName: string | null
    hostelAddress: string | null
    totalRooms: number | null
    totalBeds: number | null
    totalFloors: number | null
    adminName: string | null
    adminEmail: string | null
    adminPhone: string | null
    adminPassword: string | null
    adminAddress: string | null
    status: $Enums.Status | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type HostelRequestCountAggregateOutputType = {
    id: number
    hostelRequestId: number
    hostelName: number
    hostelAddress: number
    totalRooms: number
    totalBeds: number
    totalFloors: number
    adminName: number
    adminEmail: number
    adminPhone: number
    adminPassword: number
    adminAddress: number
    status: number
    createdAt: number
    updatedAt: number
    academicYear: number
    _all: number
  }


  export type HostelRequestAvgAggregateInputType = {
    id?: true
    totalRooms?: true
    totalBeds?: true
    totalFloors?: true
    academicYear?: true
  }

  export type HostelRequestSumAggregateInputType = {
    id?: true
    totalRooms?: true
    totalBeds?: true
    totalFloors?: true
    academicYear?: true
  }

  export type HostelRequestMinAggregateInputType = {
    id?: true
    hostelRequestId?: true
    hostelName?: true
    hostelAddress?: true
    totalRooms?: true
    totalBeds?: true
    totalFloors?: true
    adminName?: true
    adminEmail?: true
    adminPhone?: true
    adminPassword?: true
    adminAddress?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type HostelRequestMaxAggregateInputType = {
    id?: true
    hostelRequestId?: true
    hostelName?: true
    hostelAddress?: true
    totalRooms?: true
    totalBeds?: true
    totalFloors?: true
    adminName?: true
    adminEmail?: true
    adminPhone?: true
    adminPassword?: true
    adminAddress?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type HostelRequestCountAggregateInputType = {
    id?: true
    hostelRequestId?: true
    hostelName?: true
    hostelAddress?: true
    totalRooms?: true
    totalBeds?: true
    totalFloors?: true
    adminName?: true
    adminEmail?: true
    adminPhone?: true
    adminPassword?: true
    adminAddress?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    _all?: true
  }

  export type HostelRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostelRequest to aggregate.
     */
    where?: HostelRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelRequests to fetch.
     */
    orderBy?: HostelRequestOrderByWithRelationInput | HostelRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HostelRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HostelRequests
    **/
    _count?: true | HostelRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HostelRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HostelRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostelRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostelRequestMaxAggregateInputType
  }

  export type GetHostelRequestAggregateType<T extends HostelRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateHostelRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHostelRequest[P]>
      : GetScalarType<T[P], AggregateHostelRequest[P]>
  }




  export type HostelRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostelRequestWhereInput
    orderBy?: HostelRequestOrderByWithAggregationInput | HostelRequestOrderByWithAggregationInput[]
    by: HostelRequestScalarFieldEnum[] | HostelRequestScalarFieldEnum
    having?: HostelRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostelRequestCountAggregateInputType | true
    _avg?: HostelRequestAvgAggregateInputType
    _sum?: HostelRequestSumAggregateInputType
    _min?: HostelRequestMinAggregateInputType
    _max?: HostelRequestMaxAggregateInputType
  }

  export type HostelRequestGroupByOutputType = {
    id: number
    hostelRequestId: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    adminName: string
    adminEmail: string
    adminPhone: string
    adminPassword: string
    adminAddress: string
    status: $Enums.Status
    createdAt: Date
    updatedAt: Date
    academicYear: number
    _count: HostelRequestCountAggregateOutputType | null
    _avg: HostelRequestAvgAggregateOutputType | null
    _sum: HostelRequestSumAggregateOutputType | null
    _min: HostelRequestMinAggregateOutputType | null
    _max: HostelRequestMaxAggregateOutputType | null
  }

  type GetHostelRequestGroupByPayload<T extends HostelRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HostelRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostelRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostelRequestGroupByOutputType[P]>
            : GetScalarType<T[P], HostelRequestGroupByOutputType[P]>
        }
      >
    >


  export type HostelRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostelRequestId?: boolean
    hostelName?: boolean
    hostelAddress?: boolean
    totalRooms?: boolean
    totalBeds?: boolean
    totalFloors?: boolean
    adminName?: boolean
    adminEmail?: boolean
    adminPhone?: boolean
    adminPassword?: boolean
    adminAddress?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["hostelRequest"]>

  export type HostelRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostelRequestId?: boolean
    hostelName?: boolean
    hostelAddress?: boolean
    totalRooms?: boolean
    totalBeds?: boolean
    totalFloors?: boolean
    adminName?: boolean
    adminEmail?: boolean
    adminPhone?: boolean
    adminPassword?: boolean
    adminAddress?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["hostelRequest"]>

  export type HostelRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostelRequestId?: boolean
    hostelName?: boolean
    hostelAddress?: boolean
    totalRooms?: boolean
    totalBeds?: boolean
    totalFloors?: boolean
    adminName?: boolean
    adminEmail?: boolean
    adminPhone?: boolean
    adminPassword?: boolean
    adminAddress?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["hostelRequest"]>

  export type HostelRequestSelectScalar = {
    id?: boolean
    hostelRequestId?: boolean
    hostelName?: boolean
    hostelAddress?: boolean
    totalRooms?: boolean
    totalBeds?: boolean
    totalFloors?: boolean
    adminName?: boolean
    adminEmail?: boolean
    adminPhone?: boolean
    adminPassword?: boolean
    adminAddress?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }

  export type HostelRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "hostelRequestId" | "hostelName" | "hostelAddress" | "totalRooms" | "totalBeds" | "totalFloors" | "adminName" | "adminEmail" | "adminPhone" | "adminPassword" | "adminAddress" | "status" | "createdAt" | "updatedAt" | "academicYear", ExtArgs["result"]["hostelRequest"]>

  export type $HostelRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HostelRequest"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      hostelRequestId: string
      hostelName: string
      hostelAddress: string
      totalRooms: number
      totalBeds: number
      totalFloors: number
      adminName: string
      adminEmail: string
      adminPhone: string
      adminPassword: string
      adminAddress: string
      status: $Enums.Status
      createdAt: Date
      updatedAt: Date
      academicYear: number
    }, ExtArgs["result"]["hostelRequest"]>
    composites: {}
  }

  type HostelRequestGetPayload<S extends boolean | null | undefined | HostelRequestDefaultArgs> = $Result.GetResult<Prisma.$HostelRequestPayload, S>

  type HostelRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HostelRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HostelRequestCountAggregateInputType | true
    }

  export interface HostelRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HostelRequest'], meta: { name: 'HostelRequest' } }
    /**
     * Find zero or one HostelRequest that matches the filter.
     * @param {HostelRequestFindUniqueArgs} args - Arguments to find a HostelRequest
     * @example
     * // Get one HostelRequest
     * const hostelRequest = await prisma.hostelRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HostelRequestFindUniqueArgs>(args: SelectSubset<T, HostelRequestFindUniqueArgs<ExtArgs>>): Prisma__HostelRequestClient<$Result.GetResult<Prisma.$HostelRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HostelRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HostelRequestFindUniqueOrThrowArgs} args - Arguments to find a HostelRequest
     * @example
     * // Get one HostelRequest
     * const hostelRequest = await prisma.hostelRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HostelRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, HostelRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HostelRequestClient<$Result.GetResult<Prisma.$HostelRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HostelRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRequestFindFirstArgs} args - Arguments to find a HostelRequest
     * @example
     * // Get one HostelRequest
     * const hostelRequest = await prisma.hostelRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HostelRequestFindFirstArgs>(args?: SelectSubset<T, HostelRequestFindFirstArgs<ExtArgs>>): Prisma__HostelRequestClient<$Result.GetResult<Prisma.$HostelRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HostelRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRequestFindFirstOrThrowArgs} args - Arguments to find a HostelRequest
     * @example
     * // Get one HostelRequest
     * const hostelRequest = await prisma.hostelRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HostelRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, HostelRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__HostelRequestClient<$Result.GetResult<Prisma.$HostelRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HostelRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HostelRequests
     * const hostelRequests = await prisma.hostelRequest.findMany()
     * 
     * // Get first 10 HostelRequests
     * const hostelRequests = await prisma.hostelRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostelRequestWithIdOnly = await prisma.hostelRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HostelRequestFindManyArgs>(args?: SelectSubset<T, HostelRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HostelRequest.
     * @param {HostelRequestCreateArgs} args - Arguments to create a HostelRequest.
     * @example
     * // Create one HostelRequest
     * const HostelRequest = await prisma.hostelRequest.create({
     *   data: {
     *     // ... data to create a HostelRequest
     *   }
     * })
     * 
     */
    create<T extends HostelRequestCreateArgs>(args: SelectSubset<T, HostelRequestCreateArgs<ExtArgs>>): Prisma__HostelRequestClient<$Result.GetResult<Prisma.$HostelRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HostelRequests.
     * @param {HostelRequestCreateManyArgs} args - Arguments to create many HostelRequests.
     * @example
     * // Create many HostelRequests
     * const hostelRequest = await prisma.hostelRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HostelRequestCreateManyArgs>(args?: SelectSubset<T, HostelRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HostelRequests and returns the data saved in the database.
     * @param {HostelRequestCreateManyAndReturnArgs} args - Arguments to create many HostelRequests.
     * @example
     * // Create many HostelRequests
     * const hostelRequest = await prisma.hostelRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HostelRequests and only return the `id`
     * const hostelRequestWithIdOnly = await prisma.hostelRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HostelRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, HostelRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HostelRequest.
     * @param {HostelRequestDeleteArgs} args - Arguments to delete one HostelRequest.
     * @example
     * // Delete one HostelRequest
     * const HostelRequest = await prisma.hostelRequest.delete({
     *   where: {
     *     // ... filter to delete one HostelRequest
     *   }
     * })
     * 
     */
    delete<T extends HostelRequestDeleteArgs>(args: SelectSubset<T, HostelRequestDeleteArgs<ExtArgs>>): Prisma__HostelRequestClient<$Result.GetResult<Prisma.$HostelRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HostelRequest.
     * @param {HostelRequestUpdateArgs} args - Arguments to update one HostelRequest.
     * @example
     * // Update one HostelRequest
     * const hostelRequest = await prisma.hostelRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HostelRequestUpdateArgs>(args: SelectSubset<T, HostelRequestUpdateArgs<ExtArgs>>): Prisma__HostelRequestClient<$Result.GetResult<Prisma.$HostelRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HostelRequests.
     * @param {HostelRequestDeleteManyArgs} args - Arguments to filter HostelRequests to delete.
     * @example
     * // Delete a few HostelRequests
     * const { count } = await prisma.hostelRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HostelRequestDeleteManyArgs>(args?: SelectSubset<T, HostelRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostelRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HostelRequests
     * const hostelRequest = await prisma.hostelRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HostelRequestUpdateManyArgs>(args: SelectSubset<T, HostelRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostelRequests and returns the data updated in the database.
     * @param {HostelRequestUpdateManyAndReturnArgs} args - Arguments to update many HostelRequests.
     * @example
     * // Update many HostelRequests
     * const hostelRequest = await prisma.hostelRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HostelRequests and only return the `id`
     * const hostelRequestWithIdOnly = await prisma.hostelRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HostelRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, HostelRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HostelRequest.
     * @param {HostelRequestUpsertArgs} args - Arguments to update or create a HostelRequest.
     * @example
     * // Update or create a HostelRequest
     * const hostelRequest = await prisma.hostelRequest.upsert({
     *   create: {
     *     // ... data to create a HostelRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HostelRequest we want to update
     *   }
     * })
     */
    upsert<T extends HostelRequestUpsertArgs>(args: SelectSubset<T, HostelRequestUpsertArgs<ExtArgs>>): Prisma__HostelRequestClient<$Result.GetResult<Prisma.$HostelRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HostelRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRequestCountArgs} args - Arguments to filter HostelRequests to count.
     * @example
     * // Count the number of HostelRequests
     * const count = await prisma.hostelRequest.count({
     *   where: {
     *     // ... the filter for the HostelRequests we want to count
     *   }
     * })
    **/
    count<T extends HostelRequestCountArgs>(
      args?: Subset<T, HostelRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostelRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HostelRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostelRequestAggregateArgs>(args: Subset<T, HostelRequestAggregateArgs>): Prisma.PrismaPromise<GetHostelRequestAggregateType<T>>

    /**
     * Group by HostelRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostelRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostelRequestGroupByArgs['orderBy'] }
        : { orderBy?: HostelRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostelRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostelRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HostelRequest model
   */
  readonly fields: HostelRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HostelRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HostelRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HostelRequest model
   */
  interface HostelRequestFieldRefs {
    readonly id: FieldRef<"HostelRequest", 'Int'>
    readonly hostelRequestId: FieldRef<"HostelRequest", 'String'>
    readonly hostelName: FieldRef<"HostelRequest", 'String'>
    readonly hostelAddress: FieldRef<"HostelRequest", 'String'>
    readonly totalRooms: FieldRef<"HostelRequest", 'Int'>
    readonly totalBeds: FieldRef<"HostelRequest", 'Int'>
    readonly totalFloors: FieldRef<"HostelRequest", 'Int'>
    readonly adminName: FieldRef<"HostelRequest", 'String'>
    readonly adminEmail: FieldRef<"HostelRequest", 'String'>
    readonly adminPhone: FieldRef<"HostelRequest", 'String'>
    readonly adminPassword: FieldRef<"HostelRequest", 'String'>
    readonly adminAddress: FieldRef<"HostelRequest", 'String'>
    readonly status: FieldRef<"HostelRequest", 'Status'>
    readonly createdAt: FieldRef<"HostelRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"HostelRequest", 'DateTime'>
    readonly academicYear: FieldRef<"HostelRequest", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * HostelRequest findUnique
   */
  export type HostelRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
    /**
     * Filter, which HostelRequest to fetch.
     */
    where: HostelRequestWhereUniqueInput
  }

  /**
   * HostelRequest findUniqueOrThrow
   */
  export type HostelRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
    /**
     * Filter, which HostelRequest to fetch.
     */
    where: HostelRequestWhereUniqueInput
  }

  /**
   * HostelRequest findFirst
   */
  export type HostelRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
    /**
     * Filter, which HostelRequest to fetch.
     */
    where?: HostelRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelRequests to fetch.
     */
    orderBy?: HostelRequestOrderByWithRelationInput | HostelRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostelRequests.
     */
    cursor?: HostelRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostelRequests.
     */
    distinct?: HostelRequestScalarFieldEnum | HostelRequestScalarFieldEnum[]
  }

  /**
   * HostelRequest findFirstOrThrow
   */
  export type HostelRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
    /**
     * Filter, which HostelRequest to fetch.
     */
    where?: HostelRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelRequests to fetch.
     */
    orderBy?: HostelRequestOrderByWithRelationInput | HostelRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostelRequests.
     */
    cursor?: HostelRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostelRequests.
     */
    distinct?: HostelRequestScalarFieldEnum | HostelRequestScalarFieldEnum[]
  }

  /**
   * HostelRequest findMany
   */
  export type HostelRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
    /**
     * Filter, which HostelRequests to fetch.
     */
    where?: HostelRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelRequests to fetch.
     */
    orderBy?: HostelRequestOrderByWithRelationInput | HostelRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HostelRequests.
     */
    cursor?: HostelRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelRequests.
     */
    skip?: number
    distinct?: HostelRequestScalarFieldEnum | HostelRequestScalarFieldEnum[]
  }

  /**
   * HostelRequest create
   */
  export type HostelRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
    /**
     * The data needed to create a HostelRequest.
     */
    data: XOR<HostelRequestCreateInput, HostelRequestUncheckedCreateInput>
  }

  /**
   * HostelRequest createMany
   */
  export type HostelRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HostelRequests.
     */
    data: HostelRequestCreateManyInput | HostelRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostelRequest createManyAndReturn
   */
  export type HostelRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
    /**
     * The data used to create many HostelRequests.
     */
    data: HostelRequestCreateManyInput | HostelRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostelRequest update
   */
  export type HostelRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
    /**
     * The data needed to update a HostelRequest.
     */
    data: XOR<HostelRequestUpdateInput, HostelRequestUncheckedUpdateInput>
    /**
     * Choose, which HostelRequest to update.
     */
    where: HostelRequestWhereUniqueInput
  }

  /**
   * HostelRequest updateMany
   */
  export type HostelRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HostelRequests.
     */
    data: XOR<HostelRequestUpdateManyMutationInput, HostelRequestUncheckedUpdateManyInput>
    /**
     * Filter which HostelRequests to update
     */
    where?: HostelRequestWhereInput
    /**
     * Limit how many HostelRequests to update.
     */
    limit?: number
  }

  /**
   * HostelRequest updateManyAndReturn
   */
  export type HostelRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
    /**
     * The data used to update HostelRequests.
     */
    data: XOR<HostelRequestUpdateManyMutationInput, HostelRequestUncheckedUpdateManyInput>
    /**
     * Filter which HostelRequests to update
     */
    where?: HostelRequestWhereInput
    /**
     * Limit how many HostelRequests to update.
     */
    limit?: number
  }

  /**
   * HostelRequest upsert
   */
  export type HostelRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
    /**
     * The filter to search for the HostelRequest to update in case it exists.
     */
    where: HostelRequestWhereUniqueInput
    /**
     * In case the HostelRequest found by the `where` argument doesn't exist, create a new HostelRequest with this data.
     */
    create: XOR<HostelRequestCreateInput, HostelRequestUncheckedCreateInput>
    /**
     * In case the HostelRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HostelRequestUpdateInput, HostelRequestUncheckedUpdateInput>
  }

  /**
   * HostelRequest delete
   */
  export type HostelRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
    /**
     * Filter which HostelRequest to delete.
     */
    where: HostelRequestWhereUniqueInput
  }

  /**
   * HostelRequest deleteMany
   */
  export type HostelRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostelRequests to delete
     */
    where?: HostelRequestWhereInput
    /**
     * Limit how many HostelRequests to delete.
     */
    limit?: number
  }

  /**
   * HostelRequest without action
   */
  export type HostelRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRequest
     */
    select?: HostelRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRequest
     */
    omit?: HostelRequestOmit<ExtArgs> | null
  }


  /**
   * Model ReportsComplaints
   */

  export type AggregateReportsComplaints = {
    _count: ReportsComplaintsCountAggregateOutputType | null
    _avg: ReportsComplaintsAvgAggregateOutputType | null
    _sum: ReportsComplaintsSumAggregateOutputType | null
    _min: ReportsComplaintsMinAggregateOutputType | null
    _max: ReportsComplaintsMaxAggregateOutputType | null
  }

  export type ReportsComplaintsAvgAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type ReportsComplaintsSumAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type ReportsComplaintsMinAggregateOutputType = {
    id: number | null
    reportId: string | null
    reportTitle: string | null
    reportDescription: string | null
    reportType: $Enums.ReportType | null
    reportStatus: $Enums.Status | null
    reportPriority: $Enums.Priority | null
    reporterUserType: $Enums.Role | null
    userId: string | null
    hostelId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type ReportsComplaintsMaxAggregateOutputType = {
    id: number | null
    reportId: string | null
    reportTitle: string | null
    reportDescription: string | null
    reportType: $Enums.ReportType | null
    reportStatus: $Enums.Status | null
    reportPriority: $Enums.Priority | null
    reporterUserType: $Enums.Role | null
    userId: string | null
    hostelId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type ReportsComplaintsCountAggregateOutputType = {
    id: number
    reportId: number
    reportTitle: number
    reportDescription: number
    reportType: number
    reportStatus: number
    reportPriority: number
    reporterUserType: number
    userId: number
    hostelId: number
    createdAt: number
    updatedAt: number
    academicYear: number
    _all: number
  }


  export type ReportsComplaintsAvgAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type ReportsComplaintsSumAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type ReportsComplaintsMinAggregateInputType = {
    id?: true
    reportId?: true
    reportTitle?: true
    reportDescription?: true
    reportType?: true
    reportStatus?: true
    reportPriority?: true
    reporterUserType?: true
    userId?: true
    hostelId?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type ReportsComplaintsMaxAggregateInputType = {
    id?: true
    reportId?: true
    reportTitle?: true
    reportDescription?: true
    reportType?: true
    reportStatus?: true
    reportPriority?: true
    reporterUserType?: true
    userId?: true
    hostelId?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type ReportsComplaintsCountAggregateInputType = {
    id?: true
    reportId?: true
    reportTitle?: true
    reportDescription?: true
    reportType?: true
    reportStatus?: true
    reportPriority?: true
    reporterUserType?: true
    userId?: true
    hostelId?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    _all?: true
  }

  export type ReportsComplaintsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportsComplaints to aggregate.
     */
    where?: ReportsComplaintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportsComplaints to fetch.
     */
    orderBy?: ReportsComplaintsOrderByWithRelationInput | ReportsComplaintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportsComplaintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportsComplaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportsComplaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportsComplaints
    **/
    _count?: true | ReportsComplaintsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportsComplaintsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportsComplaintsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportsComplaintsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportsComplaintsMaxAggregateInputType
  }

  export type GetReportsComplaintsAggregateType<T extends ReportsComplaintsAggregateArgs> = {
        [P in keyof T & keyof AggregateReportsComplaints]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportsComplaints[P]>
      : GetScalarType<T[P], AggregateReportsComplaints[P]>
  }




  export type ReportsComplaintsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportsComplaintsWhereInput
    orderBy?: ReportsComplaintsOrderByWithAggregationInput | ReportsComplaintsOrderByWithAggregationInput[]
    by: ReportsComplaintsScalarFieldEnum[] | ReportsComplaintsScalarFieldEnum
    having?: ReportsComplaintsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportsComplaintsCountAggregateInputType | true
    _avg?: ReportsComplaintsAvgAggregateInputType
    _sum?: ReportsComplaintsSumAggregateInputType
    _min?: ReportsComplaintsMinAggregateInputType
    _max?: ReportsComplaintsMaxAggregateInputType
  }

  export type ReportsComplaintsGroupByOutputType = {
    id: number
    reportId: string
    reportTitle: string
    reportDescription: string
    reportType: $Enums.ReportType
    reportStatus: $Enums.Status
    reportPriority: $Enums.Priority
    reporterUserType: $Enums.Role
    userId: string | null
    hostelId: string
    createdAt: Date
    updatedAt: Date
    academicYear: number
    _count: ReportsComplaintsCountAggregateOutputType | null
    _avg: ReportsComplaintsAvgAggregateOutputType | null
    _sum: ReportsComplaintsSumAggregateOutputType | null
    _min: ReportsComplaintsMinAggregateOutputType | null
    _max: ReportsComplaintsMaxAggregateOutputType | null
  }

  type GetReportsComplaintsGroupByPayload<T extends ReportsComplaintsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportsComplaintsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportsComplaintsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportsComplaintsGroupByOutputType[P]>
            : GetScalarType<T[P], ReportsComplaintsGroupByOutputType[P]>
        }
      >
    >


  export type ReportsComplaintsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    reportTitle?: boolean
    reportDescription?: boolean
    reportType?: boolean
    reportStatus?: boolean
    reportPriority?: boolean
    reporterUserType?: boolean
    userId?: boolean
    hostelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
    reportReplies?: boolean | ReportsComplaints$reportRepliesArgs<ExtArgs>
    _count?: boolean | ReportsComplaintsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportsComplaints"]>

  export type ReportsComplaintsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    reportTitle?: boolean
    reportDescription?: boolean
    reportType?: boolean
    reportStatus?: boolean
    reportPriority?: boolean
    reporterUserType?: boolean
    userId?: boolean
    hostelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportsComplaints"]>

  export type ReportsComplaintsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportId?: boolean
    reportTitle?: boolean
    reportDescription?: boolean
    reportType?: boolean
    reportStatus?: boolean
    reportPriority?: boolean
    reporterUserType?: boolean
    userId?: boolean
    hostelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportsComplaints"]>

  export type ReportsComplaintsSelectScalar = {
    id?: boolean
    reportId?: boolean
    reportTitle?: boolean
    reportDescription?: boolean
    reportType?: boolean
    reportStatus?: boolean
    reportPriority?: boolean
    reporterUserType?: boolean
    userId?: boolean
    hostelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }

  export type ReportsComplaintsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reportId" | "reportTitle" | "reportDescription" | "reportType" | "reportStatus" | "reportPriority" | "reporterUserType" | "userId" | "hostelId" | "createdAt" | "updatedAt" | "academicYear", ExtArgs["result"]["reportsComplaints"]>
  export type ReportsComplaintsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
    reportReplies?: boolean | ReportsComplaints$reportRepliesArgs<ExtArgs>
    _count?: boolean | ReportsComplaintsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReportsComplaintsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
  }
  export type ReportsComplaintsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostel?: boolean | HostelDefaultArgs<ExtArgs>
  }

  export type $ReportsComplaintsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportsComplaints"
    objects: {
      hostel: Prisma.$HostelPayload<ExtArgs>
      reportReplies: Prisma.$ReportReplyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reportId: string
      reportTitle: string
      reportDescription: string
      reportType: $Enums.ReportType
      reportStatus: $Enums.Status
      reportPriority: $Enums.Priority
      reporterUserType: $Enums.Role
      userId: string | null
      hostelId: string
      createdAt: Date
      updatedAt: Date
      academicYear: number
    }, ExtArgs["result"]["reportsComplaints"]>
    composites: {}
  }

  type ReportsComplaintsGetPayload<S extends boolean | null | undefined | ReportsComplaintsDefaultArgs> = $Result.GetResult<Prisma.$ReportsComplaintsPayload, S>

  type ReportsComplaintsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportsComplaintsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportsComplaintsCountAggregateInputType | true
    }

  export interface ReportsComplaintsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportsComplaints'], meta: { name: 'ReportsComplaints' } }
    /**
     * Find zero or one ReportsComplaints that matches the filter.
     * @param {ReportsComplaintsFindUniqueArgs} args - Arguments to find a ReportsComplaints
     * @example
     * // Get one ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportsComplaintsFindUniqueArgs>(args: SelectSubset<T, ReportsComplaintsFindUniqueArgs<ExtArgs>>): Prisma__ReportsComplaintsClient<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportsComplaints that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportsComplaintsFindUniqueOrThrowArgs} args - Arguments to find a ReportsComplaints
     * @example
     * // Get one ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportsComplaintsFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportsComplaintsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportsComplaintsClient<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportsComplaints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsComplaintsFindFirstArgs} args - Arguments to find a ReportsComplaints
     * @example
     * // Get one ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportsComplaintsFindFirstArgs>(args?: SelectSubset<T, ReportsComplaintsFindFirstArgs<ExtArgs>>): Prisma__ReportsComplaintsClient<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportsComplaints that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsComplaintsFindFirstOrThrowArgs} args - Arguments to find a ReportsComplaints
     * @example
     * // Get one ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportsComplaintsFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportsComplaintsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportsComplaintsClient<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportsComplaints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsComplaintsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.findMany()
     * 
     * // Get first 10 ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportsComplaintsWithIdOnly = await prisma.reportsComplaints.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportsComplaintsFindManyArgs>(args?: SelectSubset<T, ReportsComplaintsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportsComplaints.
     * @param {ReportsComplaintsCreateArgs} args - Arguments to create a ReportsComplaints.
     * @example
     * // Create one ReportsComplaints
     * const ReportsComplaints = await prisma.reportsComplaints.create({
     *   data: {
     *     // ... data to create a ReportsComplaints
     *   }
     * })
     * 
     */
    create<T extends ReportsComplaintsCreateArgs>(args: SelectSubset<T, ReportsComplaintsCreateArgs<ExtArgs>>): Prisma__ReportsComplaintsClient<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportsComplaints.
     * @param {ReportsComplaintsCreateManyArgs} args - Arguments to create many ReportsComplaints.
     * @example
     * // Create many ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportsComplaintsCreateManyArgs>(args?: SelectSubset<T, ReportsComplaintsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportsComplaints and returns the data saved in the database.
     * @param {ReportsComplaintsCreateManyAndReturnArgs} args - Arguments to create many ReportsComplaints.
     * @example
     * // Create many ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportsComplaints and only return the `id`
     * const reportsComplaintsWithIdOnly = await prisma.reportsComplaints.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportsComplaintsCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportsComplaintsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportsComplaints.
     * @param {ReportsComplaintsDeleteArgs} args - Arguments to delete one ReportsComplaints.
     * @example
     * // Delete one ReportsComplaints
     * const ReportsComplaints = await prisma.reportsComplaints.delete({
     *   where: {
     *     // ... filter to delete one ReportsComplaints
     *   }
     * })
     * 
     */
    delete<T extends ReportsComplaintsDeleteArgs>(args: SelectSubset<T, ReportsComplaintsDeleteArgs<ExtArgs>>): Prisma__ReportsComplaintsClient<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportsComplaints.
     * @param {ReportsComplaintsUpdateArgs} args - Arguments to update one ReportsComplaints.
     * @example
     * // Update one ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportsComplaintsUpdateArgs>(args: SelectSubset<T, ReportsComplaintsUpdateArgs<ExtArgs>>): Prisma__ReportsComplaintsClient<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportsComplaints.
     * @param {ReportsComplaintsDeleteManyArgs} args - Arguments to filter ReportsComplaints to delete.
     * @example
     * // Delete a few ReportsComplaints
     * const { count } = await prisma.reportsComplaints.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportsComplaintsDeleteManyArgs>(args?: SelectSubset<T, ReportsComplaintsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportsComplaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsComplaintsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportsComplaintsUpdateManyArgs>(args: SelectSubset<T, ReportsComplaintsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportsComplaints and returns the data updated in the database.
     * @param {ReportsComplaintsUpdateManyAndReturnArgs} args - Arguments to update many ReportsComplaints.
     * @example
     * // Update many ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportsComplaints and only return the `id`
     * const reportsComplaintsWithIdOnly = await prisma.reportsComplaints.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportsComplaintsUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportsComplaintsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportsComplaints.
     * @param {ReportsComplaintsUpsertArgs} args - Arguments to update or create a ReportsComplaints.
     * @example
     * // Update or create a ReportsComplaints
     * const reportsComplaints = await prisma.reportsComplaints.upsert({
     *   create: {
     *     // ... data to create a ReportsComplaints
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportsComplaints we want to update
     *   }
     * })
     */
    upsert<T extends ReportsComplaintsUpsertArgs>(args: SelectSubset<T, ReportsComplaintsUpsertArgs<ExtArgs>>): Prisma__ReportsComplaintsClient<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportsComplaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsComplaintsCountArgs} args - Arguments to filter ReportsComplaints to count.
     * @example
     * // Count the number of ReportsComplaints
     * const count = await prisma.reportsComplaints.count({
     *   where: {
     *     // ... the filter for the ReportsComplaints we want to count
     *   }
     * })
    **/
    count<T extends ReportsComplaintsCountArgs>(
      args?: Subset<T, ReportsComplaintsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportsComplaintsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportsComplaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsComplaintsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportsComplaintsAggregateArgs>(args: Subset<T, ReportsComplaintsAggregateArgs>): Prisma.PrismaPromise<GetReportsComplaintsAggregateType<T>>

    /**
     * Group by ReportsComplaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportsComplaintsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportsComplaintsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportsComplaintsGroupByArgs['orderBy'] }
        : { orderBy?: ReportsComplaintsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportsComplaintsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportsComplaintsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportsComplaints model
   */
  readonly fields: ReportsComplaintsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportsComplaints.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportsComplaintsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hostel<T extends HostelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HostelDefaultArgs<ExtArgs>>): Prisma__HostelClient<$Result.GetResult<Prisma.$HostelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reportReplies<T extends ReportsComplaints$reportRepliesArgs<ExtArgs> = {}>(args?: Subset<T, ReportsComplaints$reportRepliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportsComplaints model
   */
  interface ReportsComplaintsFieldRefs {
    readonly id: FieldRef<"ReportsComplaints", 'Int'>
    readonly reportId: FieldRef<"ReportsComplaints", 'String'>
    readonly reportTitle: FieldRef<"ReportsComplaints", 'String'>
    readonly reportDescription: FieldRef<"ReportsComplaints", 'String'>
    readonly reportType: FieldRef<"ReportsComplaints", 'ReportType'>
    readonly reportStatus: FieldRef<"ReportsComplaints", 'Status'>
    readonly reportPriority: FieldRef<"ReportsComplaints", 'Priority'>
    readonly reporterUserType: FieldRef<"ReportsComplaints", 'Role'>
    readonly userId: FieldRef<"ReportsComplaints", 'String'>
    readonly hostelId: FieldRef<"ReportsComplaints", 'String'>
    readonly createdAt: FieldRef<"ReportsComplaints", 'DateTime'>
    readonly updatedAt: FieldRef<"ReportsComplaints", 'DateTime'>
    readonly academicYear: FieldRef<"ReportsComplaints", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ReportsComplaints findUnique
   */
  export type ReportsComplaintsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsInclude<ExtArgs> | null
    /**
     * Filter, which ReportsComplaints to fetch.
     */
    where: ReportsComplaintsWhereUniqueInput
  }

  /**
   * ReportsComplaints findUniqueOrThrow
   */
  export type ReportsComplaintsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsInclude<ExtArgs> | null
    /**
     * Filter, which ReportsComplaints to fetch.
     */
    where: ReportsComplaintsWhereUniqueInput
  }

  /**
   * ReportsComplaints findFirst
   */
  export type ReportsComplaintsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsInclude<ExtArgs> | null
    /**
     * Filter, which ReportsComplaints to fetch.
     */
    where?: ReportsComplaintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportsComplaints to fetch.
     */
    orderBy?: ReportsComplaintsOrderByWithRelationInput | ReportsComplaintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportsComplaints.
     */
    cursor?: ReportsComplaintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportsComplaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportsComplaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportsComplaints.
     */
    distinct?: ReportsComplaintsScalarFieldEnum | ReportsComplaintsScalarFieldEnum[]
  }

  /**
   * ReportsComplaints findFirstOrThrow
   */
  export type ReportsComplaintsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsInclude<ExtArgs> | null
    /**
     * Filter, which ReportsComplaints to fetch.
     */
    where?: ReportsComplaintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportsComplaints to fetch.
     */
    orderBy?: ReportsComplaintsOrderByWithRelationInput | ReportsComplaintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportsComplaints.
     */
    cursor?: ReportsComplaintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportsComplaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportsComplaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportsComplaints.
     */
    distinct?: ReportsComplaintsScalarFieldEnum | ReportsComplaintsScalarFieldEnum[]
  }

  /**
   * ReportsComplaints findMany
   */
  export type ReportsComplaintsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsInclude<ExtArgs> | null
    /**
     * Filter, which ReportsComplaints to fetch.
     */
    where?: ReportsComplaintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportsComplaints to fetch.
     */
    orderBy?: ReportsComplaintsOrderByWithRelationInput | ReportsComplaintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportsComplaints.
     */
    cursor?: ReportsComplaintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportsComplaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportsComplaints.
     */
    skip?: number
    distinct?: ReportsComplaintsScalarFieldEnum | ReportsComplaintsScalarFieldEnum[]
  }

  /**
   * ReportsComplaints create
   */
  export type ReportsComplaintsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportsComplaints.
     */
    data: XOR<ReportsComplaintsCreateInput, ReportsComplaintsUncheckedCreateInput>
  }

  /**
   * ReportsComplaints createMany
   */
  export type ReportsComplaintsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportsComplaints.
     */
    data: ReportsComplaintsCreateManyInput | ReportsComplaintsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportsComplaints createManyAndReturn
   */
  export type ReportsComplaintsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * The data used to create many ReportsComplaints.
     */
    data: ReportsComplaintsCreateManyInput | ReportsComplaintsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportsComplaints update
   */
  export type ReportsComplaintsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportsComplaints.
     */
    data: XOR<ReportsComplaintsUpdateInput, ReportsComplaintsUncheckedUpdateInput>
    /**
     * Choose, which ReportsComplaints to update.
     */
    where: ReportsComplaintsWhereUniqueInput
  }

  /**
   * ReportsComplaints updateMany
   */
  export type ReportsComplaintsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportsComplaints.
     */
    data: XOR<ReportsComplaintsUpdateManyMutationInput, ReportsComplaintsUncheckedUpdateManyInput>
    /**
     * Filter which ReportsComplaints to update
     */
    where?: ReportsComplaintsWhereInput
    /**
     * Limit how many ReportsComplaints to update.
     */
    limit?: number
  }

  /**
   * ReportsComplaints updateManyAndReturn
   */
  export type ReportsComplaintsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * The data used to update ReportsComplaints.
     */
    data: XOR<ReportsComplaintsUpdateManyMutationInput, ReportsComplaintsUncheckedUpdateManyInput>
    /**
     * Filter which ReportsComplaints to update
     */
    where?: ReportsComplaintsWhereInput
    /**
     * Limit how many ReportsComplaints to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportsComplaints upsert
   */
  export type ReportsComplaintsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportsComplaints to update in case it exists.
     */
    where: ReportsComplaintsWhereUniqueInput
    /**
     * In case the ReportsComplaints found by the `where` argument doesn't exist, create a new ReportsComplaints with this data.
     */
    create: XOR<ReportsComplaintsCreateInput, ReportsComplaintsUncheckedCreateInput>
    /**
     * In case the ReportsComplaints was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportsComplaintsUpdateInput, ReportsComplaintsUncheckedUpdateInput>
  }

  /**
   * ReportsComplaints delete
   */
  export type ReportsComplaintsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsInclude<ExtArgs> | null
    /**
     * Filter which ReportsComplaints to delete.
     */
    where: ReportsComplaintsWhereUniqueInput
  }

  /**
   * ReportsComplaints deleteMany
   */
  export type ReportsComplaintsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportsComplaints to delete
     */
    where?: ReportsComplaintsWhereInput
    /**
     * Limit how many ReportsComplaints to delete.
     */
    limit?: number
  }

  /**
   * ReportsComplaints.reportReplies
   */
  export type ReportsComplaints$reportRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyInclude<ExtArgs> | null
    where?: ReportReplyWhereInput
    orderBy?: ReportReplyOrderByWithRelationInput | ReportReplyOrderByWithRelationInput[]
    cursor?: ReportReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportReplyScalarFieldEnum | ReportReplyScalarFieldEnum[]
  }

  /**
   * ReportsComplaints without action
   */
  export type ReportsComplaintsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportsComplaints
     */
    select?: ReportsComplaintsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportsComplaints
     */
    omit?: ReportsComplaintsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportsComplaintsInclude<ExtArgs> | null
  }


  /**
   * Model ReportReply
   */

  export type AggregateReportReply = {
    _count: ReportReplyCountAggregateOutputType | null
    _avg: ReportReplyAvgAggregateOutputType | null
    _sum: ReportReplySumAggregateOutputType | null
    _min: ReportReplyMinAggregateOutputType | null
    _max: ReportReplyMaxAggregateOutputType | null
  }

  export type ReportReplyAvgAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type ReportReplySumAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type ReportReplyMinAggregateOutputType = {
    id: number | null
    replyId: string | null
    replyContent: string | null
    replyStatus: $Enums.Status | null
    reportComplaintId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type ReportReplyMaxAggregateOutputType = {
    id: number | null
    replyId: string | null
    replyContent: string | null
    replyStatus: $Enums.Status | null
    reportComplaintId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type ReportReplyCountAggregateOutputType = {
    id: number
    replyId: number
    replyContent: number
    replyStatus: number
    reportComplaintId: number
    createdAt: number
    updatedAt: number
    academicYear: number
    _all: number
  }


  export type ReportReplyAvgAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type ReportReplySumAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type ReportReplyMinAggregateInputType = {
    id?: true
    replyId?: true
    replyContent?: true
    replyStatus?: true
    reportComplaintId?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type ReportReplyMaxAggregateInputType = {
    id?: true
    replyId?: true
    replyContent?: true
    replyStatus?: true
    reportComplaintId?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type ReportReplyCountAggregateInputType = {
    id?: true
    replyId?: true
    replyContent?: true
    replyStatus?: true
    reportComplaintId?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    _all?: true
  }

  export type ReportReplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportReply to aggregate.
     */
    where?: ReportReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportReplies to fetch.
     */
    orderBy?: ReportReplyOrderByWithRelationInput | ReportReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportReplies
    **/
    _count?: true | ReportReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportReplyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportReplySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportReplyMaxAggregateInputType
  }

  export type GetReportReplyAggregateType<T extends ReportReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateReportReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportReply[P]>
      : GetScalarType<T[P], AggregateReportReply[P]>
  }




  export type ReportReplyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportReplyWhereInput
    orderBy?: ReportReplyOrderByWithAggregationInput | ReportReplyOrderByWithAggregationInput[]
    by: ReportReplyScalarFieldEnum[] | ReportReplyScalarFieldEnum
    having?: ReportReplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportReplyCountAggregateInputType | true
    _avg?: ReportReplyAvgAggregateInputType
    _sum?: ReportReplySumAggregateInputType
    _min?: ReportReplyMinAggregateInputType
    _max?: ReportReplyMaxAggregateInputType
  }

  export type ReportReplyGroupByOutputType = {
    id: number
    replyId: string
    replyContent: string
    replyStatus: $Enums.Status
    reportComplaintId: string
    createdAt: Date
    updatedAt: Date
    academicYear: number
    _count: ReportReplyCountAggregateOutputType | null
    _avg: ReportReplyAvgAggregateOutputType | null
    _sum: ReportReplySumAggregateOutputType | null
    _min: ReportReplyMinAggregateOutputType | null
    _max: ReportReplyMaxAggregateOutputType | null
  }

  type GetReportReplyGroupByPayload<T extends ReportReplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportReplyGroupByOutputType[P]>
            : GetScalarType<T[P], ReportReplyGroupByOutputType[P]>
        }
      >
    >


  export type ReportReplySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyId?: boolean
    replyContent?: boolean
    replyStatus?: boolean
    reportComplaintId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    reportComplaint?: boolean | ReportsComplaintsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportReply"]>

  export type ReportReplySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyId?: boolean
    replyContent?: boolean
    replyStatus?: boolean
    reportComplaintId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    reportComplaint?: boolean | ReportsComplaintsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportReply"]>

  export type ReportReplySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    replyId?: boolean
    replyContent?: boolean
    replyStatus?: boolean
    reportComplaintId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
    reportComplaint?: boolean | ReportsComplaintsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportReply"]>

  export type ReportReplySelectScalar = {
    id?: boolean
    replyId?: boolean
    replyContent?: boolean
    replyStatus?: boolean
    reportComplaintId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }

  export type ReportReplyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "replyId" | "replyContent" | "replyStatus" | "reportComplaintId" | "createdAt" | "updatedAt" | "academicYear", ExtArgs["result"]["reportReply"]>
  export type ReportReplyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportComplaint?: boolean | ReportsComplaintsDefaultArgs<ExtArgs>
  }
  export type ReportReplyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportComplaint?: boolean | ReportsComplaintsDefaultArgs<ExtArgs>
  }
  export type ReportReplyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportComplaint?: boolean | ReportsComplaintsDefaultArgs<ExtArgs>
  }

  export type $ReportReplyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportReply"
    objects: {
      reportComplaint: Prisma.$ReportsComplaintsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      replyId: string
      replyContent: string
      replyStatus: $Enums.Status
      reportComplaintId: string
      createdAt: Date
      updatedAt: Date
      academicYear: number
    }, ExtArgs["result"]["reportReply"]>
    composites: {}
  }

  type ReportReplyGetPayload<S extends boolean | null | undefined | ReportReplyDefaultArgs> = $Result.GetResult<Prisma.$ReportReplyPayload, S>

  type ReportReplyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportReplyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportReplyCountAggregateInputType | true
    }

  export interface ReportReplyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportReply'], meta: { name: 'ReportReply' } }
    /**
     * Find zero or one ReportReply that matches the filter.
     * @param {ReportReplyFindUniqueArgs} args - Arguments to find a ReportReply
     * @example
     * // Get one ReportReply
     * const reportReply = await prisma.reportReply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportReplyFindUniqueArgs>(args: SelectSubset<T, ReportReplyFindUniqueArgs<ExtArgs>>): Prisma__ReportReplyClient<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportReply that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportReplyFindUniqueOrThrowArgs} args - Arguments to find a ReportReply
     * @example
     * // Get one ReportReply
     * const reportReply = await prisma.reportReply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportReplyFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportReplyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportReplyClient<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportReply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportReplyFindFirstArgs} args - Arguments to find a ReportReply
     * @example
     * // Get one ReportReply
     * const reportReply = await prisma.reportReply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportReplyFindFirstArgs>(args?: SelectSubset<T, ReportReplyFindFirstArgs<ExtArgs>>): Prisma__ReportReplyClient<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportReply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportReplyFindFirstOrThrowArgs} args - Arguments to find a ReportReply
     * @example
     * // Get one ReportReply
     * const reportReply = await prisma.reportReply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportReplyFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportReplyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportReplyClient<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportReplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportReplyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportReplies
     * const reportReplies = await prisma.reportReply.findMany()
     * 
     * // Get first 10 ReportReplies
     * const reportReplies = await prisma.reportReply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportReplyWithIdOnly = await prisma.reportReply.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportReplyFindManyArgs>(args?: SelectSubset<T, ReportReplyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportReply.
     * @param {ReportReplyCreateArgs} args - Arguments to create a ReportReply.
     * @example
     * // Create one ReportReply
     * const ReportReply = await prisma.reportReply.create({
     *   data: {
     *     // ... data to create a ReportReply
     *   }
     * })
     * 
     */
    create<T extends ReportReplyCreateArgs>(args: SelectSubset<T, ReportReplyCreateArgs<ExtArgs>>): Prisma__ReportReplyClient<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportReplies.
     * @param {ReportReplyCreateManyArgs} args - Arguments to create many ReportReplies.
     * @example
     * // Create many ReportReplies
     * const reportReply = await prisma.reportReply.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportReplyCreateManyArgs>(args?: SelectSubset<T, ReportReplyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportReplies and returns the data saved in the database.
     * @param {ReportReplyCreateManyAndReturnArgs} args - Arguments to create many ReportReplies.
     * @example
     * // Create many ReportReplies
     * const reportReply = await prisma.reportReply.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportReplies and only return the `id`
     * const reportReplyWithIdOnly = await prisma.reportReply.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportReplyCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportReplyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportReply.
     * @param {ReportReplyDeleteArgs} args - Arguments to delete one ReportReply.
     * @example
     * // Delete one ReportReply
     * const ReportReply = await prisma.reportReply.delete({
     *   where: {
     *     // ... filter to delete one ReportReply
     *   }
     * })
     * 
     */
    delete<T extends ReportReplyDeleteArgs>(args: SelectSubset<T, ReportReplyDeleteArgs<ExtArgs>>): Prisma__ReportReplyClient<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportReply.
     * @param {ReportReplyUpdateArgs} args - Arguments to update one ReportReply.
     * @example
     * // Update one ReportReply
     * const reportReply = await prisma.reportReply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportReplyUpdateArgs>(args: SelectSubset<T, ReportReplyUpdateArgs<ExtArgs>>): Prisma__ReportReplyClient<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportReplies.
     * @param {ReportReplyDeleteManyArgs} args - Arguments to filter ReportReplies to delete.
     * @example
     * // Delete a few ReportReplies
     * const { count } = await prisma.reportReply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportReplyDeleteManyArgs>(args?: SelectSubset<T, ReportReplyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportReplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportReplies
     * const reportReply = await prisma.reportReply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportReplyUpdateManyArgs>(args: SelectSubset<T, ReportReplyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportReplies and returns the data updated in the database.
     * @param {ReportReplyUpdateManyAndReturnArgs} args - Arguments to update many ReportReplies.
     * @example
     * // Update many ReportReplies
     * const reportReply = await prisma.reportReply.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportReplies and only return the `id`
     * const reportReplyWithIdOnly = await prisma.reportReply.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportReplyUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportReplyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportReply.
     * @param {ReportReplyUpsertArgs} args - Arguments to update or create a ReportReply.
     * @example
     * // Update or create a ReportReply
     * const reportReply = await prisma.reportReply.upsert({
     *   create: {
     *     // ... data to create a ReportReply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportReply we want to update
     *   }
     * })
     */
    upsert<T extends ReportReplyUpsertArgs>(args: SelectSubset<T, ReportReplyUpsertArgs<ExtArgs>>): Prisma__ReportReplyClient<$Result.GetResult<Prisma.$ReportReplyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportReplyCountArgs} args - Arguments to filter ReportReplies to count.
     * @example
     * // Count the number of ReportReplies
     * const count = await prisma.reportReply.count({
     *   where: {
     *     // ... the filter for the ReportReplies we want to count
     *   }
     * })
    **/
    count<T extends ReportReplyCountArgs>(
      args?: Subset<T, ReportReplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportReplyAggregateArgs>(args: Subset<T, ReportReplyAggregateArgs>): Prisma.PrismaPromise<GetReportReplyAggregateType<T>>

    /**
     * Group by ReportReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportReplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportReplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportReplyGroupByArgs['orderBy'] }
        : { orderBy?: ReportReplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportReplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportReply model
   */
  readonly fields: ReportReplyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportReply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportReplyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reportComplaint<T extends ReportsComplaintsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportsComplaintsDefaultArgs<ExtArgs>>): Prisma__ReportsComplaintsClient<$Result.GetResult<Prisma.$ReportsComplaintsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportReply model
   */
  interface ReportReplyFieldRefs {
    readonly id: FieldRef<"ReportReply", 'Int'>
    readonly replyId: FieldRef<"ReportReply", 'String'>
    readonly replyContent: FieldRef<"ReportReply", 'String'>
    readonly replyStatus: FieldRef<"ReportReply", 'Status'>
    readonly reportComplaintId: FieldRef<"ReportReply", 'String'>
    readonly createdAt: FieldRef<"ReportReply", 'DateTime'>
    readonly updatedAt: FieldRef<"ReportReply", 'DateTime'>
    readonly academicYear: FieldRef<"ReportReply", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ReportReply findUnique
   */
  export type ReportReplyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyInclude<ExtArgs> | null
    /**
     * Filter, which ReportReply to fetch.
     */
    where: ReportReplyWhereUniqueInput
  }

  /**
   * ReportReply findUniqueOrThrow
   */
  export type ReportReplyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyInclude<ExtArgs> | null
    /**
     * Filter, which ReportReply to fetch.
     */
    where: ReportReplyWhereUniqueInput
  }

  /**
   * ReportReply findFirst
   */
  export type ReportReplyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyInclude<ExtArgs> | null
    /**
     * Filter, which ReportReply to fetch.
     */
    where?: ReportReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportReplies to fetch.
     */
    orderBy?: ReportReplyOrderByWithRelationInput | ReportReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportReplies.
     */
    cursor?: ReportReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportReplies.
     */
    distinct?: ReportReplyScalarFieldEnum | ReportReplyScalarFieldEnum[]
  }

  /**
   * ReportReply findFirstOrThrow
   */
  export type ReportReplyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyInclude<ExtArgs> | null
    /**
     * Filter, which ReportReply to fetch.
     */
    where?: ReportReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportReplies to fetch.
     */
    orderBy?: ReportReplyOrderByWithRelationInput | ReportReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportReplies.
     */
    cursor?: ReportReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportReplies.
     */
    distinct?: ReportReplyScalarFieldEnum | ReportReplyScalarFieldEnum[]
  }

  /**
   * ReportReply findMany
   */
  export type ReportReplyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyInclude<ExtArgs> | null
    /**
     * Filter, which ReportReplies to fetch.
     */
    where?: ReportReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportReplies to fetch.
     */
    orderBy?: ReportReplyOrderByWithRelationInput | ReportReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportReplies.
     */
    cursor?: ReportReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportReplies.
     */
    skip?: number
    distinct?: ReportReplyScalarFieldEnum | ReportReplyScalarFieldEnum[]
  }

  /**
   * ReportReply create
   */
  export type ReportReplyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportReply.
     */
    data: XOR<ReportReplyCreateInput, ReportReplyUncheckedCreateInput>
  }

  /**
   * ReportReply createMany
   */
  export type ReportReplyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportReplies.
     */
    data: ReportReplyCreateManyInput | ReportReplyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportReply createManyAndReturn
   */
  export type ReportReplyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * The data used to create many ReportReplies.
     */
    data: ReportReplyCreateManyInput | ReportReplyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportReply update
   */
  export type ReportReplyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportReply.
     */
    data: XOR<ReportReplyUpdateInput, ReportReplyUncheckedUpdateInput>
    /**
     * Choose, which ReportReply to update.
     */
    where: ReportReplyWhereUniqueInput
  }

  /**
   * ReportReply updateMany
   */
  export type ReportReplyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportReplies.
     */
    data: XOR<ReportReplyUpdateManyMutationInput, ReportReplyUncheckedUpdateManyInput>
    /**
     * Filter which ReportReplies to update
     */
    where?: ReportReplyWhereInput
    /**
     * Limit how many ReportReplies to update.
     */
    limit?: number
  }

  /**
   * ReportReply updateManyAndReturn
   */
  export type ReportReplyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * The data used to update ReportReplies.
     */
    data: XOR<ReportReplyUpdateManyMutationInput, ReportReplyUncheckedUpdateManyInput>
    /**
     * Filter which ReportReplies to update
     */
    where?: ReportReplyWhereInput
    /**
     * Limit how many ReportReplies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportReply upsert
   */
  export type ReportReplyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportReply to update in case it exists.
     */
    where: ReportReplyWhereUniqueInput
    /**
     * In case the ReportReply found by the `where` argument doesn't exist, create a new ReportReply with this data.
     */
    create: XOR<ReportReplyCreateInput, ReportReplyUncheckedCreateInput>
    /**
     * In case the ReportReply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportReplyUpdateInput, ReportReplyUncheckedUpdateInput>
  }

  /**
   * ReportReply delete
   */
  export type ReportReplyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyInclude<ExtArgs> | null
    /**
     * Filter which ReportReply to delete.
     */
    where: ReportReplyWhereUniqueInput
  }

  /**
   * ReportReply deleteMany
   */
  export type ReportReplyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportReplies to delete
     */
    where?: ReportReplyWhereInput
    /**
     * Limit how many ReportReplies to delete.
     */
    limit?: number
  }

  /**
   * ReportReply without action
   */
  export type ReportReplyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportReply
     */
    select?: ReportReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportReply
     */
    omit?: ReportReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportReplyInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    notificationId: string | null
    notificationTitle: string | null
    notificationMessage: string | null
    notificationType: $Enums.NotificationType | null
    notificationStatus: $Enums.Status | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    notificationId: string | null
    notificationTitle: string | null
    notificationMessage: string | null
    notificationType: $Enums.NotificationType | null
    notificationStatus: $Enums.Status | null
    createdAt: Date | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    notificationId: number
    notificationTitle: number
    notificationMessage: number
    notificationReadUserIds: number
    notificationType: number
    notificationStatus: number
    createdAt: number
    updatedAt: number
    academicYear: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    notificationId?: true
    notificationTitle?: true
    notificationMessage?: true
    notificationType?: true
    notificationStatus?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    notificationId?: true
    notificationTitle?: true
    notificationMessage?: true
    notificationType?: true
    notificationStatus?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    notificationId?: true
    notificationTitle?: true
    notificationMessage?: true
    notificationReadUserIds?: true
    notificationType?: true
    notificationStatus?: true
    createdAt?: true
    updatedAt?: true
    academicYear?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    notificationId: string
    notificationTitle: string
    notificationMessage: string
    notificationReadUserIds: string[]
    notificationType: $Enums.NotificationType
    notificationStatus: $Enums.Status
    createdAt: Date
    updatedAt: Date
    academicYear: number
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    notificationTitle?: boolean
    notificationMessage?: boolean
    notificationReadUserIds?: boolean
    notificationType?: boolean
    notificationStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    notificationTitle?: boolean
    notificationMessage?: boolean
    notificationReadUserIds?: boolean
    notificationType?: boolean
    notificationStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    notificationTitle?: boolean
    notificationMessage?: boolean
    notificationReadUserIds?: boolean
    notificationType?: boolean
    notificationStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    notificationId?: boolean
    notificationTitle?: boolean
    notificationMessage?: boolean
    notificationReadUserIds?: boolean
    notificationType?: boolean
    notificationStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "notificationId" | "notificationTitle" | "notificationMessage" | "notificationReadUserIds" | "notificationType" | "notificationStatus" | "createdAt" | "updatedAt" | "academicYear", ExtArgs["result"]["notification"]>

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      notificationId: string
      notificationTitle: string
      notificationMessage: string
      notificationReadUserIds: string[]
      notificationType: $Enums.NotificationType
      notificationStatus: $Enums.Status
      createdAt: Date
      updatedAt: Date
      academicYear: number
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly notificationId: FieldRef<"Notification", 'String'>
    readonly notificationTitle: FieldRef<"Notification", 'String'>
    readonly notificationMessage: FieldRef<"Notification", 'String'>
    readonly notificationReadUserIds: FieldRef<"Notification", 'String[]'>
    readonly notificationType: FieldRef<"Notification", 'NotificationType'>
    readonly notificationStatus: FieldRef<"Notification", 'Status'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
    readonly academicYear: FieldRef<"Notification", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    paymentAmount: number | null
    paymentHostelPreviousExpiryTime: number | null
    paymentAddedTime: number | null
    creditRemainingAmount: number | null
    academicYear: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    paymentAmount: number | null
    paymentHostelPreviousExpiryTime: number | null
    paymentAddedTime: number | null
    creditRemainingAmount: number | null
    academicYear: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    paymentId: string | null
    paymentAmount: number | null
    paymentHostelPreviousExpiryTime: number | null
    paymentAddedTime: number | null
    paymentDescription: string | null
    paymentStatus: $Enums.Status | null
    paymentMethod: $Enums.PaymentMethod | null
    createdAt: Date | null
    hostelId: string | null
    creditRemainingAmount: number | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    paymentId: string | null
    paymentAmount: number | null
    paymentHostelPreviousExpiryTime: number | null
    paymentAddedTime: number | null
    paymentDescription: string | null
    paymentStatus: $Enums.Status | null
    paymentMethod: $Enums.PaymentMethod | null
    createdAt: Date | null
    hostelId: string | null
    creditRemainingAmount: number | null
    updatedAt: Date | null
    academicYear: number | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    paymentId: number
    paymentAmount: number
    paymentHostelPreviousExpiryTime: number
    paymentAddedTime: number
    paymentDescription: number
    paymentStatus: number
    paymentMethod: number
    createdAt: number
    hostelId: number
    creditRemainingAmount: number
    updatedAt: number
    academicYear: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    paymentAmount?: true
    paymentHostelPreviousExpiryTime?: true
    paymentAddedTime?: true
    creditRemainingAmount?: true
    academicYear?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    paymentAmount?: true
    paymentHostelPreviousExpiryTime?: true
    paymentAddedTime?: true
    creditRemainingAmount?: true
    academicYear?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    paymentId?: true
    paymentAmount?: true
    paymentHostelPreviousExpiryTime?: true
    paymentAddedTime?: true
    paymentDescription?: true
    paymentStatus?: true
    paymentMethod?: true
    createdAt?: true
    hostelId?: true
    creditRemainingAmount?: true
    updatedAt?: true
    academicYear?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    paymentId?: true
    paymentAmount?: true
    paymentHostelPreviousExpiryTime?: true
    paymentAddedTime?: true
    paymentDescription?: true
    paymentStatus?: true
    paymentMethod?: true
    createdAt?: true
    hostelId?: true
    creditRemainingAmount?: true
    updatedAt?: true
    academicYear?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    paymentId?: true
    paymentAmount?: true
    paymentHostelPreviousExpiryTime?: true
    paymentAddedTime?: true
    paymentDescription?: true
    paymentStatus?: true
    paymentMethod?: true
    createdAt?: true
    hostelId?: true
    creditRemainingAmount?: true
    updatedAt?: true
    academicYear?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    paymentId: string
    paymentAmount: number
    paymentHostelPreviousExpiryTime: number
    paymentAddedTime: number
    paymentDescription: string
    paymentStatus: $Enums.Status
    paymentMethod: $Enums.PaymentMethod
    createdAt: Date
    hostelId: string
    creditRemainingAmount: number
    updatedAt: Date
    academicYear: number
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentId?: boolean
    paymentAmount?: boolean
    paymentHostelPreviousExpiryTime?: boolean
    paymentAddedTime?: boolean
    paymentDescription?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    hostelId?: boolean
    creditRemainingAmount?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentId?: boolean
    paymentAmount?: boolean
    paymentHostelPreviousExpiryTime?: boolean
    paymentAddedTime?: boolean
    paymentDescription?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    hostelId?: boolean
    creditRemainingAmount?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentId?: boolean
    paymentAmount?: boolean
    paymentHostelPreviousExpiryTime?: boolean
    paymentAddedTime?: boolean
    paymentDescription?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    hostelId?: boolean
    creditRemainingAmount?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    paymentId?: boolean
    paymentAmount?: boolean
    paymentHostelPreviousExpiryTime?: boolean
    paymentAddedTime?: boolean
    paymentDescription?: boolean
    paymentStatus?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    hostelId?: boolean
    creditRemainingAmount?: boolean
    updatedAt?: boolean
    academicYear?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "paymentId" | "paymentAmount" | "paymentHostelPreviousExpiryTime" | "paymentAddedTime" | "paymentDescription" | "paymentStatus" | "paymentMethod" | "createdAt" | "hostelId" | "creditRemainingAmount" | "updatedAt" | "academicYear", ExtArgs["result"]["payment"]>

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      paymentId: string
      paymentAmount: number
      paymentHostelPreviousExpiryTime: number
      paymentAddedTime: number
      paymentDescription: string
      paymentStatus: $Enums.Status
      paymentMethod: $Enums.PaymentMethod
      createdAt: Date
      hostelId: string
      creditRemainingAmount: number
      updatedAt: Date
      academicYear: number
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly paymentId: FieldRef<"Payment", 'String'>
    readonly paymentAmount: FieldRef<"Payment", 'Float'>
    readonly paymentHostelPreviousExpiryTime: FieldRef<"Payment", 'Int'>
    readonly paymentAddedTime: FieldRef<"Payment", 'Int'>
    readonly paymentDescription: FieldRef<"Payment", 'String'>
    readonly paymentStatus: FieldRef<"Payment", 'Status'>
    readonly paymentMethod: FieldRef<"Payment", 'PaymentMethod'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly hostelId: FieldRef<"Payment", 'String'>
    readonly creditRemainingAmount: FieldRef<"Payment", 'Float'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
    readonly academicYear: FieldRef<"Payment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
  }


  /**
   * Model HostelStudent
   */

  export type AggregateHostelStudent = {
    _count: HostelStudentCountAggregateOutputType | null
    _avg: HostelStudentAvgAggregateOutputType | null
    _sum: HostelStudentSumAggregateOutputType | null
    _min: HostelStudentMinAggregateOutputType | null
    _max: HostelStudentMaxAggregateOutputType | null
  }

  export type HostelStudentAvgAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type HostelStudentSumAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type HostelStudentMinAggregateOutputType = {
    id: number | null
    studentId: string | null
    studentGeneratedId: string | null
    studentName: string | null
    studentEmail: string | null
    studentPhone: string | null
    studentGender: $Enums.Gender | null
    studentAddress: string | null
    studentRoomNumber: string | null
    studentBedNumber: string | null
    status: $Enums.Status | null
    studentCheckInDate: Date | null
    studentCheckOutDate: Date | null
    studentGuardianName: string | null
    studentGuardianPhone: string | null
    studentGuardianAddress: string | null
    studentGuardianEmail: string | null
    studentGuardianRelation: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hostelId: string | null
    academicYear: number | null
    authId: string | null
  }

  export type HostelStudentMaxAggregateOutputType = {
    id: number | null
    studentId: string | null
    studentGeneratedId: string | null
    studentName: string | null
    studentEmail: string | null
    studentPhone: string | null
    studentGender: $Enums.Gender | null
    studentAddress: string | null
    studentRoomNumber: string | null
    studentBedNumber: string | null
    status: $Enums.Status | null
    studentCheckInDate: Date | null
    studentCheckOutDate: Date | null
    studentGuardianName: string | null
    studentGuardianPhone: string | null
    studentGuardianAddress: string | null
    studentGuardianEmail: string | null
    studentGuardianRelation: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hostelId: string | null
    academicYear: number | null
    authId: string | null
  }

  export type HostelStudentCountAggregateOutputType = {
    id: number
    studentId: number
    studentGeneratedId: number
    studentName: number
    studentEmail: number
    studentPhone: number
    studentGender: number
    studentAddress: number
    studentRoomNumber: number
    studentBedNumber: number
    status: number
    studentCheckInDate: number
    studentCheckOutDate: number
    studentGuardianName: number
    studentGuardianPhone: number
    studentGuardianAddress: number
    studentGuardianEmail: number
    studentGuardianRelation: number
    studentDocuments: number
    createdAt: number
    updatedAt: number
    hostelId: number
    academicYear: number
    authId: number
    _all: number
  }


  export type HostelStudentAvgAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type HostelStudentSumAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type HostelStudentMinAggregateInputType = {
    id?: true
    studentId?: true
    studentGeneratedId?: true
    studentName?: true
    studentEmail?: true
    studentPhone?: true
    studentGender?: true
    studentAddress?: true
    studentRoomNumber?: true
    studentBedNumber?: true
    status?: true
    studentCheckInDate?: true
    studentCheckOutDate?: true
    studentGuardianName?: true
    studentGuardianPhone?: true
    studentGuardianAddress?: true
    studentGuardianEmail?: true
    studentGuardianRelation?: true
    createdAt?: true
    updatedAt?: true
    hostelId?: true
    academicYear?: true
    authId?: true
  }

  export type HostelStudentMaxAggregateInputType = {
    id?: true
    studentId?: true
    studentGeneratedId?: true
    studentName?: true
    studentEmail?: true
    studentPhone?: true
    studentGender?: true
    studentAddress?: true
    studentRoomNumber?: true
    studentBedNumber?: true
    status?: true
    studentCheckInDate?: true
    studentCheckOutDate?: true
    studentGuardianName?: true
    studentGuardianPhone?: true
    studentGuardianAddress?: true
    studentGuardianEmail?: true
    studentGuardianRelation?: true
    createdAt?: true
    updatedAt?: true
    hostelId?: true
    academicYear?: true
    authId?: true
  }

  export type HostelStudentCountAggregateInputType = {
    id?: true
    studentId?: true
    studentGeneratedId?: true
    studentName?: true
    studentEmail?: true
    studentPhone?: true
    studentGender?: true
    studentAddress?: true
    studentRoomNumber?: true
    studentBedNumber?: true
    status?: true
    studentCheckInDate?: true
    studentCheckOutDate?: true
    studentGuardianName?: true
    studentGuardianPhone?: true
    studentGuardianAddress?: true
    studentGuardianEmail?: true
    studentGuardianRelation?: true
    studentDocuments?: true
    createdAt?: true
    updatedAt?: true
    hostelId?: true
    academicYear?: true
    authId?: true
    _all?: true
  }

  export type HostelStudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostelStudent to aggregate.
     */
    where?: HostelStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelStudents to fetch.
     */
    orderBy?: HostelStudentOrderByWithRelationInput | HostelStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HostelStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HostelStudents
    **/
    _count?: true | HostelStudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HostelStudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HostelStudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostelStudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostelStudentMaxAggregateInputType
  }

  export type GetHostelStudentAggregateType<T extends HostelStudentAggregateArgs> = {
        [P in keyof T & keyof AggregateHostelStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHostelStudent[P]>
      : GetScalarType<T[P], AggregateHostelStudent[P]>
  }




  export type HostelStudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostelStudentWhereInput
    orderBy?: HostelStudentOrderByWithAggregationInput | HostelStudentOrderByWithAggregationInput[]
    by: HostelStudentScalarFieldEnum[] | HostelStudentScalarFieldEnum
    having?: HostelStudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostelStudentCountAggregateInputType | true
    _avg?: HostelStudentAvgAggregateInputType
    _sum?: HostelStudentSumAggregateInputType
    _min?: HostelStudentMinAggregateInputType
    _max?: HostelStudentMaxAggregateInputType
  }

  export type HostelStudentGroupByOutputType = {
    id: number
    studentId: string
    studentGeneratedId: string
    studentName: string
    studentEmail: string
    studentPhone: string
    studentGender: $Enums.Gender
    studentAddress: string | null
    studentRoomNumber: string | null
    studentBedNumber: string | null
    status: $Enums.Status
    studentCheckInDate: Date
    studentCheckOutDate: Date | null
    studentGuardianName: string
    studentGuardianPhone: string
    studentGuardianAddress: string
    studentGuardianEmail: string | null
    studentGuardianRelation: string
    studentDocuments: string[]
    createdAt: Date
    updatedAt: Date
    hostelId: string
    academicYear: number
    authId: string
    _count: HostelStudentCountAggregateOutputType | null
    _avg: HostelStudentAvgAggregateOutputType | null
    _sum: HostelStudentSumAggregateOutputType | null
    _min: HostelStudentMinAggregateOutputType | null
    _max: HostelStudentMaxAggregateOutputType | null
  }

  type GetHostelStudentGroupByPayload<T extends HostelStudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HostelStudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostelStudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostelStudentGroupByOutputType[P]>
            : GetScalarType<T[P], HostelStudentGroupByOutputType[P]>
        }
      >
    >


  export type HostelStudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    studentGeneratedId?: boolean
    studentName?: boolean
    studentEmail?: boolean
    studentPhone?: boolean
    studentGender?: boolean
    studentAddress?: boolean
    studentRoomNumber?: boolean
    studentBedNumber?: boolean
    status?: boolean
    studentCheckInDate?: boolean
    studentCheckOutDate?: boolean
    studentGuardianName?: boolean
    studentGuardianPhone?: boolean
    studentGuardianAddress?: boolean
    studentGuardianEmail?: boolean
    studentGuardianRelation?: boolean
    studentDocuments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostelId?: boolean
    academicYear?: boolean
    authId?: boolean
  }, ExtArgs["result"]["hostelStudent"]>

  export type HostelStudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    studentGeneratedId?: boolean
    studentName?: boolean
    studentEmail?: boolean
    studentPhone?: boolean
    studentGender?: boolean
    studentAddress?: boolean
    studentRoomNumber?: boolean
    studentBedNumber?: boolean
    status?: boolean
    studentCheckInDate?: boolean
    studentCheckOutDate?: boolean
    studentGuardianName?: boolean
    studentGuardianPhone?: boolean
    studentGuardianAddress?: boolean
    studentGuardianEmail?: boolean
    studentGuardianRelation?: boolean
    studentDocuments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostelId?: boolean
    academicYear?: boolean
    authId?: boolean
  }, ExtArgs["result"]["hostelStudent"]>

  export type HostelStudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    studentGeneratedId?: boolean
    studentName?: boolean
    studentEmail?: boolean
    studentPhone?: boolean
    studentGender?: boolean
    studentAddress?: boolean
    studentRoomNumber?: boolean
    studentBedNumber?: boolean
    status?: boolean
    studentCheckInDate?: boolean
    studentCheckOutDate?: boolean
    studentGuardianName?: boolean
    studentGuardianPhone?: boolean
    studentGuardianAddress?: boolean
    studentGuardianEmail?: boolean
    studentGuardianRelation?: boolean
    studentDocuments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostelId?: boolean
    academicYear?: boolean
    authId?: boolean
  }, ExtArgs["result"]["hostelStudent"]>

  export type HostelStudentSelectScalar = {
    id?: boolean
    studentId?: boolean
    studentGeneratedId?: boolean
    studentName?: boolean
    studentEmail?: boolean
    studentPhone?: boolean
    studentGender?: boolean
    studentAddress?: boolean
    studentRoomNumber?: boolean
    studentBedNumber?: boolean
    status?: boolean
    studentCheckInDate?: boolean
    studentCheckOutDate?: boolean
    studentGuardianName?: boolean
    studentGuardianPhone?: boolean
    studentGuardianAddress?: boolean
    studentGuardianEmail?: boolean
    studentGuardianRelation?: boolean
    studentDocuments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostelId?: boolean
    academicYear?: boolean
    authId?: boolean
  }

  export type HostelStudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "studentGeneratedId" | "studentName" | "studentEmail" | "studentPhone" | "studentGender" | "studentAddress" | "studentRoomNumber" | "studentBedNumber" | "status" | "studentCheckInDate" | "studentCheckOutDate" | "studentGuardianName" | "studentGuardianPhone" | "studentGuardianAddress" | "studentGuardianEmail" | "studentGuardianRelation" | "studentDocuments" | "createdAt" | "updatedAt" | "hostelId" | "academicYear" | "authId", ExtArgs["result"]["hostelStudent"]>

  export type $HostelStudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HostelStudent"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: string
      studentGeneratedId: string
      studentName: string
      studentEmail: string
      studentPhone: string
      studentGender: $Enums.Gender
      studentAddress: string | null
      studentRoomNumber: string | null
      studentBedNumber: string | null
      status: $Enums.Status
      studentCheckInDate: Date
      studentCheckOutDate: Date | null
      studentGuardianName: string
      studentGuardianPhone: string
      studentGuardianAddress: string
      studentGuardianEmail: string | null
      studentGuardianRelation: string
      studentDocuments: string[]
      createdAt: Date
      updatedAt: Date
      hostelId: string
      academicYear: number
      authId: string
    }, ExtArgs["result"]["hostelStudent"]>
    composites: {}
  }

  type HostelStudentGetPayload<S extends boolean | null | undefined | HostelStudentDefaultArgs> = $Result.GetResult<Prisma.$HostelStudentPayload, S>

  type HostelStudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HostelStudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HostelStudentCountAggregateInputType | true
    }

  export interface HostelStudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HostelStudent'], meta: { name: 'HostelStudent' } }
    /**
     * Find zero or one HostelStudent that matches the filter.
     * @param {HostelStudentFindUniqueArgs} args - Arguments to find a HostelStudent
     * @example
     * // Get one HostelStudent
     * const hostelStudent = await prisma.hostelStudent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HostelStudentFindUniqueArgs>(args: SelectSubset<T, HostelStudentFindUniqueArgs<ExtArgs>>): Prisma__HostelStudentClient<$Result.GetResult<Prisma.$HostelStudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HostelStudent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HostelStudentFindUniqueOrThrowArgs} args - Arguments to find a HostelStudent
     * @example
     * // Get one HostelStudent
     * const hostelStudent = await prisma.hostelStudent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HostelStudentFindUniqueOrThrowArgs>(args: SelectSubset<T, HostelStudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HostelStudentClient<$Result.GetResult<Prisma.$HostelStudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HostelStudent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelStudentFindFirstArgs} args - Arguments to find a HostelStudent
     * @example
     * // Get one HostelStudent
     * const hostelStudent = await prisma.hostelStudent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HostelStudentFindFirstArgs>(args?: SelectSubset<T, HostelStudentFindFirstArgs<ExtArgs>>): Prisma__HostelStudentClient<$Result.GetResult<Prisma.$HostelStudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HostelStudent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelStudentFindFirstOrThrowArgs} args - Arguments to find a HostelStudent
     * @example
     * // Get one HostelStudent
     * const hostelStudent = await prisma.hostelStudent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HostelStudentFindFirstOrThrowArgs>(args?: SelectSubset<T, HostelStudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__HostelStudentClient<$Result.GetResult<Prisma.$HostelStudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HostelStudents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelStudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HostelStudents
     * const hostelStudents = await prisma.hostelStudent.findMany()
     * 
     * // Get first 10 HostelStudents
     * const hostelStudents = await prisma.hostelStudent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostelStudentWithIdOnly = await prisma.hostelStudent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HostelStudentFindManyArgs>(args?: SelectSubset<T, HostelStudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HostelStudent.
     * @param {HostelStudentCreateArgs} args - Arguments to create a HostelStudent.
     * @example
     * // Create one HostelStudent
     * const HostelStudent = await prisma.hostelStudent.create({
     *   data: {
     *     // ... data to create a HostelStudent
     *   }
     * })
     * 
     */
    create<T extends HostelStudentCreateArgs>(args: SelectSubset<T, HostelStudentCreateArgs<ExtArgs>>): Prisma__HostelStudentClient<$Result.GetResult<Prisma.$HostelStudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HostelStudents.
     * @param {HostelStudentCreateManyArgs} args - Arguments to create many HostelStudents.
     * @example
     * // Create many HostelStudents
     * const hostelStudent = await prisma.hostelStudent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HostelStudentCreateManyArgs>(args?: SelectSubset<T, HostelStudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HostelStudents and returns the data saved in the database.
     * @param {HostelStudentCreateManyAndReturnArgs} args - Arguments to create many HostelStudents.
     * @example
     * // Create many HostelStudents
     * const hostelStudent = await prisma.hostelStudent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HostelStudents and only return the `id`
     * const hostelStudentWithIdOnly = await prisma.hostelStudent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HostelStudentCreateManyAndReturnArgs>(args?: SelectSubset<T, HostelStudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelStudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HostelStudent.
     * @param {HostelStudentDeleteArgs} args - Arguments to delete one HostelStudent.
     * @example
     * // Delete one HostelStudent
     * const HostelStudent = await prisma.hostelStudent.delete({
     *   where: {
     *     // ... filter to delete one HostelStudent
     *   }
     * })
     * 
     */
    delete<T extends HostelStudentDeleteArgs>(args: SelectSubset<T, HostelStudentDeleteArgs<ExtArgs>>): Prisma__HostelStudentClient<$Result.GetResult<Prisma.$HostelStudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HostelStudent.
     * @param {HostelStudentUpdateArgs} args - Arguments to update one HostelStudent.
     * @example
     * // Update one HostelStudent
     * const hostelStudent = await prisma.hostelStudent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HostelStudentUpdateArgs>(args: SelectSubset<T, HostelStudentUpdateArgs<ExtArgs>>): Prisma__HostelStudentClient<$Result.GetResult<Prisma.$HostelStudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HostelStudents.
     * @param {HostelStudentDeleteManyArgs} args - Arguments to filter HostelStudents to delete.
     * @example
     * // Delete a few HostelStudents
     * const { count } = await prisma.hostelStudent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HostelStudentDeleteManyArgs>(args?: SelectSubset<T, HostelStudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostelStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelStudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HostelStudents
     * const hostelStudent = await prisma.hostelStudent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HostelStudentUpdateManyArgs>(args: SelectSubset<T, HostelStudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostelStudents and returns the data updated in the database.
     * @param {HostelStudentUpdateManyAndReturnArgs} args - Arguments to update many HostelStudents.
     * @example
     * // Update many HostelStudents
     * const hostelStudent = await prisma.hostelStudent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HostelStudents and only return the `id`
     * const hostelStudentWithIdOnly = await prisma.hostelStudent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HostelStudentUpdateManyAndReturnArgs>(args: SelectSubset<T, HostelStudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelStudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HostelStudent.
     * @param {HostelStudentUpsertArgs} args - Arguments to update or create a HostelStudent.
     * @example
     * // Update or create a HostelStudent
     * const hostelStudent = await prisma.hostelStudent.upsert({
     *   create: {
     *     // ... data to create a HostelStudent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HostelStudent we want to update
     *   }
     * })
     */
    upsert<T extends HostelStudentUpsertArgs>(args: SelectSubset<T, HostelStudentUpsertArgs<ExtArgs>>): Prisma__HostelStudentClient<$Result.GetResult<Prisma.$HostelStudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HostelStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelStudentCountArgs} args - Arguments to filter HostelStudents to count.
     * @example
     * // Count the number of HostelStudents
     * const count = await prisma.hostelStudent.count({
     *   where: {
     *     // ... the filter for the HostelStudents we want to count
     *   }
     * })
    **/
    count<T extends HostelStudentCountArgs>(
      args?: Subset<T, HostelStudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostelStudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HostelStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelStudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostelStudentAggregateArgs>(args: Subset<T, HostelStudentAggregateArgs>): Prisma.PrismaPromise<GetHostelStudentAggregateType<T>>

    /**
     * Group by HostelStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelStudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostelStudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostelStudentGroupByArgs['orderBy'] }
        : { orderBy?: HostelStudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostelStudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostelStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HostelStudent model
   */
  readonly fields: HostelStudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HostelStudent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HostelStudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HostelStudent model
   */
  interface HostelStudentFieldRefs {
    readonly id: FieldRef<"HostelStudent", 'Int'>
    readonly studentId: FieldRef<"HostelStudent", 'String'>
    readonly studentGeneratedId: FieldRef<"HostelStudent", 'String'>
    readonly studentName: FieldRef<"HostelStudent", 'String'>
    readonly studentEmail: FieldRef<"HostelStudent", 'String'>
    readonly studentPhone: FieldRef<"HostelStudent", 'String'>
    readonly studentGender: FieldRef<"HostelStudent", 'Gender'>
    readonly studentAddress: FieldRef<"HostelStudent", 'String'>
    readonly studentRoomNumber: FieldRef<"HostelStudent", 'String'>
    readonly studentBedNumber: FieldRef<"HostelStudent", 'String'>
    readonly status: FieldRef<"HostelStudent", 'Status'>
    readonly studentCheckInDate: FieldRef<"HostelStudent", 'DateTime'>
    readonly studentCheckOutDate: FieldRef<"HostelStudent", 'DateTime'>
    readonly studentGuardianName: FieldRef<"HostelStudent", 'String'>
    readonly studentGuardianPhone: FieldRef<"HostelStudent", 'String'>
    readonly studentGuardianAddress: FieldRef<"HostelStudent", 'String'>
    readonly studentGuardianEmail: FieldRef<"HostelStudent", 'String'>
    readonly studentGuardianRelation: FieldRef<"HostelStudent", 'String'>
    readonly studentDocuments: FieldRef<"HostelStudent", 'String[]'>
    readonly createdAt: FieldRef<"HostelStudent", 'DateTime'>
    readonly updatedAt: FieldRef<"HostelStudent", 'DateTime'>
    readonly hostelId: FieldRef<"HostelStudent", 'String'>
    readonly academicYear: FieldRef<"HostelStudent", 'Int'>
    readonly authId: FieldRef<"HostelStudent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HostelStudent findUnique
   */
  export type HostelStudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
    /**
     * Filter, which HostelStudent to fetch.
     */
    where: HostelStudentWhereUniqueInput
  }

  /**
   * HostelStudent findUniqueOrThrow
   */
  export type HostelStudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
    /**
     * Filter, which HostelStudent to fetch.
     */
    where: HostelStudentWhereUniqueInput
  }

  /**
   * HostelStudent findFirst
   */
  export type HostelStudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
    /**
     * Filter, which HostelStudent to fetch.
     */
    where?: HostelStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelStudents to fetch.
     */
    orderBy?: HostelStudentOrderByWithRelationInput | HostelStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostelStudents.
     */
    cursor?: HostelStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostelStudents.
     */
    distinct?: HostelStudentScalarFieldEnum | HostelStudentScalarFieldEnum[]
  }

  /**
   * HostelStudent findFirstOrThrow
   */
  export type HostelStudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
    /**
     * Filter, which HostelStudent to fetch.
     */
    where?: HostelStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelStudents to fetch.
     */
    orderBy?: HostelStudentOrderByWithRelationInput | HostelStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostelStudents.
     */
    cursor?: HostelStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostelStudents.
     */
    distinct?: HostelStudentScalarFieldEnum | HostelStudentScalarFieldEnum[]
  }

  /**
   * HostelStudent findMany
   */
  export type HostelStudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
    /**
     * Filter, which HostelStudents to fetch.
     */
    where?: HostelStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelStudents to fetch.
     */
    orderBy?: HostelStudentOrderByWithRelationInput | HostelStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HostelStudents.
     */
    cursor?: HostelStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelStudents.
     */
    skip?: number
    distinct?: HostelStudentScalarFieldEnum | HostelStudentScalarFieldEnum[]
  }

  /**
   * HostelStudent create
   */
  export type HostelStudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
    /**
     * The data needed to create a HostelStudent.
     */
    data: XOR<HostelStudentCreateInput, HostelStudentUncheckedCreateInput>
  }

  /**
   * HostelStudent createMany
   */
  export type HostelStudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HostelStudents.
     */
    data: HostelStudentCreateManyInput | HostelStudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostelStudent createManyAndReturn
   */
  export type HostelStudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
    /**
     * The data used to create many HostelStudents.
     */
    data: HostelStudentCreateManyInput | HostelStudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostelStudent update
   */
  export type HostelStudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
    /**
     * The data needed to update a HostelStudent.
     */
    data: XOR<HostelStudentUpdateInput, HostelStudentUncheckedUpdateInput>
    /**
     * Choose, which HostelStudent to update.
     */
    where: HostelStudentWhereUniqueInput
  }

  /**
   * HostelStudent updateMany
   */
  export type HostelStudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HostelStudents.
     */
    data: XOR<HostelStudentUpdateManyMutationInput, HostelStudentUncheckedUpdateManyInput>
    /**
     * Filter which HostelStudents to update
     */
    where?: HostelStudentWhereInput
    /**
     * Limit how many HostelStudents to update.
     */
    limit?: number
  }

  /**
   * HostelStudent updateManyAndReturn
   */
  export type HostelStudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
    /**
     * The data used to update HostelStudents.
     */
    data: XOR<HostelStudentUpdateManyMutationInput, HostelStudentUncheckedUpdateManyInput>
    /**
     * Filter which HostelStudents to update
     */
    where?: HostelStudentWhereInput
    /**
     * Limit how many HostelStudents to update.
     */
    limit?: number
  }

  /**
   * HostelStudent upsert
   */
  export type HostelStudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
    /**
     * The filter to search for the HostelStudent to update in case it exists.
     */
    where: HostelStudentWhereUniqueInput
    /**
     * In case the HostelStudent found by the `where` argument doesn't exist, create a new HostelStudent with this data.
     */
    create: XOR<HostelStudentCreateInput, HostelStudentUncheckedCreateInput>
    /**
     * In case the HostelStudent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HostelStudentUpdateInput, HostelStudentUncheckedUpdateInput>
  }

  /**
   * HostelStudent delete
   */
  export type HostelStudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
    /**
     * Filter which HostelStudent to delete.
     */
    where: HostelStudentWhereUniqueInput
  }

  /**
   * HostelStudent deleteMany
   */
  export type HostelStudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostelStudents to delete
     */
    where?: HostelStudentWhereInput
    /**
     * Limit how many HostelStudents to delete.
     */
    limit?: number
  }

  /**
   * HostelStudent without action
   */
  export type HostelStudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelStudent
     */
    select?: HostelStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelStudent
     */
    omit?: HostelStudentOmit<ExtArgs> | null
  }


  /**
   * Model HostelRoom
   */

  export type AggregateHostelRoom = {
    _count: HostelRoomCountAggregateOutputType | null
    _avg: HostelRoomAvgAggregateOutputType | null
    _sum: HostelRoomSumAggregateOutputType | null
    _min: HostelRoomMinAggregateOutputType | null
    _max: HostelRoomMaxAggregateOutputType | null
  }

  export type HostelRoomAvgAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type HostelRoomSumAggregateOutputType = {
    id: number | null
    academicYear: number | null
  }

  export type HostelRoomMinAggregateOutputType = {
    id: number | null
    roomId: string | null
    roomNumber: string | null
    roomCapacity: string | null
    roomFloor: string | null
    roomType: $Enums.RoomType | null
    roomPricePerMonth: string | null
    roomBuilding: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hostelId: string | null
    academicYear: number | null
  }

  export type HostelRoomMaxAggregateOutputType = {
    id: number | null
    roomId: string | null
    roomNumber: string | null
    roomCapacity: string | null
    roomFloor: string | null
    roomType: $Enums.RoomType | null
    roomPricePerMonth: string | null
    roomBuilding: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hostelId: string | null
    academicYear: number | null
  }

  export type HostelRoomCountAggregateOutputType = {
    id: number
    roomId: number
    roomNumber: number
    roomCapacity: number
    roomFloor: number
    roomType: number
    roomPricePerMonth: number
    roomBuilding: number
    createdAt: number
    updatedAt: number
    hostelId: number
    academicYear: number
    _all: number
  }


  export type HostelRoomAvgAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type HostelRoomSumAggregateInputType = {
    id?: true
    academicYear?: true
  }

  export type HostelRoomMinAggregateInputType = {
    id?: true
    roomId?: true
    roomNumber?: true
    roomCapacity?: true
    roomFloor?: true
    roomType?: true
    roomPricePerMonth?: true
    roomBuilding?: true
    createdAt?: true
    updatedAt?: true
    hostelId?: true
    academicYear?: true
  }

  export type HostelRoomMaxAggregateInputType = {
    id?: true
    roomId?: true
    roomNumber?: true
    roomCapacity?: true
    roomFloor?: true
    roomType?: true
    roomPricePerMonth?: true
    roomBuilding?: true
    createdAt?: true
    updatedAt?: true
    hostelId?: true
    academicYear?: true
  }

  export type HostelRoomCountAggregateInputType = {
    id?: true
    roomId?: true
    roomNumber?: true
    roomCapacity?: true
    roomFloor?: true
    roomType?: true
    roomPricePerMonth?: true
    roomBuilding?: true
    createdAt?: true
    updatedAt?: true
    hostelId?: true
    academicYear?: true
    _all?: true
  }

  export type HostelRoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostelRoom to aggregate.
     */
    where?: HostelRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelRooms to fetch.
     */
    orderBy?: HostelRoomOrderByWithRelationInput | HostelRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HostelRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HostelRooms
    **/
    _count?: true | HostelRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HostelRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HostelRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostelRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostelRoomMaxAggregateInputType
  }

  export type GetHostelRoomAggregateType<T extends HostelRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateHostelRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHostelRoom[P]>
      : GetScalarType<T[P], AggregateHostelRoom[P]>
  }




  export type HostelRoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostelRoomWhereInput
    orderBy?: HostelRoomOrderByWithAggregationInput | HostelRoomOrderByWithAggregationInput[]
    by: HostelRoomScalarFieldEnum[] | HostelRoomScalarFieldEnum
    having?: HostelRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostelRoomCountAggregateInputType | true
    _avg?: HostelRoomAvgAggregateInputType
    _sum?: HostelRoomSumAggregateInputType
    _min?: HostelRoomMinAggregateInputType
    _max?: HostelRoomMaxAggregateInputType
  }

  export type HostelRoomGroupByOutputType = {
    id: number
    roomId: string
    roomNumber: string
    roomCapacity: string
    roomFloor: string
    roomType: $Enums.RoomType
    roomPricePerMonth: string
    roomBuilding: string
    createdAt: Date
    updatedAt: Date
    hostelId: string
    academicYear: number
    _count: HostelRoomCountAggregateOutputType | null
    _avg: HostelRoomAvgAggregateOutputType | null
    _sum: HostelRoomSumAggregateOutputType | null
    _min: HostelRoomMinAggregateOutputType | null
    _max: HostelRoomMaxAggregateOutputType | null
  }

  type GetHostelRoomGroupByPayload<T extends HostelRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HostelRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostelRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostelRoomGroupByOutputType[P]>
            : GetScalarType<T[P], HostelRoomGroupByOutputType[P]>
        }
      >
    >


  export type HostelRoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    roomNumber?: boolean
    roomCapacity?: boolean
    roomFloor?: boolean
    roomType?: boolean
    roomPricePerMonth?: boolean
    roomBuilding?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostelId?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["hostelRoom"]>

  export type HostelRoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    roomNumber?: boolean
    roomCapacity?: boolean
    roomFloor?: boolean
    roomType?: boolean
    roomPricePerMonth?: boolean
    roomBuilding?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostelId?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["hostelRoom"]>

  export type HostelRoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    roomNumber?: boolean
    roomCapacity?: boolean
    roomFloor?: boolean
    roomType?: boolean
    roomPricePerMonth?: boolean
    roomBuilding?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostelId?: boolean
    academicYear?: boolean
  }, ExtArgs["result"]["hostelRoom"]>

  export type HostelRoomSelectScalar = {
    id?: boolean
    roomId?: boolean
    roomNumber?: boolean
    roomCapacity?: boolean
    roomFloor?: boolean
    roomType?: boolean
    roomPricePerMonth?: boolean
    roomBuilding?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostelId?: boolean
    academicYear?: boolean
  }

  export type HostelRoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roomId" | "roomNumber" | "roomCapacity" | "roomFloor" | "roomType" | "roomPricePerMonth" | "roomBuilding" | "createdAt" | "updatedAt" | "hostelId" | "academicYear", ExtArgs["result"]["hostelRoom"]>

  export type $HostelRoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HostelRoom"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roomId: string
      roomNumber: string
      roomCapacity: string
      roomFloor: string
      roomType: $Enums.RoomType
      roomPricePerMonth: string
      roomBuilding: string
      createdAt: Date
      updatedAt: Date
      hostelId: string
      academicYear: number
    }, ExtArgs["result"]["hostelRoom"]>
    composites: {}
  }

  type HostelRoomGetPayload<S extends boolean | null | undefined | HostelRoomDefaultArgs> = $Result.GetResult<Prisma.$HostelRoomPayload, S>

  type HostelRoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HostelRoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HostelRoomCountAggregateInputType | true
    }

  export interface HostelRoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HostelRoom'], meta: { name: 'HostelRoom' } }
    /**
     * Find zero or one HostelRoom that matches the filter.
     * @param {HostelRoomFindUniqueArgs} args - Arguments to find a HostelRoom
     * @example
     * // Get one HostelRoom
     * const hostelRoom = await prisma.hostelRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HostelRoomFindUniqueArgs>(args: SelectSubset<T, HostelRoomFindUniqueArgs<ExtArgs>>): Prisma__HostelRoomClient<$Result.GetResult<Prisma.$HostelRoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HostelRoom that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HostelRoomFindUniqueOrThrowArgs} args - Arguments to find a HostelRoom
     * @example
     * // Get one HostelRoom
     * const hostelRoom = await prisma.hostelRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HostelRoomFindUniqueOrThrowArgs>(args: SelectSubset<T, HostelRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HostelRoomClient<$Result.GetResult<Prisma.$HostelRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HostelRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRoomFindFirstArgs} args - Arguments to find a HostelRoom
     * @example
     * // Get one HostelRoom
     * const hostelRoom = await prisma.hostelRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HostelRoomFindFirstArgs>(args?: SelectSubset<T, HostelRoomFindFirstArgs<ExtArgs>>): Prisma__HostelRoomClient<$Result.GetResult<Prisma.$HostelRoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HostelRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRoomFindFirstOrThrowArgs} args - Arguments to find a HostelRoom
     * @example
     * // Get one HostelRoom
     * const hostelRoom = await prisma.hostelRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HostelRoomFindFirstOrThrowArgs>(args?: SelectSubset<T, HostelRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__HostelRoomClient<$Result.GetResult<Prisma.$HostelRoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HostelRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HostelRooms
     * const hostelRooms = await prisma.hostelRoom.findMany()
     * 
     * // Get first 10 HostelRooms
     * const hostelRooms = await prisma.hostelRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostelRoomWithIdOnly = await prisma.hostelRoom.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HostelRoomFindManyArgs>(args?: SelectSubset<T, HostelRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HostelRoom.
     * @param {HostelRoomCreateArgs} args - Arguments to create a HostelRoom.
     * @example
     * // Create one HostelRoom
     * const HostelRoom = await prisma.hostelRoom.create({
     *   data: {
     *     // ... data to create a HostelRoom
     *   }
     * })
     * 
     */
    create<T extends HostelRoomCreateArgs>(args: SelectSubset<T, HostelRoomCreateArgs<ExtArgs>>): Prisma__HostelRoomClient<$Result.GetResult<Prisma.$HostelRoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HostelRooms.
     * @param {HostelRoomCreateManyArgs} args - Arguments to create many HostelRooms.
     * @example
     * // Create many HostelRooms
     * const hostelRoom = await prisma.hostelRoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HostelRoomCreateManyArgs>(args?: SelectSubset<T, HostelRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HostelRooms and returns the data saved in the database.
     * @param {HostelRoomCreateManyAndReturnArgs} args - Arguments to create many HostelRooms.
     * @example
     * // Create many HostelRooms
     * const hostelRoom = await prisma.hostelRoom.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HostelRooms and only return the `id`
     * const hostelRoomWithIdOnly = await prisma.hostelRoom.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HostelRoomCreateManyAndReturnArgs>(args?: SelectSubset<T, HostelRoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelRoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HostelRoom.
     * @param {HostelRoomDeleteArgs} args - Arguments to delete one HostelRoom.
     * @example
     * // Delete one HostelRoom
     * const HostelRoom = await prisma.hostelRoom.delete({
     *   where: {
     *     // ... filter to delete one HostelRoom
     *   }
     * })
     * 
     */
    delete<T extends HostelRoomDeleteArgs>(args: SelectSubset<T, HostelRoomDeleteArgs<ExtArgs>>): Prisma__HostelRoomClient<$Result.GetResult<Prisma.$HostelRoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HostelRoom.
     * @param {HostelRoomUpdateArgs} args - Arguments to update one HostelRoom.
     * @example
     * // Update one HostelRoom
     * const hostelRoom = await prisma.hostelRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HostelRoomUpdateArgs>(args: SelectSubset<T, HostelRoomUpdateArgs<ExtArgs>>): Prisma__HostelRoomClient<$Result.GetResult<Prisma.$HostelRoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HostelRooms.
     * @param {HostelRoomDeleteManyArgs} args - Arguments to filter HostelRooms to delete.
     * @example
     * // Delete a few HostelRooms
     * const { count } = await prisma.hostelRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HostelRoomDeleteManyArgs>(args?: SelectSubset<T, HostelRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostelRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HostelRooms
     * const hostelRoom = await prisma.hostelRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HostelRoomUpdateManyArgs>(args: SelectSubset<T, HostelRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostelRooms and returns the data updated in the database.
     * @param {HostelRoomUpdateManyAndReturnArgs} args - Arguments to update many HostelRooms.
     * @example
     * // Update many HostelRooms
     * const hostelRoom = await prisma.hostelRoom.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HostelRooms and only return the `id`
     * const hostelRoomWithIdOnly = await prisma.hostelRoom.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HostelRoomUpdateManyAndReturnArgs>(args: SelectSubset<T, HostelRoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostelRoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HostelRoom.
     * @param {HostelRoomUpsertArgs} args - Arguments to update or create a HostelRoom.
     * @example
     * // Update or create a HostelRoom
     * const hostelRoom = await prisma.hostelRoom.upsert({
     *   create: {
     *     // ... data to create a HostelRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HostelRoom we want to update
     *   }
     * })
     */
    upsert<T extends HostelRoomUpsertArgs>(args: SelectSubset<T, HostelRoomUpsertArgs<ExtArgs>>): Prisma__HostelRoomClient<$Result.GetResult<Prisma.$HostelRoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HostelRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRoomCountArgs} args - Arguments to filter HostelRooms to count.
     * @example
     * // Count the number of HostelRooms
     * const count = await prisma.hostelRoom.count({
     *   where: {
     *     // ... the filter for the HostelRooms we want to count
     *   }
     * })
    **/
    count<T extends HostelRoomCountArgs>(
      args?: Subset<T, HostelRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostelRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HostelRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostelRoomAggregateArgs>(args: Subset<T, HostelRoomAggregateArgs>): Prisma.PrismaPromise<GetHostelRoomAggregateType<T>>

    /**
     * Group by HostelRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostelRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostelRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostelRoomGroupByArgs['orderBy'] }
        : { orderBy?: HostelRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostelRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostelRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HostelRoom model
   */
  readonly fields: HostelRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HostelRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HostelRoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HostelRoom model
   */
  interface HostelRoomFieldRefs {
    readonly id: FieldRef<"HostelRoom", 'Int'>
    readonly roomId: FieldRef<"HostelRoom", 'String'>
    readonly roomNumber: FieldRef<"HostelRoom", 'String'>
    readonly roomCapacity: FieldRef<"HostelRoom", 'String'>
    readonly roomFloor: FieldRef<"HostelRoom", 'String'>
    readonly roomType: FieldRef<"HostelRoom", 'RoomType'>
    readonly roomPricePerMonth: FieldRef<"HostelRoom", 'String'>
    readonly roomBuilding: FieldRef<"HostelRoom", 'String'>
    readonly createdAt: FieldRef<"HostelRoom", 'DateTime'>
    readonly updatedAt: FieldRef<"HostelRoom", 'DateTime'>
    readonly hostelId: FieldRef<"HostelRoom", 'String'>
    readonly academicYear: FieldRef<"HostelRoom", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * HostelRoom findUnique
   */
  export type HostelRoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
    /**
     * Filter, which HostelRoom to fetch.
     */
    where: HostelRoomWhereUniqueInput
  }

  /**
   * HostelRoom findUniqueOrThrow
   */
  export type HostelRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
    /**
     * Filter, which HostelRoom to fetch.
     */
    where: HostelRoomWhereUniqueInput
  }

  /**
   * HostelRoom findFirst
   */
  export type HostelRoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
    /**
     * Filter, which HostelRoom to fetch.
     */
    where?: HostelRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelRooms to fetch.
     */
    orderBy?: HostelRoomOrderByWithRelationInput | HostelRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostelRooms.
     */
    cursor?: HostelRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostelRooms.
     */
    distinct?: HostelRoomScalarFieldEnum | HostelRoomScalarFieldEnum[]
  }

  /**
   * HostelRoom findFirstOrThrow
   */
  export type HostelRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
    /**
     * Filter, which HostelRoom to fetch.
     */
    where?: HostelRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelRooms to fetch.
     */
    orderBy?: HostelRoomOrderByWithRelationInput | HostelRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostelRooms.
     */
    cursor?: HostelRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostelRooms.
     */
    distinct?: HostelRoomScalarFieldEnum | HostelRoomScalarFieldEnum[]
  }

  /**
   * HostelRoom findMany
   */
  export type HostelRoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
    /**
     * Filter, which HostelRooms to fetch.
     */
    where?: HostelRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostelRooms to fetch.
     */
    orderBy?: HostelRoomOrderByWithRelationInput | HostelRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HostelRooms.
     */
    cursor?: HostelRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostelRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostelRooms.
     */
    skip?: number
    distinct?: HostelRoomScalarFieldEnum | HostelRoomScalarFieldEnum[]
  }

  /**
   * HostelRoom create
   */
  export type HostelRoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
    /**
     * The data needed to create a HostelRoom.
     */
    data: XOR<HostelRoomCreateInput, HostelRoomUncheckedCreateInput>
  }

  /**
   * HostelRoom createMany
   */
  export type HostelRoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HostelRooms.
     */
    data: HostelRoomCreateManyInput | HostelRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostelRoom createManyAndReturn
   */
  export type HostelRoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
    /**
     * The data used to create many HostelRooms.
     */
    data: HostelRoomCreateManyInput | HostelRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostelRoom update
   */
  export type HostelRoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
    /**
     * The data needed to update a HostelRoom.
     */
    data: XOR<HostelRoomUpdateInput, HostelRoomUncheckedUpdateInput>
    /**
     * Choose, which HostelRoom to update.
     */
    where: HostelRoomWhereUniqueInput
  }

  /**
   * HostelRoom updateMany
   */
  export type HostelRoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HostelRooms.
     */
    data: XOR<HostelRoomUpdateManyMutationInput, HostelRoomUncheckedUpdateManyInput>
    /**
     * Filter which HostelRooms to update
     */
    where?: HostelRoomWhereInput
    /**
     * Limit how many HostelRooms to update.
     */
    limit?: number
  }

  /**
   * HostelRoom updateManyAndReturn
   */
  export type HostelRoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
    /**
     * The data used to update HostelRooms.
     */
    data: XOR<HostelRoomUpdateManyMutationInput, HostelRoomUncheckedUpdateManyInput>
    /**
     * Filter which HostelRooms to update
     */
    where?: HostelRoomWhereInput
    /**
     * Limit how many HostelRooms to update.
     */
    limit?: number
  }

  /**
   * HostelRoom upsert
   */
  export type HostelRoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
    /**
     * The filter to search for the HostelRoom to update in case it exists.
     */
    where: HostelRoomWhereUniqueInput
    /**
     * In case the HostelRoom found by the `where` argument doesn't exist, create a new HostelRoom with this data.
     */
    create: XOR<HostelRoomCreateInput, HostelRoomUncheckedCreateInput>
    /**
     * In case the HostelRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HostelRoomUpdateInput, HostelRoomUncheckedUpdateInput>
  }

  /**
   * HostelRoom delete
   */
  export type HostelRoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
    /**
     * Filter which HostelRoom to delete.
     */
    where: HostelRoomWhereUniqueInput
  }

  /**
   * HostelRoom deleteMany
   */
  export type HostelRoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostelRooms to delete
     */
    where?: HostelRoomWhereInput
    /**
     * Limit how many HostelRooms to delete.
     */
    limit?: number
  }

  /**
   * HostelRoom without action
   */
  export type HostelRoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostelRoom
     */
    select?: HostelRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostelRoom
     */
    omit?: HostelRoomOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SystemScalarFieldEnum: {
    id: 'id',
    systemId: 'systemId',
    systemName: 'systemName',
    systemEmail: 'systemEmail',
    sytemMaintenanceMode: 'sytemMaintenanceMode',
    SMTPHost: 'SMTPHost',
    SMTPPort: 'SMTPPort',
    SMTPUser: 'SMTPUser',
    SMTPPassword: 'SMTPPassword',
    passwordPolicy: 'passwordPolicy',
    twoFactorAuth: 'twoFactorAuth',
    sessionDuration: 'sessionDuration',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    academicYear: 'academicYear'
  };

  export type SystemScalarFieldEnum = (typeof SystemScalarFieldEnum)[keyof typeof SystemScalarFieldEnum]


  export const AuthScalarFieldEnum: {
    id: 'id',
    authId: 'authId',
    userInEmail: 'userInEmail',
    userInPhone: 'userInPhone',
    userInName: 'userInName',
    userInPassword: 'userInPassword',
    isVerified: 'isVerified',
    isRequestApproved: 'isRequestApproved',
    role: 'role',
    hostelId: 'hostelId',
    academicYear: 'academicYear',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AuthScalarFieldEnum = (typeof AuthScalarFieldEnum)[keyof typeof AuthScalarFieldEnum]


  export const HostelScalarFieldEnum: {
    id: 'id',
    hostelId: 'hostelId',
    hostelNumber: 'hostelNumber',
    hostelName: 'hostelName',
    hostelAddress: 'hostelAddress',
    totalRooms: 'totalRooms',
    totalBeds: 'totalBeds',
    totalFloors: 'totalFloors',
    hostelExpiryRemainingTime: 'hostelExpiryRemainingTime',
    hostelExpiryDate: 'hostelExpiryDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    academicYear: 'academicYear',
    userInId: 'userInId',
    authId: 'authId'
  };

  export type HostelScalarFieldEnum = (typeof HostelScalarFieldEnum)[keyof typeof HostelScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    adminId: 'adminId',
    adminName: 'adminName',
    adminEmail: 'adminEmail',
    adminPhone: 'adminPhone',
    authId: 'authId',
    hostelId: 'hostelId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    academicYear: 'academicYear'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const HostelRequestScalarFieldEnum: {
    id: 'id',
    hostelRequestId: 'hostelRequestId',
    hostelName: 'hostelName',
    hostelAddress: 'hostelAddress',
    totalRooms: 'totalRooms',
    totalBeds: 'totalBeds',
    totalFloors: 'totalFloors',
    adminName: 'adminName',
    adminEmail: 'adminEmail',
    adminPhone: 'adminPhone',
    adminPassword: 'adminPassword',
    adminAddress: 'adminAddress',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    academicYear: 'academicYear'
  };

  export type HostelRequestScalarFieldEnum = (typeof HostelRequestScalarFieldEnum)[keyof typeof HostelRequestScalarFieldEnum]


  export const ReportsComplaintsScalarFieldEnum: {
    id: 'id',
    reportId: 'reportId',
    reportTitle: 'reportTitle',
    reportDescription: 'reportDescription',
    reportType: 'reportType',
    reportStatus: 'reportStatus',
    reportPriority: 'reportPriority',
    reporterUserType: 'reporterUserType',
    userId: 'userId',
    hostelId: 'hostelId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    academicYear: 'academicYear'
  };

  export type ReportsComplaintsScalarFieldEnum = (typeof ReportsComplaintsScalarFieldEnum)[keyof typeof ReportsComplaintsScalarFieldEnum]


  export const ReportReplyScalarFieldEnum: {
    id: 'id',
    replyId: 'replyId',
    replyContent: 'replyContent',
    replyStatus: 'replyStatus',
    reportComplaintId: 'reportComplaintId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    academicYear: 'academicYear'
  };

  export type ReportReplyScalarFieldEnum = (typeof ReportReplyScalarFieldEnum)[keyof typeof ReportReplyScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    notificationId: 'notificationId',
    notificationTitle: 'notificationTitle',
    notificationMessage: 'notificationMessage',
    notificationReadUserIds: 'notificationReadUserIds',
    notificationType: 'notificationType',
    notificationStatus: 'notificationStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    academicYear: 'academicYear'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    paymentId: 'paymentId',
    paymentAmount: 'paymentAmount',
    paymentHostelPreviousExpiryTime: 'paymentHostelPreviousExpiryTime',
    paymentAddedTime: 'paymentAddedTime',
    paymentDescription: 'paymentDescription',
    paymentStatus: 'paymentStatus',
    paymentMethod: 'paymentMethod',
    createdAt: 'createdAt',
    hostelId: 'hostelId',
    creditRemainingAmount: 'creditRemainingAmount',
    updatedAt: 'updatedAt',
    academicYear: 'academicYear'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const HostelStudentScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    studentGeneratedId: 'studentGeneratedId',
    studentName: 'studentName',
    studentEmail: 'studentEmail',
    studentPhone: 'studentPhone',
    studentGender: 'studentGender',
    studentAddress: 'studentAddress',
    studentRoomNumber: 'studentRoomNumber',
    studentBedNumber: 'studentBedNumber',
    status: 'status',
    studentCheckInDate: 'studentCheckInDate',
    studentCheckOutDate: 'studentCheckOutDate',
    studentGuardianName: 'studentGuardianName',
    studentGuardianPhone: 'studentGuardianPhone',
    studentGuardianAddress: 'studentGuardianAddress',
    studentGuardianEmail: 'studentGuardianEmail',
    studentGuardianRelation: 'studentGuardianRelation',
    studentDocuments: 'studentDocuments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    hostelId: 'hostelId',
    academicYear: 'academicYear',
    authId: 'authId'
  };

  export type HostelStudentScalarFieldEnum = (typeof HostelStudentScalarFieldEnum)[keyof typeof HostelStudentScalarFieldEnum]


  export const HostelRoomScalarFieldEnum: {
    id: 'id',
    roomId: 'roomId',
    roomNumber: 'roomNumber',
    roomCapacity: 'roomCapacity',
    roomFloor: 'roomFloor',
    roomType: 'roomType',
    roomPricePerMonth: 'roomPricePerMonth',
    roomBuilding: 'roomBuilding',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    hostelId: 'hostelId',
    academicYear: 'academicYear'
  };

  export type HostelRoomScalarFieldEnum = (typeof HostelRoomScalarFieldEnum)[keyof typeof HostelRoomScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    


  /**
   * Reference to a field of type 'ReportType'
   */
  export type EnumReportTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportType'>
    


  /**
   * Reference to a field of type 'ReportType[]'
   */
  export type ListEnumReportTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportType[]'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'RoomType'
   */
  export type EnumRoomTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomType'>
    


  /**
   * Reference to a field of type 'RoomType[]'
   */
  export type ListEnumRoomTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoomType[]'>
    
  /**
   * Deep Input Types
   */


  export type SystemWhereInput = {
    AND?: SystemWhereInput | SystemWhereInput[]
    OR?: SystemWhereInput[]
    NOT?: SystemWhereInput | SystemWhereInput[]
    id?: IntFilter<"System"> | number
    systemId?: StringFilter<"System"> | string
    systemName?: StringFilter<"System"> | string
    systemEmail?: StringFilter<"System"> | string
    sytemMaintenanceMode?: BoolFilter<"System"> | boolean
    SMTPHost?: StringNullableFilter<"System"> | string | null
    SMTPPort?: IntNullableFilter<"System"> | number | null
    SMTPUser?: StringNullableFilter<"System"> | string | null
    SMTPPassword?: StringNullableFilter<"System"> | string | null
    passwordPolicy?: BoolFilter<"System"> | boolean
    twoFactorAuth?: BoolFilter<"System"> | boolean
    sessionDuration?: IntFilter<"System"> | number
    createdAt?: DateTimeFilter<"System"> | Date | string
    updatedAt?: DateTimeFilter<"System"> | Date | string
    academicYear?: IntFilter<"System"> | number
  }

  export type SystemOrderByWithRelationInput = {
    id?: SortOrder
    systemId?: SortOrder
    systemName?: SortOrder
    systemEmail?: SortOrder
    sytemMaintenanceMode?: SortOrder
    SMTPHost?: SortOrderInput | SortOrder
    SMTPPort?: SortOrderInput | SortOrder
    SMTPUser?: SortOrderInput | SortOrder
    SMTPPassword?: SortOrderInput | SortOrder
    passwordPolicy?: SortOrder
    twoFactorAuth?: SortOrder
    sessionDuration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type SystemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    systemId?: string
    AND?: SystemWhereInput | SystemWhereInput[]
    OR?: SystemWhereInput[]
    NOT?: SystemWhereInput | SystemWhereInput[]
    systemName?: StringFilter<"System"> | string
    systemEmail?: StringFilter<"System"> | string
    sytemMaintenanceMode?: BoolFilter<"System"> | boolean
    SMTPHost?: StringNullableFilter<"System"> | string | null
    SMTPPort?: IntNullableFilter<"System"> | number | null
    SMTPUser?: StringNullableFilter<"System"> | string | null
    SMTPPassword?: StringNullableFilter<"System"> | string | null
    passwordPolicy?: BoolFilter<"System"> | boolean
    twoFactorAuth?: BoolFilter<"System"> | boolean
    sessionDuration?: IntFilter<"System"> | number
    createdAt?: DateTimeFilter<"System"> | Date | string
    updatedAt?: DateTimeFilter<"System"> | Date | string
    academicYear?: IntFilter<"System"> | number
  }, "id" | "systemId">

  export type SystemOrderByWithAggregationInput = {
    id?: SortOrder
    systemId?: SortOrder
    systemName?: SortOrder
    systemEmail?: SortOrder
    sytemMaintenanceMode?: SortOrder
    SMTPHost?: SortOrderInput | SortOrder
    SMTPPort?: SortOrderInput | SortOrder
    SMTPUser?: SortOrderInput | SortOrder
    SMTPPassword?: SortOrderInput | SortOrder
    passwordPolicy?: SortOrder
    twoFactorAuth?: SortOrder
    sessionDuration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    _count?: SystemCountOrderByAggregateInput
    _avg?: SystemAvgOrderByAggregateInput
    _max?: SystemMaxOrderByAggregateInput
    _min?: SystemMinOrderByAggregateInput
    _sum?: SystemSumOrderByAggregateInput
  }

  export type SystemScalarWhereWithAggregatesInput = {
    AND?: SystemScalarWhereWithAggregatesInput | SystemScalarWhereWithAggregatesInput[]
    OR?: SystemScalarWhereWithAggregatesInput[]
    NOT?: SystemScalarWhereWithAggregatesInput | SystemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"System"> | number
    systemId?: StringWithAggregatesFilter<"System"> | string
    systemName?: StringWithAggregatesFilter<"System"> | string
    systemEmail?: StringWithAggregatesFilter<"System"> | string
    sytemMaintenanceMode?: BoolWithAggregatesFilter<"System"> | boolean
    SMTPHost?: StringNullableWithAggregatesFilter<"System"> | string | null
    SMTPPort?: IntNullableWithAggregatesFilter<"System"> | number | null
    SMTPUser?: StringNullableWithAggregatesFilter<"System"> | string | null
    SMTPPassword?: StringNullableWithAggregatesFilter<"System"> | string | null
    passwordPolicy?: BoolWithAggregatesFilter<"System"> | boolean
    twoFactorAuth?: BoolWithAggregatesFilter<"System"> | boolean
    sessionDuration?: IntWithAggregatesFilter<"System"> | number
    createdAt?: DateTimeWithAggregatesFilter<"System"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"System"> | Date | string
    academicYear?: IntWithAggregatesFilter<"System"> | number
  }

  export type AuthWhereInput = {
    AND?: AuthWhereInput | AuthWhereInput[]
    OR?: AuthWhereInput[]
    NOT?: AuthWhereInput | AuthWhereInput[]
    id?: IntFilter<"Auth"> | number
    authId?: StringFilter<"Auth"> | string
    userInEmail?: StringFilter<"Auth"> | string
    userInPhone?: StringFilter<"Auth"> | string
    userInName?: StringFilter<"Auth"> | string
    userInPassword?: StringFilter<"Auth"> | string
    isVerified?: BoolFilter<"Auth"> | boolean
    isRequestApproved?: BoolFilter<"Auth"> | boolean
    role?: EnumRoleFilter<"Auth"> | $Enums.Role
    hostelId?: StringNullableFilter<"Auth"> | string | null
    academicYear?: IntFilter<"Auth"> | number
    createdAt?: DateTimeFilter<"Auth"> | Date | string
    updatedAt?: DateTimeFilter<"Auth"> | Date | string
  }

  export type AuthOrderByWithRelationInput = {
    id?: SortOrder
    authId?: SortOrder
    userInEmail?: SortOrder
    userInPhone?: SortOrder
    userInName?: SortOrder
    userInPassword?: SortOrder
    isVerified?: SortOrder
    isRequestApproved?: SortOrder
    role?: SortOrder
    hostelId?: SortOrderInput | SortOrder
    academicYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuthWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    authId?: string
    userInEmail_hostelId?: AuthUserInEmailHostelIdCompoundUniqueInput
    userInPhone_hostelId?: AuthUserInPhoneHostelIdCompoundUniqueInput
    AND?: AuthWhereInput | AuthWhereInput[]
    OR?: AuthWhereInput[]
    NOT?: AuthWhereInput | AuthWhereInput[]
    userInEmail?: StringFilter<"Auth"> | string
    userInPhone?: StringFilter<"Auth"> | string
    userInName?: StringFilter<"Auth"> | string
    userInPassword?: StringFilter<"Auth"> | string
    isVerified?: BoolFilter<"Auth"> | boolean
    isRequestApproved?: BoolFilter<"Auth"> | boolean
    role?: EnumRoleFilter<"Auth"> | $Enums.Role
    hostelId?: StringNullableFilter<"Auth"> | string | null
    academicYear?: IntFilter<"Auth"> | number
    createdAt?: DateTimeFilter<"Auth"> | Date | string
    updatedAt?: DateTimeFilter<"Auth"> | Date | string
  }, "id" | "authId" | "userInEmail_hostelId" | "userInPhone_hostelId">

  export type AuthOrderByWithAggregationInput = {
    id?: SortOrder
    authId?: SortOrder
    userInEmail?: SortOrder
    userInPhone?: SortOrder
    userInName?: SortOrder
    userInPassword?: SortOrder
    isVerified?: SortOrder
    isRequestApproved?: SortOrder
    role?: SortOrder
    hostelId?: SortOrderInput | SortOrder
    academicYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AuthCountOrderByAggregateInput
    _avg?: AuthAvgOrderByAggregateInput
    _max?: AuthMaxOrderByAggregateInput
    _min?: AuthMinOrderByAggregateInput
    _sum?: AuthSumOrderByAggregateInput
  }

  export type AuthScalarWhereWithAggregatesInput = {
    AND?: AuthScalarWhereWithAggregatesInput | AuthScalarWhereWithAggregatesInput[]
    OR?: AuthScalarWhereWithAggregatesInput[]
    NOT?: AuthScalarWhereWithAggregatesInput | AuthScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Auth"> | number
    authId?: StringWithAggregatesFilter<"Auth"> | string
    userInEmail?: StringWithAggregatesFilter<"Auth"> | string
    userInPhone?: StringWithAggregatesFilter<"Auth"> | string
    userInName?: StringWithAggregatesFilter<"Auth"> | string
    userInPassword?: StringWithAggregatesFilter<"Auth"> | string
    isVerified?: BoolWithAggregatesFilter<"Auth"> | boolean
    isRequestApproved?: BoolWithAggregatesFilter<"Auth"> | boolean
    role?: EnumRoleWithAggregatesFilter<"Auth"> | $Enums.Role
    hostelId?: StringNullableWithAggregatesFilter<"Auth"> | string | null
    academicYear?: IntWithAggregatesFilter<"Auth"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Auth"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Auth"> | Date | string
  }

  export type HostelWhereInput = {
    AND?: HostelWhereInput | HostelWhereInput[]
    OR?: HostelWhereInput[]
    NOT?: HostelWhereInput | HostelWhereInput[]
    id?: IntFilter<"Hostel"> | number
    hostelId?: StringFilter<"Hostel"> | string
    hostelNumber?: StringFilter<"Hostel"> | string
    hostelName?: StringFilter<"Hostel"> | string
    hostelAddress?: StringFilter<"Hostel"> | string
    totalRooms?: IntFilter<"Hostel"> | number
    totalBeds?: IntFilter<"Hostel"> | number
    totalFloors?: IntFilter<"Hostel"> | number
    hostelExpiryRemainingTime?: IntFilter<"Hostel"> | number
    hostelExpiryDate?: DateTimeFilter<"Hostel"> | Date | string
    createdAt?: DateTimeFilter<"Hostel"> | Date | string
    updatedAt?: DateTimeFilter<"Hostel"> | Date | string
    academicYear?: IntFilter<"Hostel"> | number
    userInId?: StringFilter<"Hostel"> | string
    authId?: StringFilter<"Hostel"> | string
    admins?: AdminListRelationFilter
    reportsComplaints?: ReportsComplaintsListRelationFilter
  }

  export type HostelOrderByWithRelationInput = {
    id?: SortOrder
    hostelId?: SortOrder
    hostelNumber?: SortOrder
    hostelName?: SortOrder
    hostelAddress?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    hostelExpiryRemainingTime?: SortOrder
    hostelExpiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    userInId?: SortOrder
    authId?: SortOrder
    admins?: AdminOrderByRelationAggregateInput
    reportsComplaints?: ReportsComplaintsOrderByRelationAggregateInput
  }

  export type HostelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    hostelId?: string
    AND?: HostelWhereInput | HostelWhereInput[]
    OR?: HostelWhereInput[]
    NOT?: HostelWhereInput | HostelWhereInput[]
    hostelNumber?: StringFilter<"Hostel"> | string
    hostelName?: StringFilter<"Hostel"> | string
    hostelAddress?: StringFilter<"Hostel"> | string
    totalRooms?: IntFilter<"Hostel"> | number
    totalBeds?: IntFilter<"Hostel"> | number
    totalFloors?: IntFilter<"Hostel"> | number
    hostelExpiryRemainingTime?: IntFilter<"Hostel"> | number
    hostelExpiryDate?: DateTimeFilter<"Hostel"> | Date | string
    createdAt?: DateTimeFilter<"Hostel"> | Date | string
    updatedAt?: DateTimeFilter<"Hostel"> | Date | string
    academicYear?: IntFilter<"Hostel"> | number
    userInId?: StringFilter<"Hostel"> | string
    authId?: StringFilter<"Hostel"> | string
    admins?: AdminListRelationFilter
    reportsComplaints?: ReportsComplaintsListRelationFilter
  }, "id" | "hostelId">

  export type HostelOrderByWithAggregationInput = {
    id?: SortOrder
    hostelId?: SortOrder
    hostelNumber?: SortOrder
    hostelName?: SortOrder
    hostelAddress?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    hostelExpiryRemainingTime?: SortOrder
    hostelExpiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    userInId?: SortOrder
    authId?: SortOrder
    _count?: HostelCountOrderByAggregateInput
    _avg?: HostelAvgOrderByAggregateInput
    _max?: HostelMaxOrderByAggregateInput
    _min?: HostelMinOrderByAggregateInput
    _sum?: HostelSumOrderByAggregateInput
  }

  export type HostelScalarWhereWithAggregatesInput = {
    AND?: HostelScalarWhereWithAggregatesInput | HostelScalarWhereWithAggregatesInput[]
    OR?: HostelScalarWhereWithAggregatesInput[]
    NOT?: HostelScalarWhereWithAggregatesInput | HostelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Hostel"> | number
    hostelId?: StringWithAggregatesFilter<"Hostel"> | string
    hostelNumber?: StringWithAggregatesFilter<"Hostel"> | string
    hostelName?: StringWithAggregatesFilter<"Hostel"> | string
    hostelAddress?: StringWithAggregatesFilter<"Hostel"> | string
    totalRooms?: IntWithAggregatesFilter<"Hostel"> | number
    totalBeds?: IntWithAggregatesFilter<"Hostel"> | number
    totalFloors?: IntWithAggregatesFilter<"Hostel"> | number
    hostelExpiryRemainingTime?: IntWithAggregatesFilter<"Hostel"> | number
    hostelExpiryDate?: DateTimeWithAggregatesFilter<"Hostel"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Hostel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Hostel"> | Date | string
    academicYear?: IntWithAggregatesFilter<"Hostel"> | number
    userInId?: StringWithAggregatesFilter<"Hostel"> | string
    authId?: StringWithAggregatesFilter<"Hostel"> | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    adminId?: StringFilter<"Admin"> | string
    adminName?: StringFilter<"Admin"> | string
    adminEmail?: StringFilter<"Admin"> | string
    adminPhone?: StringFilter<"Admin"> | string
    authId?: StringFilter<"Admin"> | string
    hostelId?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    academicYear?: IntFilter<"Admin"> | number
    hostel?: XOR<HostelScalarRelationFilter, HostelWhereInput>
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    adminId?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    adminPhone?: SortOrder
    authId?: SortOrder
    hostelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    hostel?: HostelOrderByWithRelationInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    adminId?: string
    adminEmail?: string
    adminPhone?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    adminName?: StringFilter<"Admin"> | string
    authId?: StringFilter<"Admin"> | string
    hostelId?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    academicYear?: IntFilter<"Admin"> | number
    hostel?: XOR<HostelScalarRelationFilter, HostelWhereInput>
  }, "id" | "adminId" | "adminEmail" | "adminPhone">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    adminId?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    adminPhone?: SortOrder
    authId?: SortOrder
    hostelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    adminId?: StringWithAggregatesFilter<"Admin"> | string
    adminName?: StringWithAggregatesFilter<"Admin"> | string
    adminEmail?: StringWithAggregatesFilter<"Admin"> | string
    adminPhone?: StringWithAggregatesFilter<"Admin"> | string
    authId?: StringWithAggregatesFilter<"Admin"> | string
    hostelId?: StringWithAggregatesFilter<"Admin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    academicYear?: IntWithAggregatesFilter<"Admin"> | number
  }

  export type HostelRequestWhereInput = {
    AND?: HostelRequestWhereInput | HostelRequestWhereInput[]
    OR?: HostelRequestWhereInput[]
    NOT?: HostelRequestWhereInput | HostelRequestWhereInput[]
    id?: IntFilter<"HostelRequest"> | number
    hostelRequestId?: StringFilter<"HostelRequest"> | string
    hostelName?: StringFilter<"HostelRequest"> | string
    hostelAddress?: StringFilter<"HostelRequest"> | string
    totalRooms?: IntFilter<"HostelRequest"> | number
    totalBeds?: IntFilter<"HostelRequest"> | number
    totalFloors?: IntFilter<"HostelRequest"> | number
    adminName?: StringFilter<"HostelRequest"> | string
    adminEmail?: StringFilter<"HostelRequest"> | string
    adminPhone?: StringFilter<"HostelRequest"> | string
    adminPassword?: StringFilter<"HostelRequest"> | string
    adminAddress?: StringFilter<"HostelRequest"> | string
    status?: EnumStatusFilter<"HostelRequest"> | $Enums.Status
    createdAt?: DateTimeFilter<"HostelRequest"> | Date | string
    updatedAt?: DateTimeFilter<"HostelRequest"> | Date | string
    academicYear?: IntFilter<"HostelRequest"> | number
  }

  export type HostelRequestOrderByWithRelationInput = {
    id?: SortOrder
    hostelRequestId?: SortOrder
    hostelName?: SortOrder
    hostelAddress?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    adminPhone?: SortOrder
    adminPassword?: SortOrder
    adminAddress?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    hostelRequestId?: string
    AND?: HostelRequestWhereInput | HostelRequestWhereInput[]
    OR?: HostelRequestWhereInput[]
    NOT?: HostelRequestWhereInput | HostelRequestWhereInput[]
    hostelName?: StringFilter<"HostelRequest"> | string
    hostelAddress?: StringFilter<"HostelRequest"> | string
    totalRooms?: IntFilter<"HostelRequest"> | number
    totalBeds?: IntFilter<"HostelRequest"> | number
    totalFloors?: IntFilter<"HostelRequest"> | number
    adminName?: StringFilter<"HostelRequest"> | string
    adminEmail?: StringFilter<"HostelRequest"> | string
    adminPhone?: StringFilter<"HostelRequest"> | string
    adminPassword?: StringFilter<"HostelRequest"> | string
    adminAddress?: StringFilter<"HostelRequest"> | string
    status?: EnumStatusFilter<"HostelRequest"> | $Enums.Status
    createdAt?: DateTimeFilter<"HostelRequest"> | Date | string
    updatedAt?: DateTimeFilter<"HostelRequest"> | Date | string
    academicYear?: IntFilter<"HostelRequest"> | number
  }, "id" | "hostelRequestId">

  export type HostelRequestOrderByWithAggregationInput = {
    id?: SortOrder
    hostelRequestId?: SortOrder
    hostelName?: SortOrder
    hostelAddress?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    adminPhone?: SortOrder
    adminPassword?: SortOrder
    adminAddress?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    _count?: HostelRequestCountOrderByAggregateInput
    _avg?: HostelRequestAvgOrderByAggregateInput
    _max?: HostelRequestMaxOrderByAggregateInput
    _min?: HostelRequestMinOrderByAggregateInput
    _sum?: HostelRequestSumOrderByAggregateInput
  }

  export type HostelRequestScalarWhereWithAggregatesInput = {
    AND?: HostelRequestScalarWhereWithAggregatesInput | HostelRequestScalarWhereWithAggregatesInput[]
    OR?: HostelRequestScalarWhereWithAggregatesInput[]
    NOT?: HostelRequestScalarWhereWithAggregatesInput | HostelRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HostelRequest"> | number
    hostelRequestId?: StringWithAggregatesFilter<"HostelRequest"> | string
    hostelName?: StringWithAggregatesFilter<"HostelRequest"> | string
    hostelAddress?: StringWithAggregatesFilter<"HostelRequest"> | string
    totalRooms?: IntWithAggregatesFilter<"HostelRequest"> | number
    totalBeds?: IntWithAggregatesFilter<"HostelRequest"> | number
    totalFloors?: IntWithAggregatesFilter<"HostelRequest"> | number
    adminName?: StringWithAggregatesFilter<"HostelRequest"> | string
    adminEmail?: StringWithAggregatesFilter<"HostelRequest"> | string
    adminPhone?: StringWithAggregatesFilter<"HostelRequest"> | string
    adminPassword?: StringWithAggregatesFilter<"HostelRequest"> | string
    adminAddress?: StringWithAggregatesFilter<"HostelRequest"> | string
    status?: EnumStatusWithAggregatesFilter<"HostelRequest"> | $Enums.Status
    createdAt?: DateTimeWithAggregatesFilter<"HostelRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HostelRequest"> | Date | string
    academicYear?: IntWithAggregatesFilter<"HostelRequest"> | number
  }

  export type ReportsComplaintsWhereInput = {
    AND?: ReportsComplaintsWhereInput | ReportsComplaintsWhereInput[]
    OR?: ReportsComplaintsWhereInput[]
    NOT?: ReportsComplaintsWhereInput | ReportsComplaintsWhereInput[]
    id?: IntFilter<"ReportsComplaints"> | number
    reportId?: StringFilter<"ReportsComplaints"> | string
    reportTitle?: StringFilter<"ReportsComplaints"> | string
    reportDescription?: StringFilter<"ReportsComplaints"> | string
    reportType?: EnumReportTypeFilter<"ReportsComplaints"> | $Enums.ReportType
    reportStatus?: EnumStatusFilter<"ReportsComplaints"> | $Enums.Status
    reportPriority?: EnumPriorityFilter<"ReportsComplaints"> | $Enums.Priority
    reporterUserType?: EnumRoleFilter<"ReportsComplaints"> | $Enums.Role
    userId?: StringNullableFilter<"ReportsComplaints"> | string | null
    hostelId?: StringFilter<"ReportsComplaints"> | string
    createdAt?: DateTimeFilter<"ReportsComplaints"> | Date | string
    updatedAt?: DateTimeFilter<"ReportsComplaints"> | Date | string
    academicYear?: IntFilter<"ReportsComplaints"> | number
    hostel?: XOR<HostelScalarRelationFilter, HostelWhereInput>
    reportReplies?: ReportReplyListRelationFilter
  }

  export type ReportsComplaintsOrderByWithRelationInput = {
    id?: SortOrder
    reportId?: SortOrder
    reportTitle?: SortOrder
    reportDescription?: SortOrder
    reportType?: SortOrder
    reportStatus?: SortOrder
    reportPriority?: SortOrder
    reporterUserType?: SortOrder
    userId?: SortOrderInput | SortOrder
    hostelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    hostel?: HostelOrderByWithRelationInput
    reportReplies?: ReportReplyOrderByRelationAggregateInput
  }

  export type ReportsComplaintsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    reportId?: string
    AND?: ReportsComplaintsWhereInput | ReportsComplaintsWhereInput[]
    OR?: ReportsComplaintsWhereInput[]
    NOT?: ReportsComplaintsWhereInput | ReportsComplaintsWhereInput[]
    reportTitle?: StringFilter<"ReportsComplaints"> | string
    reportDescription?: StringFilter<"ReportsComplaints"> | string
    reportType?: EnumReportTypeFilter<"ReportsComplaints"> | $Enums.ReportType
    reportStatus?: EnumStatusFilter<"ReportsComplaints"> | $Enums.Status
    reportPriority?: EnumPriorityFilter<"ReportsComplaints"> | $Enums.Priority
    reporterUserType?: EnumRoleFilter<"ReportsComplaints"> | $Enums.Role
    userId?: StringNullableFilter<"ReportsComplaints"> | string | null
    hostelId?: StringFilter<"ReportsComplaints"> | string
    createdAt?: DateTimeFilter<"ReportsComplaints"> | Date | string
    updatedAt?: DateTimeFilter<"ReportsComplaints"> | Date | string
    academicYear?: IntFilter<"ReportsComplaints"> | number
    hostel?: XOR<HostelScalarRelationFilter, HostelWhereInput>
    reportReplies?: ReportReplyListRelationFilter
  }, "id" | "reportId">

  export type ReportsComplaintsOrderByWithAggregationInput = {
    id?: SortOrder
    reportId?: SortOrder
    reportTitle?: SortOrder
    reportDescription?: SortOrder
    reportType?: SortOrder
    reportStatus?: SortOrder
    reportPriority?: SortOrder
    reporterUserType?: SortOrder
    userId?: SortOrderInput | SortOrder
    hostelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    _count?: ReportsComplaintsCountOrderByAggregateInput
    _avg?: ReportsComplaintsAvgOrderByAggregateInput
    _max?: ReportsComplaintsMaxOrderByAggregateInput
    _min?: ReportsComplaintsMinOrderByAggregateInput
    _sum?: ReportsComplaintsSumOrderByAggregateInput
  }

  export type ReportsComplaintsScalarWhereWithAggregatesInput = {
    AND?: ReportsComplaintsScalarWhereWithAggregatesInput | ReportsComplaintsScalarWhereWithAggregatesInput[]
    OR?: ReportsComplaintsScalarWhereWithAggregatesInput[]
    NOT?: ReportsComplaintsScalarWhereWithAggregatesInput | ReportsComplaintsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReportsComplaints"> | number
    reportId?: StringWithAggregatesFilter<"ReportsComplaints"> | string
    reportTitle?: StringWithAggregatesFilter<"ReportsComplaints"> | string
    reportDescription?: StringWithAggregatesFilter<"ReportsComplaints"> | string
    reportType?: EnumReportTypeWithAggregatesFilter<"ReportsComplaints"> | $Enums.ReportType
    reportStatus?: EnumStatusWithAggregatesFilter<"ReportsComplaints"> | $Enums.Status
    reportPriority?: EnumPriorityWithAggregatesFilter<"ReportsComplaints"> | $Enums.Priority
    reporterUserType?: EnumRoleWithAggregatesFilter<"ReportsComplaints"> | $Enums.Role
    userId?: StringNullableWithAggregatesFilter<"ReportsComplaints"> | string | null
    hostelId?: StringWithAggregatesFilter<"ReportsComplaints"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReportsComplaints"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReportsComplaints"> | Date | string
    academicYear?: IntWithAggregatesFilter<"ReportsComplaints"> | number
  }

  export type ReportReplyWhereInput = {
    AND?: ReportReplyWhereInput | ReportReplyWhereInput[]
    OR?: ReportReplyWhereInput[]
    NOT?: ReportReplyWhereInput | ReportReplyWhereInput[]
    id?: IntFilter<"ReportReply"> | number
    replyId?: StringFilter<"ReportReply"> | string
    replyContent?: StringFilter<"ReportReply"> | string
    replyStatus?: EnumStatusFilter<"ReportReply"> | $Enums.Status
    reportComplaintId?: StringFilter<"ReportReply"> | string
    createdAt?: DateTimeFilter<"ReportReply"> | Date | string
    updatedAt?: DateTimeFilter<"ReportReply"> | Date | string
    academicYear?: IntFilter<"ReportReply"> | number
    reportComplaint?: XOR<ReportsComplaintsScalarRelationFilter, ReportsComplaintsWhereInput>
  }

  export type ReportReplyOrderByWithRelationInput = {
    id?: SortOrder
    replyId?: SortOrder
    replyContent?: SortOrder
    replyStatus?: SortOrder
    reportComplaintId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    reportComplaint?: ReportsComplaintsOrderByWithRelationInput
  }

  export type ReportReplyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    replyId?: string
    AND?: ReportReplyWhereInput | ReportReplyWhereInput[]
    OR?: ReportReplyWhereInput[]
    NOT?: ReportReplyWhereInput | ReportReplyWhereInput[]
    replyContent?: StringFilter<"ReportReply"> | string
    replyStatus?: EnumStatusFilter<"ReportReply"> | $Enums.Status
    reportComplaintId?: StringFilter<"ReportReply"> | string
    createdAt?: DateTimeFilter<"ReportReply"> | Date | string
    updatedAt?: DateTimeFilter<"ReportReply"> | Date | string
    academicYear?: IntFilter<"ReportReply"> | number
    reportComplaint?: XOR<ReportsComplaintsScalarRelationFilter, ReportsComplaintsWhereInput>
  }, "id" | "replyId">

  export type ReportReplyOrderByWithAggregationInput = {
    id?: SortOrder
    replyId?: SortOrder
    replyContent?: SortOrder
    replyStatus?: SortOrder
    reportComplaintId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    _count?: ReportReplyCountOrderByAggregateInput
    _avg?: ReportReplyAvgOrderByAggregateInput
    _max?: ReportReplyMaxOrderByAggregateInput
    _min?: ReportReplyMinOrderByAggregateInput
    _sum?: ReportReplySumOrderByAggregateInput
  }

  export type ReportReplyScalarWhereWithAggregatesInput = {
    AND?: ReportReplyScalarWhereWithAggregatesInput | ReportReplyScalarWhereWithAggregatesInput[]
    OR?: ReportReplyScalarWhereWithAggregatesInput[]
    NOT?: ReportReplyScalarWhereWithAggregatesInput | ReportReplyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReportReply"> | number
    replyId?: StringWithAggregatesFilter<"ReportReply"> | string
    replyContent?: StringWithAggregatesFilter<"ReportReply"> | string
    replyStatus?: EnumStatusWithAggregatesFilter<"ReportReply"> | $Enums.Status
    reportComplaintId?: StringWithAggregatesFilter<"ReportReply"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReportReply"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReportReply"> | Date | string
    academicYear?: IntWithAggregatesFilter<"ReportReply"> | number
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    notificationId?: StringFilter<"Notification"> | string
    notificationTitle?: StringFilter<"Notification"> | string
    notificationMessage?: StringFilter<"Notification"> | string
    notificationReadUserIds?: StringNullableListFilter<"Notification">
    notificationType?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    notificationStatus?: EnumStatusFilter<"Notification"> | $Enums.Status
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    academicYear?: IntFilter<"Notification"> | number
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    notificationTitle?: SortOrder
    notificationMessage?: SortOrder
    notificationReadUserIds?: SortOrder
    notificationType?: SortOrder
    notificationStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    notificationId?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    notificationTitle?: StringFilter<"Notification"> | string
    notificationMessage?: StringFilter<"Notification"> | string
    notificationReadUserIds?: StringNullableListFilter<"Notification">
    notificationType?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    notificationStatus?: EnumStatusFilter<"Notification"> | $Enums.Status
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    academicYear?: IntFilter<"Notification"> | number
  }, "id" | "notificationId">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    notificationTitle?: SortOrder
    notificationMessage?: SortOrder
    notificationReadUserIds?: SortOrder
    notificationType?: SortOrder
    notificationStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    notificationId?: StringWithAggregatesFilter<"Notification"> | string
    notificationTitle?: StringWithAggregatesFilter<"Notification"> | string
    notificationMessage?: StringWithAggregatesFilter<"Notification"> | string
    notificationReadUserIds?: StringNullableListFilter<"Notification">
    notificationType?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    notificationStatus?: EnumStatusWithAggregatesFilter<"Notification"> | $Enums.Status
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    academicYear?: IntWithAggregatesFilter<"Notification"> | number
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    paymentId?: StringFilter<"Payment"> | string
    paymentAmount?: FloatFilter<"Payment"> | number
    paymentHostelPreviousExpiryTime?: IntFilter<"Payment"> | number
    paymentAddedTime?: IntFilter<"Payment"> | number
    paymentDescription?: StringFilter<"Payment"> | string
    paymentStatus?: EnumStatusFilter<"Payment"> | $Enums.Status
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    hostelId?: StringFilter<"Payment"> | string
    creditRemainingAmount?: FloatFilter<"Payment"> | number
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    academicYear?: IntFilter<"Payment"> | number
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    paymentId?: SortOrder
    paymentAmount?: SortOrder
    paymentHostelPreviousExpiryTime?: SortOrder
    paymentAddedTime?: SortOrder
    paymentDescription?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    hostelId?: SortOrder
    creditRemainingAmount?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    paymentId?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    paymentAmount?: FloatFilter<"Payment"> | number
    paymentHostelPreviousExpiryTime?: IntFilter<"Payment"> | number
    paymentAddedTime?: IntFilter<"Payment"> | number
    paymentDescription?: StringFilter<"Payment"> | string
    paymentStatus?: EnumStatusFilter<"Payment"> | $Enums.Status
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    hostelId?: StringFilter<"Payment"> | string
    creditRemainingAmount?: FloatFilter<"Payment"> | number
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    academicYear?: IntFilter<"Payment"> | number
  }, "id" | "paymentId">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    paymentId?: SortOrder
    paymentAmount?: SortOrder
    paymentHostelPreviousExpiryTime?: SortOrder
    paymentAddedTime?: SortOrder
    paymentDescription?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    hostelId?: SortOrder
    creditRemainingAmount?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    paymentId?: StringWithAggregatesFilter<"Payment"> | string
    paymentAmount?: FloatWithAggregatesFilter<"Payment"> | number
    paymentHostelPreviousExpiryTime?: IntWithAggregatesFilter<"Payment"> | number
    paymentAddedTime?: IntWithAggregatesFilter<"Payment"> | number
    paymentDescription?: StringWithAggregatesFilter<"Payment"> | string
    paymentStatus?: EnumStatusWithAggregatesFilter<"Payment"> | $Enums.Status
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"Payment"> | $Enums.PaymentMethod
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    hostelId?: StringWithAggregatesFilter<"Payment"> | string
    creditRemainingAmount?: FloatWithAggregatesFilter<"Payment"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    academicYear?: IntWithAggregatesFilter<"Payment"> | number
  }

  export type HostelStudentWhereInput = {
    AND?: HostelStudentWhereInput | HostelStudentWhereInput[]
    OR?: HostelStudentWhereInput[]
    NOT?: HostelStudentWhereInput | HostelStudentWhereInput[]
    id?: IntFilter<"HostelStudent"> | number
    studentId?: StringFilter<"HostelStudent"> | string
    studentGeneratedId?: StringFilter<"HostelStudent"> | string
    studentName?: StringFilter<"HostelStudent"> | string
    studentEmail?: StringFilter<"HostelStudent"> | string
    studentPhone?: StringFilter<"HostelStudent"> | string
    studentGender?: EnumGenderFilter<"HostelStudent"> | $Enums.Gender
    studentAddress?: StringNullableFilter<"HostelStudent"> | string | null
    studentRoomNumber?: StringNullableFilter<"HostelStudent"> | string | null
    studentBedNumber?: StringNullableFilter<"HostelStudent"> | string | null
    status?: EnumStatusFilter<"HostelStudent"> | $Enums.Status
    studentCheckInDate?: DateTimeFilter<"HostelStudent"> | Date | string
    studentCheckOutDate?: DateTimeNullableFilter<"HostelStudent"> | Date | string | null
    studentGuardianName?: StringFilter<"HostelStudent"> | string
    studentGuardianPhone?: StringFilter<"HostelStudent"> | string
    studentGuardianAddress?: StringFilter<"HostelStudent"> | string
    studentGuardianEmail?: StringNullableFilter<"HostelStudent"> | string | null
    studentGuardianRelation?: StringFilter<"HostelStudent"> | string
    studentDocuments?: StringNullableListFilter<"HostelStudent">
    createdAt?: DateTimeFilter<"HostelStudent"> | Date | string
    updatedAt?: DateTimeFilter<"HostelStudent"> | Date | string
    hostelId?: StringFilter<"HostelStudent"> | string
    academicYear?: IntFilter<"HostelStudent"> | number
    authId?: StringFilter<"HostelStudent"> | string
  }

  export type HostelStudentOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    studentGeneratedId?: SortOrder
    studentName?: SortOrder
    studentEmail?: SortOrder
    studentPhone?: SortOrder
    studentGender?: SortOrder
    studentAddress?: SortOrderInput | SortOrder
    studentRoomNumber?: SortOrderInput | SortOrder
    studentBedNumber?: SortOrderInput | SortOrder
    status?: SortOrder
    studentCheckInDate?: SortOrder
    studentCheckOutDate?: SortOrderInput | SortOrder
    studentGuardianName?: SortOrder
    studentGuardianPhone?: SortOrder
    studentGuardianAddress?: SortOrder
    studentGuardianEmail?: SortOrderInput | SortOrder
    studentGuardianRelation?: SortOrder
    studentDocuments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
    authId?: SortOrder
  }

  export type HostelStudentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId?: string
    studentGeneratedId?: string
    studentEmail_hostelId?: HostelStudentStudentEmailHostelIdCompoundUniqueInput
    studentPhone_hostelId?: HostelStudentStudentPhoneHostelIdCompoundUniqueInput
    AND?: HostelStudentWhereInput | HostelStudentWhereInput[]
    OR?: HostelStudentWhereInput[]
    NOT?: HostelStudentWhereInput | HostelStudentWhereInput[]
    studentName?: StringFilter<"HostelStudent"> | string
    studentEmail?: StringFilter<"HostelStudent"> | string
    studentPhone?: StringFilter<"HostelStudent"> | string
    studentGender?: EnumGenderFilter<"HostelStudent"> | $Enums.Gender
    studentAddress?: StringNullableFilter<"HostelStudent"> | string | null
    studentRoomNumber?: StringNullableFilter<"HostelStudent"> | string | null
    studentBedNumber?: StringNullableFilter<"HostelStudent"> | string | null
    status?: EnumStatusFilter<"HostelStudent"> | $Enums.Status
    studentCheckInDate?: DateTimeFilter<"HostelStudent"> | Date | string
    studentCheckOutDate?: DateTimeNullableFilter<"HostelStudent"> | Date | string | null
    studentGuardianName?: StringFilter<"HostelStudent"> | string
    studentGuardianPhone?: StringFilter<"HostelStudent"> | string
    studentGuardianAddress?: StringFilter<"HostelStudent"> | string
    studentGuardianEmail?: StringNullableFilter<"HostelStudent"> | string | null
    studentGuardianRelation?: StringFilter<"HostelStudent"> | string
    studentDocuments?: StringNullableListFilter<"HostelStudent">
    createdAt?: DateTimeFilter<"HostelStudent"> | Date | string
    updatedAt?: DateTimeFilter<"HostelStudent"> | Date | string
    hostelId?: StringFilter<"HostelStudent"> | string
    academicYear?: IntFilter<"HostelStudent"> | number
    authId?: StringFilter<"HostelStudent"> | string
  }, "id" | "studentId" | "studentGeneratedId" | "studentEmail_hostelId" | "studentPhone_hostelId">

  export type HostelStudentOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    studentGeneratedId?: SortOrder
    studentName?: SortOrder
    studentEmail?: SortOrder
    studentPhone?: SortOrder
    studentGender?: SortOrder
    studentAddress?: SortOrderInput | SortOrder
    studentRoomNumber?: SortOrderInput | SortOrder
    studentBedNumber?: SortOrderInput | SortOrder
    status?: SortOrder
    studentCheckInDate?: SortOrder
    studentCheckOutDate?: SortOrderInput | SortOrder
    studentGuardianName?: SortOrder
    studentGuardianPhone?: SortOrder
    studentGuardianAddress?: SortOrder
    studentGuardianEmail?: SortOrderInput | SortOrder
    studentGuardianRelation?: SortOrder
    studentDocuments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
    authId?: SortOrder
    _count?: HostelStudentCountOrderByAggregateInput
    _avg?: HostelStudentAvgOrderByAggregateInput
    _max?: HostelStudentMaxOrderByAggregateInput
    _min?: HostelStudentMinOrderByAggregateInput
    _sum?: HostelStudentSumOrderByAggregateInput
  }

  export type HostelStudentScalarWhereWithAggregatesInput = {
    AND?: HostelStudentScalarWhereWithAggregatesInput | HostelStudentScalarWhereWithAggregatesInput[]
    OR?: HostelStudentScalarWhereWithAggregatesInput[]
    NOT?: HostelStudentScalarWhereWithAggregatesInput | HostelStudentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HostelStudent"> | number
    studentId?: StringWithAggregatesFilter<"HostelStudent"> | string
    studentGeneratedId?: StringWithAggregatesFilter<"HostelStudent"> | string
    studentName?: StringWithAggregatesFilter<"HostelStudent"> | string
    studentEmail?: StringWithAggregatesFilter<"HostelStudent"> | string
    studentPhone?: StringWithAggregatesFilter<"HostelStudent"> | string
    studentGender?: EnumGenderWithAggregatesFilter<"HostelStudent"> | $Enums.Gender
    studentAddress?: StringNullableWithAggregatesFilter<"HostelStudent"> | string | null
    studentRoomNumber?: StringNullableWithAggregatesFilter<"HostelStudent"> | string | null
    studentBedNumber?: StringNullableWithAggregatesFilter<"HostelStudent"> | string | null
    status?: EnumStatusWithAggregatesFilter<"HostelStudent"> | $Enums.Status
    studentCheckInDate?: DateTimeWithAggregatesFilter<"HostelStudent"> | Date | string
    studentCheckOutDate?: DateTimeNullableWithAggregatesFilter<"HostelStudent"> | Date | string | null
    studentGuardianName?: StringWithAggregatesFilter<"HostelStudent"> | string
    studentGuardianPhone?: StringWithAggregatesFilter<"HostelStudent"> | string
    studentGuardianAddress?: StringWithAggregatesFilter<"HostelStudent"> | string
    studentGuardianEmail?: StringNullableWithAggregatesFilter<"HostelStudent"> | string | null
    studentGuardianRelation?: StringWithAggregatesFilter<"HostelStudent"> | string
    studentDocuments?: StringNullableListFilter<"HostelStudent">
    createdAt?: DateTimeWithAggregatesFilter<"HostelStudent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HostelStudent"> | Date | string
    hostelId?: StringWithAggregatesFilter<"HostelStudent"> | string
    academicYear?: IntWithAggregatesFilter<"HostelStudent"> | number
    authId?: StringWithAggregatesFilter<"HostelStudent"> | string
  }

  export type HostelRoomWhereInput = {
    AND?: HostelRoomWhereInput | HostelRoomWhereInput[]
    OR?: HostelRoomWhereInput[]
    NOT?: HostelRoomWhereInput | HostelRoomWhereInput[]
    id?: IntFilter<"HostelRoom"> | number
    roomId?: StringFilter<"HostelRoom"> | string
    roomNumber?: StringFilter<"HostelRoom"> | string
    roomCapacity?: StringFilter<"HostelRoom"> | string
    roomFloor?: StringFilter<"HostelRoom"> | string
    roomType?: EnumRoomTypeFilter<"HostelRoom"> | $Enums.RoomType
    roomPricePerMonth?: StringFilter<"HostelRoom"> | string
    roomBuilding?: StringFilter<"HostelRoom"> | string
    createdAt?: DateTimeFilter<"HostelRoom"> | Date | string
    updatedAt?: DateTimeFilter<"HostelRoom"> | Date | string
    hostelId?: StringFilter<"HostelRoom"> | string
    academicYear?: IntFilter<"HostelRoom"> | number
  }

  export type HostelRoomOrderByWithRelationInput = {
    id?: SortOrder
    roomId?: SortOrder
    roomNumber?: SortOrder
    roomCapacity?: SortOrder
    roomFloor?: SortOrder
    roomType?: SortOrder
    roomPricePerMonth?: SortOrder
    roomBuilding?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelRoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    roomId?: string
    roomNumber_hostelId?: HostelRoomRoomNumberHostelIdCompoundUniqueInput
    AND?: HostelRoomWhereInput | HostelRoomWhereInput[]
    OR?: HostelRoomWhereInput[]
    NOT?: HostelRoomWhereInput | HostelRoomWhereInput[]
    roomNumber?: StringFilter<"HostelRoom"> | string
    roomCapacity?: StringFilter<"HostelRoom"> | string
    roomFloor?: StringFilter<"HostelRoom"> | string
    roomType?: EnumRoomTypeFilter<"HostelRoom"> | $Enums.RoomType
    roomPricePerMonth?: StringFilter<"HostelRoom"> | string
    roomBuilding?: StringFilter<"HostelRoom"> | string
    createdAt?: DateTimeFilter<"HostelRoom"> | Date | string
    updatedAt?: DateTimeFilter<"HostelRoom"> | Date | string
    hostelId?: StringFilter<"HostelRoom"> | string
    academicYear?: IntFilter<"HostelRoom"> | number
  }, "id" | "roomId" | "roomNumber_hostelId">

  export type HostelRoomOrderByWithAggregationInput = {
    id?: SortOrder
    roomId?: SortOrder
    roomNumber?: SortOrder
    roomCapacity?: SortOrder
    roomFloor?: SortOrder
    roomType?: SortOrder
    roomPricePerMonth?: SortOrder
    roomBuilding?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
    _count?: HostelRoomCountOrderByAggregateInput
    _avg?: HostelRoomAvgOrderByAggregateInput
    _max?: HostelRoomMaxOrderByAggregateInput
    _min?: HostelRoomMinOrderByAggregateInput
    _sum?: HostelRoomSumOrderByAggregateInput
  }

  export type HostelRoomScalarWhereWithAggregatesInput = {
    AND?: HostelRoomScalarWhereWithAggregatesInput | HostelRoomScalarWhereWithAggregatesInput[]
    OR?: HostelRoomScalarWhereWithAggregatesInput[]
    NOT?: HostelRoomScalarWhereWithAggregatesInput | HostelRoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HostelRoom"> | number
    roomId?: StringWithAggregatesFilter<"HostelRoom"> | string
    roomNumber?: StringWithAggregatesFilter<"HostelRoom"> | string
    roomCapacity?: StringWithAggregatesFilter<"HostelRoom"> | string
    roomFloor?: StringWithAggregatesFilter<"HostelRoom"> | string
    roomType?: EnumRoomTypeWithAggregatesFilter<"HostelRoom"> | $Enums.RoomType
    roomPricePerMonth?: StringWithAggregatesFilter<"HostelRoom"> | string
    roomBuilding?: StringWithAggregatesFilter<"HostelRoom"> | string
    createdAt?: DateTimeWithAggregatesFilter<"HostelRoom"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HostelRoom"> | Date | string
    hostelId?: StringWithAggregatesFilter<"HostelRoom"> | string
    academicYear?: IntWithAggregatesFilter<"HostelRoom"> | number
  }

  export type SystemCreateInput = {
    systemId?: string
    systemName: string
    systemEmail: string
    sytemMaintenanceMode?: boolean
    SMTPHost?: string | null
    SMTPPort?: number | null
    SMTPUser?: string | null
    SMTPPassword?: string | null
    passwordPolicy?: boolean
    twoFactorAuth?: boolean
    sessionDuration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type SystemUncheckedCreateInput = {
    id?: number
    systemId?: string
    systemName: string
    systemEmail: string
    sytemMaintenanceMode?: boolean
    SMTPHost?: string | null
    SMTPPort?: number | null
    SMTPUser?: string | null
    SMTPPassword?: string | null
    passwordPolicy?: boolean
    twoFactorAuth?: boolean
    sessionDuration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type SystemUpdateInput = {
    systemId?: StringFieldUpdateOperationsInput | string
    systemName?: StringFieldUpdateOperationsInput | string
    systemEmail?: StringFieldUpdateOperationsInput | string
    sytemMaintenanceMode?: BoolFieldUpdateOperationsInput | boolean
    SMTPHost?: NullableStringFieldUpdateOperationsInput | string | null
    SMTPPort?: NullableIntFieldUpdateOperationsInput | number | null
    SMTPUser?: NullableStringFieldUpdateOperationsInput | string | null
    SMTPPassword?: NullableStringFieldUpdateOperationsInput | string | null
    passwordPolicy?: BoolFieldUpdateOperationsInput | boolean
    twoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    sessionDuration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type SystemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    systemId?: StringFieldUpdateOperationsInput | string
    systemName?: StringFieldUpdateOperationsInput | string
    systemEmail?: StringFieldUpdateOperationsInput | string
    sytemMaintenanceMode?: BoolFieldUpdateOperationsInput | boolean
    SMTPHost?: NullableStringFieldUpdateOperationsInput | string | null
    SMTPPort?: NullableIntFieldUpdateOperationsInput | number | null
    SMTPUser?: NullableStringFieldUpdateOperationsInput | string | null
    SMTPPassword?: NullableStringFieldUpdateOperationsInput | string | null
    passwordPolicy?: BoolFieldUpdateOperationsInput | boolean
    twoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    sessionDuration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type SystemCreateManyInput = {
    id?: number
    systemId?: string
    systemName: string
    systemEmail: string
    sytemMaintenanceMode?: boolean
    SMTPHost?: string | null
    SMTPPort?: number | null
    SMTPUser?: string | null
    SMTPPassword?: string | null
    passwordPolicy?: boolean
    twoFactorAuth?: boolean
    sessionDuration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type SystemUpdateManyMutationInput = {
    systemId?: StringFieldUpdateOperationsInput | string
    systemName?: StringFieldUpdateOperationsInput | string
    systemEmail?: StringFieldUpdateOperationsInput | string
    sytemMaintenanceMode?: BoolFieldUpdateOperationsInput | boolean
    SMTPHost?: NullableStringFieldUpdateOperationsInput | string | null
    SMTPPort?: NullableIntFieldUpdateOperationsInput | number | null
    SMTPUser?: NullableStringFieldUpdateOperationsInput | string | null
    SMTPPassword?: NullableStringFieldUpdateOperationsInput | string | null
    passwordPolicy?: BoolFieldUpdateOperationsInput | boolean
    twoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    sessionDuration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type SystemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    systemId?: StringFieldUpdateOperationsInput | string
    systemName?: StringFieldUpdateOperationsInput | string
    systemEmail?: StringFieldUpdateOperationsInput | string
    sytemMaintenanceMode?: BoolFieldUpdateOperationsInput | boolean
    SMTPHost?: NullableStringFieldUpdateOperationsInput | string | null
    SMTPPort?: NullableIntFieldUpdateOperationsInput | number | null
    SMTPUser?: NullableStringFieldUpdateOperationsInput | string | null
    SMTPPassword?: NullableStringFieldUpdateOperationsInput | string | null
    passwordPolicy?: BoolFieldUpdateOperationsInput | boolean
    twoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    sessionDuration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type AuthCreateInput = {
    authId?: string
    userInEmail: string
    userInPhone: string
    userInName: string
    userInPassword: string
    isVerified?: boolean
    isRequestApproved?: boolean
    role?: $Enums.Role
    hostelId?: string | null
    academicYear: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuthUncheckedCreateInput = {
    id?: number
    authId?: string
    userInEmail: string
    userInPhone: string
    userInName: string
    userInPassword: string
    isVerified?: boolean
    isRequestApproved?: boolean
    role?: $Enums.Role
    hostelId?: string | null
    academicYear: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuthUpdateInput = {
    authId?: StringFieldUpdateOperationsInput | string
    userInEmail?: StringFieldUpdateOperationsInput | string
    userInPhone?: StringFieldUpdateOperationsInput | string
    userInName?: StringFieldUpdateOperationsInput | string
    userInPassword?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isRequestApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hostelId?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    authId?: StringFieldUpdateOperationsInput | string
    userInEmail?: StringFieldUpdateOperationsInput | string
    userInPhone?: StringFieldUpdateOperationsInput | string
    userInName?: StringFieldUpdateOperationsInput | string
    userInPassword?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isRequestApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hostelId?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthCreateManyInput = {
    id?: number
    authId?: string
    userInEmail: string
    userInPhone: string
    userInName: string
    userInPassword: string
    isVerified?: boolean
    isRequestApproved?: boolean
    role?: $Enums.Role
    hostelId?: string | null
    academicYear: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuthUpdateManyMutationInput = {
    authId?: StringFieldUpdateOperationsInput | string
    userInEmail?: StringFieldUpdateOperationsInput | string
    userInPhone?: StringFieldUpdateOperationsInput | string
    userInName?: StringFieldUpdateOperationsInput | string
    userInPassword?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isRequestApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hostelId?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    authId?: StringFieldUpdateOperationsInput | string
    userInEmail?: StringFieldUpdateOperationsInput | string
    userInPhone?: StringFieldUpdateOperationsInput | string
    userInName?: StringFieldUpdateOperationsInput | string
    userInPassword?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isRequestApproved?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hostelId?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostelCreateInput = {
    hostelId?: string
    hostelNumber: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    hostelExpiryRemainingTime: number
    hostelExpiryDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    userInId: string
    authId: string
    admins?: AdminCreateNestedManyWithoutHostelInput
    reportsComplaints?: ReportsComplaintsCreateNestedManyWithoutHostelInput
  }

  export type HostelUncheckedCreateInput = {
    id?: number
    hostelId?: string
    hostelNumber: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    hostelExpiryRemainingTime: number
    hostelExpiryDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    userInId: string
    authId: string
    admins?: AdminUncheckedCreateNestedManyWithoutHostelInput
    reportsComplaints?: ReportsComplaintsUncheckedCreateNestedManyWithoutHostelInput
  }

  export type HostelUpdateInput = {
    hostelId?: StringFieldUpdateOperationsInput | string
    hostelNumber?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    hostelExpiryRemainingTime?: IntFieldUpdateOperationsInput | number
    hostelExpiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    userInId?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    admins?: AdminUpdateManyWithoutHostelNestedInput
    reportsComplaints?: ReportsComplaintsUpdateManyWithoutHostelNestedInput
  }

  export type HostelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostelId?: StringFieldUpdateOperationsInput | string
    hostelNumber?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    hostelExpiryRemainingTime?: IntFieldUpdateOperationsInput | number
    hostelExpiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    userInId?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    admins?: AdminUncheckedUpdateManyWithoutHostelNestedInput
    reportsComplaints?: ReportsComplaintsUncheckedUpdateManyWithoutHostelNestedInput
  }

  export type HostelCreateManyInput = {
    id?: number
    hostelId?: string
    hostelNumber: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    hostelExpiryRemainingTime: number
    hostelExpiryDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    userInId: string
    authId: string
  }

  export type HostelUpdateManyMutationInput = {
    hostelId?: StringFieldUpdateOperationsInput | string
    hostelNumber?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    hostelExpiryRemainingTime?: IntFieldUpdateOperationsInput | number
    hostelExpiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    userInId?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
  }

  export type HostelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostelId?: StringFieldUpdateOperationsInput | string
    hostelNumber?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    hostelExpiryRemainingTime?: IntFieldUpdateOperationsInput | number
    hostelExpiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    userInId?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateInput = {
    adminId?: string
    adminName: string
    adminEmail: string
    adminPhone: string
    authId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    hostel: HostelCreateNestedOneWithoutAdminsInput
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    adminId?: string
    adminName: string
    adminEmail: string
    adminPhone: string
    authId: string
    hostelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type AdminUpdateInput = {
    adminId?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPhone?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    hostel?: HostelUpdateOneRequiredWithoutAdminsNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPhone?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    hostelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateManyInput = {
    id?: number
    adminId?: string
    adminName: string
    adminEmail: string
    adminPhone: string
    authId: string
    hostelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type AdminUpdateManyMutationInput = {
    adminId?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPhone?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPhone?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    hostelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type HostelRequestCreateInput = {
    hostelRequestId?: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    adminName: string
    adminEmail: string
    adminPhone: string
    adminPassword: string
    adminAddress: string
    status?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type HostelRequestUncheckedCreateInput = {
    id?: number
    hostelRequestId?: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    adminName: string
    adminEmail: string
    adminPhone: string
    adminPassword: string
    adminAddress: string
    status?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type HostelRequestUpdateInput = {
    hostelRequestId?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPhone?: StringFieldUpdateOperationsInput | string
    adminPassword?: StringFieldUpdateOperationsInput | string
    adminAddress?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type HostelRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostelRequestId?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPhone?: StringFieldUpdateOperationsInput | string
    adminPassword?: StringFieldUpdateOperationsInput | string
    adminAddress?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type HostelRequestCreateManyInput = {
    id?: number
    hostelRequestId?: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    adminName: string
    adminEmail: string
    adminPhone: string
    adminPassword: string
    adminAddress: string
    status?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type HostelRequestUpdateManyMutationInput = {
    hostelRequestId?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPhone?: StringFieldUpdateOperationsInput | string
    adminPassword?: StringFieldUpdateOperationsInput | string
    adminAddress?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type HostelRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostelRequestId?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPhone?: StringFieldUpdateOperationsInput | string
    adminPassword?: StringFieldUpdateOperationsInput | string
    adminAddress?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type ReportsComplaintsCreateInput = {
    reportId?: string
    reportTitle: string
    reportDescription: string
    reportType?: $Enums.ReportType
    reportStatus?: $Enums.Status
    reportPriority?: $Enums.Priority
    reporterUserType?: $Enums.Role
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    hostel: HostelCreateNestedOneWithoutReportsComplaintsInput
    reportReplies?: ReportReplyCreateNestedManyWithoutReportComplaintInput
  }

  export type ReportsComplaintsUncheckedCreateInput = {
    id?: number
    reportId?: string
    reportTitle: string
    reportDescription: string
    reportType?: $Enums.ReportType
    reportStatus?: $Enums.Status
    reportPriority?: $Enums.Priority
    reporterUserType?: $Enums.Role
    userId?: string | null
    hostelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    reportReplies?: ReportReplyUncheckedCreateNestedManyWithoutReportComplaintInput
  }

  export type ReportsComplaintsUpdateInput = {
    reportId?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportDescription?: StringFieldUpdateOperationsInput | string
    reportType?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    reportStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    reportPriority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    reporterUserType?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    hostel?: HostelUpdateOneRequiredWithoutReportsComplaintsNestedInput
    reportReplies?: ReportReplyUpdateManyWithoutReportComplaintNestedInput
  }

  export type ReportsComplaintsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportDescription?: StringFieldUpdateOperationsInput | string
    reportType?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    reportStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    reportPriority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    reporterUserType?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hostelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    reportReplies?: ReportReplyUncheckedUpdateManyWithoutReportComplaintNestedInput
  }

  export type ReportsComplaintsCreateManyInput = {
    id?: number
    reportId?: string
    reportTitle: string
    reportDescription: string
    reportType?: $Enums.ReportType
    reportStatus?: $Enums.Status
    reportPriority?: $Enums.Priority
    reporterUserType?: $Enums.Role
    userId?: string | null
    hostelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type ReportsComplaintsUpdateManyMutationInput = {
    reportId?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportDescription?: StringFieldUpdateOperationsInput | string
    reportType?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    reportStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    reportPriority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    reporterUserType?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type ReportsComplaintsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportDescription?: StringFieldUpdateOperationsInput | string
    reportType?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    reportStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    reportPriority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    reporterUserType?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hostelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type ReportReplyCreateInput = {
    replyId?: string
    replyContent: string
    replyStatus?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    reportComplaint: ReportsComplaintsCreateNestedOneWithoutReportRepliesInput
  }

  export type ReportReplyUncheckedCreateInput = {
    id?: number
    replyId?: string
    replyContent: string
    replyStatus?: $Enums.Status
    reportComplaintId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type ReportReplyUpdateInput = {
    replyId?: StringFieldUpdateOperationsInput | string
    replyContent?: StringFieldUpdateOperationsInput | string
    replyStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    reportComplaint?: ReportsComplaintsUpdateOneRequiredWithoutReportRepliesNestedInput
  }

  export type ReportReplyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyId?: StringFieldUpdateOperationsInput | string
    replyContent?: StringFieldUpdateOperationsInput | string
    replyStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    reportComplaintId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type ReportReplyCreateManyInput = {
    id?: number
    replyId?: string
    replyContent: string
    replyStatus?: $Enums.Status
    reportComplaintId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type ReportReplyUpdateManyMutationInput = {
    replyId?: StringFieldUpdateOperationsInput | string
    replyContent?: StringFieldUpdateOperationsInput | string
    replyStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type ReportReplyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyId?: StringFieldUpdateOperationsInput | string
    replyContent?: StringFieldUpdateOperationsInput | string
    replyStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    reportComplaintId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationCreateInput = {
    notificationId?: string
    notificationTitle: string
    notificationMessage: string
    notificationReadUserIds?: NotificationCreatenotificationReadUserIdsInput | string[]
    notificationType?: $Enums.NotificationType
    notificationStatus?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    notificationId?: string
    notificationTitle: string
    notificationMessage: string
    notificationReadUserIds?: NotificationCreatenotificationReadUserIdsInput | string[]
    notificationType?: $Enums.NotificationType
    notificationStatus?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type NotificationUpdateInput = {
    notificationId?: StringFieldUpdateOperationsInput | string
    notificationTitle?: StringFieldUpdateOperationsInput | string
    notificationMessage?: StringFieldUpdateOperationsInput | string
    notificationReadUserIds?: NotificationUpdatenotificationReadUserIdsInput | string[]
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    notificationStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    notificationId?: StringFieldUpdateOperationsInput | string
    notificationTitle?: StringFieldUpdateOperationsInput | string
    notificationMessage?: StringFieldUpdateOperationsInput | string
    notificationReadUserIds?: NotificationUpdatenotificationReadUserIdsInput | string[]
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    notificationStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationCreateManyInput = {
    id?: number
    notificationId?: string
    notificationTitle: string
    notificationMessage: string
    notificationReadUserIds?: NotificationCreatenotificationReadUserIdsInput | string[]
    notificationType?: $Enums.NotificationType
    notificationStatus?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type NotificationUpdateManyMutationInput = {
    notificationId?: StringFieldUpdateOperationsInput | string
    notificationTitle?: StringFieldUpdateOperationsInput | string
    notificationMessage?: StringFieldUpdateOperationsInput | string
    notificationReadUserIds?: NotificationUpdatenotificationReadUserIdsInput | string[]
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    notificationStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    notificationId?: StringFieldUpdateOperationsInput | string
    notificationTitle?: StringFieldUpdateOperationsInput | string
    notificationMessage?: StringFieldUpdateOperationsInput | string
    notificationReadUserIds?: NotificationUpdatenotificationReadUserIdsInput | string[]
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    notificationStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentCreateInput = {
    paymentId?: string
    paymentAmount: number
    paymentHostelPreviousExpiryTime: number
    paymentAddedTime: number
    paymentDescription: string
    paymentStatus?: $Enums.Status
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    hostelId: string
    creditRemainingAmount: number
    updatedAt?: Date | string
    academicYear: number
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    paymentId?: string
    paymentAmount: number
    paymentHostelPreviousExpiryTime: number
    paymentAddedTime: number
    paymentDescription: string
    paymentStatus?: $Enums.Status
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    hostelId: string
    creditRemainingAmount: number
    updatedAt?: Date | string
    academicYear: number
  }

  export type PaymentUpdateInput = {
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentHostelPreviousExpiryTime?: IntFieldUpdateOperationsInput | number
    paymentAddedTime?: IntFieldUpdateOperationsInput | number
    paymentDescription?: StringFieldUpdateOperationsInput | string
    paymentStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    creditRemainingAmount?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentHostelPreviousExpiryTime?: IntFieldUpdateOperationsInput | number
    paymentAddedTime?: IntFieldUpdateOperationsInput | number
    paymentDescription?: StringFieldUpdateOperationsInput | string
    paymentStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    creditRemainingAmount?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentCreateManyInput = {
    id?: number
    paymentId?: string
    paymentAmount: number
    paymentHostelPreviousExpiryTime: number
    paymentAddedTime: number
    paymentDescription: string
    paymentStatus?: $Enums.Status
    paymentMethod?: $Enums.PaymentMethod
    createdAt?: Date | string
    hostelId: string
    creditRemainingAmount: number
    updatedAt?: Date | string
    academicYear: number
  }

  export type PaymentUpdateManyMutationInput = {
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentHostelPreviousExpiryTime?: IntFieldUpdateOperationsInput | number
    paymentAddedTime?: IntFieldUpdateOperationsInput | number
    paymentDescription?: StringFieldUpdateOperationsInput | string
    paymentStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    creditRemainingAmount?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentAmount?: FloatFieldUpdateOperationsInput | number
    paymentHostelPreviousExpiryTime?: IntFieldUpdateOperationsInput | number
    paymentAddedTime?: IntFieldUpdateOperationsInput | number
    paymentDescription?: StringFieldUpdateOperationsInput | string
    paymentStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    creditRemainingAmount?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type HostelStudentCreateInput = {
    studentId?: string
    studentGeneratedId: string
    studentName: string
    studentEmail: string
    studentPhone: string
    studentGender?: $Enums.Gender
    studentAddress?: string | null
    studentRoomNumber?: string | null
    studentBedNumber?: string | null
    status?: $Enums.Status
    studentCheckInDate: Date | string
    studentCheckOutDate?: Date | string | null
    studentGuardianName: string
    studentGuardianPhone: string
    studentGuardianAddress: string
    studentGuardianEmail?: string | null
    studentGuardianRelation: string
    studentDocuments?: HostelStudentCreatestudentDocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    hostelId: string
    academicYear: number
    authId: string
  }

  export type HostelStudentUncheckedCreateInput = {
    id?: number
    studentId?: string
    studentGeneratedId: string
    studentName: string
    studentEmail: string
    studentPhone: string
    studentGender?: $Enums.Gender
    studentAddress?: string | null
    studentRoomNumber?: string | null
    studentBedNumber?: string | null
    status?: $Enums.Status
    studentCheckInDate: Date | string
    studentCheckOutDate?: Date | string | null
    studentGuardianName: string
    studentGuardianPhone: string
    studentGuardianAddress: string
    studentGuardianEmail?: string | null
    studentGuardianRelation: string
    studentDocuments?: HostelStudentCreatestudentDocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    hostelId: string
    academicYear: number
    authId: string
  }

  export type HostelStudentUpdateInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    studentGeneratedId?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    studentGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    studentAddress?: NullableStringFieldUpdateOperationsInput | string | null
    studentRoomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    studentBedNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    studentCheckInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studentCheckOutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentGuardianName?: StringFieldUpdateOperationsInput | string
    studentGuardianPhone?: StringFieldUpdateOperationsInput | string
    studentGuardianAddress?: StringFieldUpdateOperationsInput | string
    studentGuardianEmail?: NullableStringFieldUpdateOperationsInput | string | null
    studentGuardianRelation?: StringFieldUpdateOperationsInput | string
    studentDocuments?: HostelStudentUpdatestudentDocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
    authId?: StringFieldUpdateOperationsInput | string
  }

  export type HostelStudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    studentGeneratedId?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    studentGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    studentAddress?: NullableStringFieldUpdateOperationsInput | string | null
    studentRoomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    studentBedNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    studentCheckInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studentCheckOutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentGuardianName?: StringFieldUpdateOperationsInput | string
    studentGuardianPhone?: StringFieldUpdateOperationsInput | string
    studentGuardianAddress?: StringFieldUpdateOperationsInput | string
    studentGuardianEmail?: NullableStringFieldUpdateOperationsInput | string | null
    studentGuardianRelation?: StringFieldUpdateOperationsInput | string
    studentDocuments?: HostelStudentUpdatestudentDocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
    authId?: StringFieldUpdateOperationsInput | string
  }

  export type HostelStudentCreateManyInput = {
    id?: number
    studentId?: string
    studentGeneratedId: string
    studentName: string
    studentEmail: string
    studentPhone: string
    studentGender?: $Enums.Gender
    studentAddress?: string | null
    studentRoomNumber?: string | null
    studentBedNumber?: string | null
    status?: $Enums.Status
    studentCheckInDate: Date | string
    studentCheckOutDate?: Date | string | null
    studentGuardianName: string
    studentGuardianPhone: string
    studentGuardianAddress: string
    studentGuardianEmail?: string | null
    studentGuardianRelation: string
    studentDocuments?: HostelStudentCreatestudentDocumentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    hostelId: string
    academicYear: number
    authId: string
  }

  export type HostelStudentUpdateManyMutationInput = {
    studentId?: StringFieldUpdateOperationsInput | string
    studentGeneratedId?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    studentGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    studentAddress?: NullableStringFieldUpdateOperationsInput | string | null
    studentRoomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    studentBedNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    studentCheckInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studentCheckOutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentGuardianName?: StringFieldUpdateOperationsInput | string
    studentGuardianPhone?: StringFieldUpdateOperationsInput | string
    studentGuardianAddress?: StringFieldUpdateOperationsInput | string
    studentGuardianEmail?: NullableStringFieldUpdateOperationsInput | string | null
    studentGuardianRelation?: StringFieldUpdateOperationsInput | string
    studentDocuments?: HostelStudentUpdatestudentDocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
    authId?: StringFieldUpdateOperationsInput | string
  }

  export type HostelStudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
    studentGeneratedId?: StringFieldUpdateOperationsInput | string
    studentName?: StringFieldUpdateOperationsInput | string
    studentEmail?: StringFieldUpdateOperationsInput | string
    studentPhone?: StringFieldUpdateOperationsInput | string
    studentGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    studentAddress?: NullableStringFieldUpdateOperationsInput | string | null
    studentRoomNumber?: NullableStringFieldUpdateOperationsInput | string | null
    studentBedNumber?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    studentCheckInDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studentCheckOutDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentGuardianName?: StringFieldUpdateOperationsInput | string
    studentGuardianPhone?: StringFieldUpdateOperationsInput | string
    studentGuardianAddress?: StringFieldUpdateOperationsInput | string
    studentGuardianEmail?: NullableStringFieldUpdateOperationsInput | string | null
    studentGuardianRelation?: StringFieldUpdateOperationsInput | string
    studentDocuments?: HostelStudentUpdatestudentDocumentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
    authId?: StringFieldUpdateOperationsInput | string
  }

  export type HostelRoomCreateInput = {
    roomId?: string
    roomNumber: string
    roomCapacity: string
    roomFloor: string
    roomType?: $Enums.RoomType
    roomPricePerMonth: string
    roomBuilding: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hostelId: string
    academicYear: number
  }

  export type HostelRoomUncheckedCreateInput = {
    id?: number
    roomId?: string
    roomNumber: string
    roomCapacity: string
    roomFloor: string
    roomType?: $Enums.RoomType
    roomPricePerMonth: string
    roomBuilding: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hostelId: string
    academicYear: number
  }

  export type HostelRoomUpdateInput = {
    roomId?: StringFieldUpdateOperationsInput | string
    roomNumber?: StringFieldUpdateOperationsInput | string
    roomCapacity?: StringFieldUpdateOperationsInput | string
    roomFloor?: StringFieldUpdateOperationsInput | string
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    roomPricePerMonth?: StringFieldUpdateOperationsInput | string
    roomBuilding?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type HostelRoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: StringFieldUpdateOperationsInput | string
    roomNumber?: StringFieldUpdateOperationsInput | string
    roomCapacity?: StringFieldUpdateOperationsInput | string
    roomFloor?: StringFieldUpdateOperationsInput | string
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    roomPricePerMonth?: StringFieldUpdateOperationsInput | string
    roomBuilding?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type HostelRoomCreateManyInput = {
    id?: number
    roomId?: string
    roomNumber: string
    roomCapacity: string
    roomFloor: string
    roomType?: $Enums.RoomType
    roomPricePerMonth: string
    roomBuilding: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hostelId: string
    academicYear: number
  }

  export type HostelRoomUpdateManyMutationInput = {
    roomId?: StringFieldUpdateOperationsInput | string
    roomNumber?: StringFieldUpdateOperationsInput | string
    roomCapacity?: StringFieldUpdateOperationsInput | string
    roomFloor?: StringFieldUpdateOperationsInput | string
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    roomPricePerMonth?: StringFieldUpdateOperationsInput | string
    roomBuilding?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type HostelRoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: StringFieldUpdateOperationsInput | string
    roomNumber?: StringFieldUpdateOperationsInput | string
    roomCapacity?: StringFieldUpdateOperationsInput | string
    roomFloor?: StringFieldUpdateOperationsInput | string
    roomType?: EnumRoomTypeFieldUpdateOperationsInput | $Enums.RoomType
    roomPricePerMonth?: StringFieldUpdateOperationsInput | string
    roomBuilding?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostelId?: StringFieldUpdateOperationsInput | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SystemCountOrderByAggregateInput = {
    id?: SortOrder
    systemId?: SortOrder
    systemName?: SortOrder
    systemEmail?: SortOrder
    sytemMaintenanceMode?: SortOrder
    SMTPHost?: SortOrder
    SMTPPort?: SortOrder
    SMTPUser?: SortOrder
    SMTPPassword?: SortOrder
    passwordPolicy?: SortOrder
    twoFactorAuth?: SortOrder
    sessionDuration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type SystemAvgOrderByAggregateInput = {
    id?: SortOrder
    SMTPPort?: SortOrder
    sessionDuration?: SortOrder
    academicYear?: SortOrder
  }

  export type SystemMaxOrderByAggregateInput = {
    id?: SortOrder
    systemId?: SortOrder
    systemName?: SortOrder
    systemEmail?: SortOrder
    sytemMaintenanceMode?: SortOrder
    SMTPHost?: SortOrder
    SMTPPort?: SortOrder
    SMTPUser?: SortOrder
    SMTPPassword?: SortOrder
    passwordPolicy?: SortOrder
    twoFactorAuth?: SortOrder
    sessionDuration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type SystemMinOrderByAggregateInput = {
    id?: SortOrder
    systemId?: SortOrder
    systemName?: SortOrder
    systemEmail?: SortOrder
    sytemMaintenanceMode?: SortOrder
    SMTPHost?: SortOrder
    SMTPPort?: SortOrder
    SMTPUser?: SortOrder
    SMTPPassword?: SortOrder
    passwordPolicy?: SortOrder
    twoFactorAuth?: SortOrder
    sessionDuration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type SystemSumOrderByAggregateInput = {
    id?: SortOrder
    SMTPPort?: SortOrder
    sessionDuration?: SortOrder
    academicYear?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type AuthUserInEmailHostelIdCompoundUniqueInput = {
    userInEmail: string
    hostelId: string
  }

  export type AuthUserInPhoneHostelIdCompoundUniqueInput = {
    userInPhone: string
    hostelId: string
  }

  export type AuthCountOrderByAggregateInput = {
    id?: SortOrder
    authId?: SortOrder
    userInEmail?: SortOrder
    userInPhone?: SortOrder
    userInName?: SortOrder
    userInPassword?: SortOrder
    isVerified?: SortOrder
    isRequestApproved?: SortOrder
    role?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuthAvgOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type AuthMaxOrderByAggregateInput = {
    id?: SortOrder
    authId?: SortOrder
    userInEmail?: SortOrder
    userInPhone?: SortOrder
    userInName?: SortOrder
    userInPassword?: SortOrder
    isVerified?: SortOrder
    isRequestApproved?: SortOrder
    role?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuthMinOrderByAggregateInput = {
    id?: SortOrder
    authId?: SortOrder
    userInEmail?: SortOrder
    userInPhone?: SortOrder
    userInName?: SortOrder
    userInPassword?: SortOrder
    isVerified?: SortOrder
    isRequestApproved?: SortOrder
    role?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuthSumOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type AdminListRelationFilter = {
    every?: AdminWhereInput
    some?: AdminWhereInput
    none?: AdminWhereInput
  }

  export type ReportsComplaintsListRelationFilter = {
    every?: ReportsComplaintsWhereInput
    some?: ReportsComplaintsWhereInput
    none?: ReportsComplaintsWhereInput
  }

  export type AdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportsComplaintsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HostelCountOrderByAggregateInput = {
    id?: SortOrder
    hostelId?: SortOrder
    hostelNumber?: SortOrder
    hostelName?: SortOrder
    hostelAddress?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    hostelExpiryRemainingTime?: SortOrder
    hostelExpiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    userInId?: SortOrder
    authId?: SortOrder
  }

  export type HostelAvgOrderByAggregateInput = {
    id?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    hostelExpiryRemainingTime?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelMaxOrderByAggregateInput = {
    id?: SortOrder
    hostelId?: SortOrder
    hostelNumber?: SortOrder
    hostelName?: SortOrder
    hostelAddress?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    hostelExpiryRemainingTime?: SortOrder
    hostelExpiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    userInId?: SortOrder
    authId?: SortOrder
  }

  export type HostelMinOrderByAggregateInput = {
    id?: SortOrder
    hostelId?: SortOrder
    hostelNumber?: SortOrder
    hostelName?: SortOrder
    hostelAddress?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    hostelExpiryRemainingTime?: SortOrder
    hostelExpiryDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
    userInId?: SortOrder
    authId?: SortOrder
  }

  export type HostelSumOrderByAggregateInput = {
    id?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    hostelExpiryRemainingTime?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelScalarRelationFilter = {
    is?: HostelWhereInput
    isNot?: HostelWhereInput
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    adminPhone?: SortOrder
    authId?: SortOrder
    hostelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    adminPhone?: SortOrder
    authId?: SortOrder
    hostelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    adminPhone?: SortOrder
    authId?: SortOrder
    hostelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type HostelRequestCountOrderByAggregateInput = {
    id?: SortOrder
    hostelRequestId?: SortOrder
    hostelName?: SortOrder
    hostelAddress?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    adminPhone?: SortOrder
    adminPassword?: SortOrder
    adminAddress?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    hostelRequestId?: SortOrder
    hostelName?: SortOrder
    hostelAddress?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    adminPhone?: SortOrder
    adminPassword?: SortOrder
    adminAddress?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelRequestMinOrderByAggregateInput = {
    id?: SortOrder
    hostelRequestId?: SortOrder
    hostelName?: SortOrder
    hostelAddress?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    adminName?: SortOrder
    adminEmail?: SortOrder
    adminPhone?: SortOrder
    adminPassword?: SortOrder
    adminAddress?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelRequestSumOrderByAggregateInput = {
    id?: SortOrder
    totalRooms?: SortOrder
    totalBeds?: SortOrder
    totalFloors?: SortOrder
    academicYear?: SortOrder
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type EnumReportTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportType | EnumReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReportType[] | ListEnumReportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportType[] | ListEnumReportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReportTypeFilter<$PrismaModel> | $Enums.ReportType
  }

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type ReportReplyListRelationFilter = {
    every?: ReportReplyWhereInput
    some?: ReportReplyWhereInput
    none?: ReportReplyWhereInput
  }

  export type ReportReplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportsComplaintsCountOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    reportTitle?: SortOrder
    reportDescription?: SortOrder
    reportType?: SortOrder
    reportStatus?: SortOrder
    reportPriority?: SortOrder
    reporterUserType?: SortOrder
    userId?: SortOrder
    hostelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type ReportsComplaintsAvgOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type ReportsComplaintsMaxOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    reportTitle?: SortOrder
    reportDescription?: SortOrder
    reportType?: SortOrder
    reportStatus?: SortOrder
    reportPriority?: SortOrder
    reporterUserType?: SortOrder
    userId?: SortOrder
    hostelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type ReportsComplaintsMinOrderByAggregateInput = {
    id?: SortOrder
    reportId?: SortOrder
    reportTitle?: SortOrder
    reportDescription?: SortOrder
    reportType?: SortOrder
    reportStatus?: SortOrder
    reportPriority?: SortOrder
    reporterUserType?: SortOrder
    userId?: SortOrder
    hostelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type ReportsComplaintsSumOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type EnumReportTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportType | EnumReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReportType[] | ListEnumReportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportType[] | ListEnumReportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReportTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReportType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportTypeFilter<$PrismaModel>
    _max?: NestedEnumReportTypeFilter<$PrismaModel>
  }

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type ReportsComplaintsScalarRelationFilter = {
    is?: ReportsComplaintsWhereInput
    isNot?: ReportsComplaintsWhereInput
  }

  export type ReportReplyCountOrderByAggregateInput = {
    id?: SortOrder
    replyId?: SortOrder
    replyContent?: SortOrder
    replyStatus?: SortOrder
    reportComplaintId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type ReportReplyAvgOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type ReportReplyMaxOrderByAggregateInput = {
    id?: SortOrder
    replyId?: SortOrder
    replyContent?: SortOrder
    replyStatus?: SortOrder
    reportComplaintId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type ReportReplyMinOrderByAggregateInput = {
    id?: SortOrder
    replyId?: SortOrder
    replyContent?: SortOrder
    replyStatus?: SortOrder
    reportComplaintId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type ReportReplySumOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    notificationTitle?: SortOrder
    notificationMessage?: SortOrder
    notificationReadUserIds?: SortOrder
    notificationType?: SortOrder
    notificationStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    notificationTitle?: SortOrder
    notificationMessage?: SortOrder
    notificationType?: SortOrder
    notificationStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    notificationTitle?: SortOrder
    notificationMessage?: SortOrder
    notificationType?: SortOrder
    notificationStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    paymentAmount?: SortOrder
    paymentHostelPreviousExpiryTime?: SortOrder
    paymentAddedTime?: SortOrder
    paymentDescription?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    hostelId?: SortOrder
    creditRemainingAmount?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    paymentAmount?: SortOrder
    paymentHostelPreviousExpiryTime?: SortOrder
    paymentAddedTime?: SortOrder
    creditRemainingAmount?: SortOrder
    academicYear?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    paymentAmount?: SortOrder
    paymentHostelPreviousExpiryTime?: SortOrder
    paymentAddedTime?: SortOrder
    paymentDescription?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    hostelId?: SortOrder
    creditRemainingAmount?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    paymentAmount?: SortOrder
    paymentHostelPreviousExpiryTime?: SortOrder
    paymentAddedTime?: SortOrder
    paymentDescription?: SortOrder
    paymentStatus?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    hostelId?: SortOrder
    creditRemainingAmount?: SortOrder
    updatedAt?: SortOrder
    academicYear?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    paymentAmount?: SortOrder
    paymentHostelPreviousExpiryTime?: SortOrder
    paymentAddedTime?: SortOrder
    creditRemainingAmount?: SortOrder
    academicYear?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type HostelStudentStudentEmailHostelIdCompoundUniqueInput = {
    studentEmail: string
    hostelId: string
  }

  export type HostelStudentStudentPhoneHostelIdCompoundUniqueInput = {
    studentPhone: string
    hostelId: string
  }

  export type HostelStudentCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    studentGeneratedId?: SortOrder
    studentName?: SortOrder
    studentEmail?: SortOrder
    studentPhone?: SortOrder
    studentGender?: SortOrder
    studentAddress?: SortOrder
    studentRoomNumber?: SortOrder
    studentBedNumber?: SortOrder
    status?: SortOrder
    studentCheckInDate?: SortOrder
    studentCheckOutDate?: SortOrder
    studentGuardianName?: SortOrder
    studentGuardianPhone?: SortOrder
    studentGuardianAddress?: SortOrder
    studentGuardianEmail?: SortOrder
    studentGuardianRelation?: SortOrder
    studentDocuments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
    authId?: SortOrder
  }

  export type HostelStudentAvgOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelStudentMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    studentGeneratedId?: SortOrder
    studentName?: SortOrder
    studentEmail?: SortOrder
    studentPhone?: SortOrder
    studentGender?: SortOrder
    studentAddress?: SortOrder
    studentRoomNumber?: SortOrder
    studentBedNumber?: SortOrder
    status?: SortOrder
    studentCheckInDate?: SortOrder
    studentCheckOutDate?: SortOrder
    studentGuardianName?: SortOrder
    studentGuardianPhone?: SortOrder
    studentGuardianAddress?: SortOrder
    studentGuardianEmail?: SortOrder
    studentGuardianRelation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
    authId?: SortOrder
  }

  export type HostelStudentMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    studentGeneratedId?: SortOrder
    studentName?: SortOrder
    studentEmail?: SortOrder
    studentPhone?: SortOrder
    studentGender?: SortOrder
    studentAddress?: SortOrder
    studentRoomNumber?: SortOrder
    studentBedNumber?: SortOrder
    status?: SortOrder
    studentCheckInDate?: SortOrder
    studentCheckOutDate?: SortOrder
    studentGuardianName?: SortOrder
    studentGuardianPhone?: SortOrder
    studentGuardianAddress?: SortOrder
    studentGuardianEmail?: SortOrder
    studentGuardianRelation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
    authId?: SortOrder
  }

  export type HostelStudentSumOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRoomTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeFilter<$PrismaModel> | $Enums.RoomType
  }

  export type HostelRoomRoomNumberHostelIdCompoundUniqueInput = {
    roomNumber: string
    hostelId: string
  }

  export type HostelRoomCountOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    roomNumber?: SortOrder
    roomCapacity?: SortOrder
    roomFloor?: SortOrder
    roomType?: SortOrder
    roomPricePerMonth?: SortOrder
    roomBuilding?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelRoomAvgOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    roomNumber?: SortOrder
    roomCapacity?: SortOrder
    roomFloor?: SortOrder
    roomType?: SortOrder
    roomPricePerMonth?: SortOrder
    roomBuilding?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelRoomMinOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    roomNumber?: SortOrder
    roomCapacity?: SortOrder
    roomFloor?: SortOrder
    roomType?: SortOrder
    roomPricePerMonth?: SortOrder
    roomBuilding?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostelId?: SortOrder
    academicYear?: SortOrder
  }

  export type HostelRoomSumOrderByAggregateInput = {
    id?: SortOrder
    academicYear?: SortOrder
  }

  export type EnumRoomTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoomType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoomTypeFilter<$PrismaModel>
    _max?: NestedEnumRoomTypeFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type AdminCreateNestedManyWithoutHostelInput = {
    create?: XOR<AdminCreateWithoutHostelInput, AdminUncheckedCreateWithoutHostelInput> | AdminCreateWithoutHostelInput[] | AdminUncheckedCreateWithoutHostelInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutHostelInput | AdminCreateOrConnectWithoutHostelInput[]
    createMany?: AdminCreateManyHostelInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type ReportsComplaintsCreateNestedManyWithoutHostelInput = {
    create?: XOR<ReportsComplaintsCreateWithoutHostelInput, ReportsComplaintsUncheckedCreateWithoutHostelInput> | ReportsComplaintsCreateWithoutHostelInput[] | ReportsComplaintsUncheckedCreateWithoutHostelInput[]
    connectOrCreate?: ReportsComplaintsCreateOrConnectWithoutHostelInput | ReportsComplaintsCreateOrConnectWithoutHostelInput[]
    createMany?: ReportsComplaintsCreateManyHostelInputEnvelope
    connect?: ReportsComplaintsWhereUniqueInput | ReportsComplaintsWhereUniqueInput[]
  }

  export type AdminUncheckedCreateNestedManyWithoutHostelInput = {
    create?: XOR<AdminCreateWithoutHostelInput, AdminUncheckedCreateWithoutHostelInput> | AdminCreateWithoutHostelInput[] | AdminUncheckedCreateWithoutHostelInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutHostelInput | AdminCreateOrConnectWithoutHostelInput[]
    createMany?: AdminCreateManyHostelInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type ReportsComplaintsUncheckedCreateNestedManyWithoutHostelInput = {
    create?: XOR<ReportsComplaintsCreateWithoutHostelInput, ReportsComplaintsUncheckedCreateWithoutHostelInput> | ReportsComplaintsCreateWithoutHostelInput[] | ReportsComplaintsUncheckedCreateWithoutHostelInput[]
    connectOrCreate?: ReportsComplaintsCreateOrConnectWithoutHostelInput | ReportsComplaintsCreateOrConnectWithoutHostelInput[]
    createMany?: ReportsComplaintsCreateManyHostelInputEnvelope
    connect?: ReportsComplaintsWhereUniqueInput | ReportsComplaintsWhereUniqueInput[]
  }

  export type AdminUpdateManyWithoutHostelNestedInput = {
    create?: XOR<AdminCreateWithoutHostelInput, AdminUncheckedCreateWithoutHostelInput> | AdminCreateWithoutHostelInput[] | AdminUncheckedCreateWithoutHostelInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutHostelInput | AdminCreateOrConnectWithoutHostelInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutHostelInput | AdminUpsertWithWhereUniqueWithoutHostelInput[]
    createMany?: AdminCreateManyHostelInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutHostelInput | AdminUpdateWithWhereUniqueWithoutHostelInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutHostelInput | AdminUpdateManyWithWhereWithoutHostelInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type ReportsComplaintsUpdateManyWithoutHostelNestedInput = {
    create?: XOR<ReportsComplaintsCreateWithoutHostelInput, ReportsComplaintsUncheckedCreateWithoutHostelInput> | ReportsComplaintsCreateWithoutHostelInput[] | ReportsComplaintsUncheckedCreateWithoutHostelInput[]
    connectOrCreate?: ReportsComplaintsCreateOrConnectWithoutHostelInput | ReportsComplaintsCreateOrConnectWithoutHostelInput[]
    upsert?: ReportsComplaintsUpsertWithWhereUniqueWithoutHostelInput | ReportsComplaintsUpsertWithWhereUniqueWithoutHostelInput[]
    createMany?: ReportsComplaintsCreateManyHostelInputEnvelope
    set?: ReportsComplaintsWhereUniqueInput | ReportsComplaintsWhereUniqueInput[]
    disconnect?: ReportsComplaintsWhereUniqueInput | ReportsComplaintsWhereUniqueInput[]
    delete?: ReportsComplaintsWhereUniqueInput | ReportsComplaintsWhereUniqueInput[]
    connect?: ReportsComplaintsWhereUniqueInput | ReportsComplaintsWhereUniqueInput[]
    update?: ReportsComplaintsUpdateWithWhereUniqueWithoutHostelInput | ReportsComplaintsUpdateWithWhereUniqueWithoutHostelInput[]
    updateMany?: ReportsComplaintsUpdateManyWithWhereWithoutHostelInput | ReportsComplaintsUpdateManyWithWhereWithoutHostelInput[]
    deleteMany?: ReportsComplaintsScalarWhereInput | ReportsComplaintsScalarWhereInput[]
  }

  export type AdminUncheckedUpdateManyWithoutHostelNestedInput = {
    create?: XOR<AdminCreateWithoutHostelInput, AdminUncheckedCreateWithoutHostelInput> | AdminCreateWithoutHostelInput[] | AdminUncheckedCreateWithoutHostelInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutHostelInput | AdminCreateOrConnectWithoutHostelInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutHostelInput | AdminUpsertWithWhereUniqueWithoutHostelInput[]
    createMany?: AdminCreateManyHostelInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutHostelInput | AdminUpdateWithWhereUniqueWithoutHostelInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutHostelInput | AdminUpdateManyWithWhereWithoutHostelInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type ReportsComplaintsUncheckedUpdateManyWithoutHostelNestedInput = {
    create?: XOR<ReportsComplaintsCreateWithoutHostelInput, ReportsComplaintsUncheckedCreateWithoutHostelInput> | ReportsComplaintsCreateWithoutHostelInput[] | ReportsComplaintsUncheckedCreateWithoutHostelInput[]
    connectOrCreate?: ReportsComplaintsCreateOrConnectWithoutHostelInput | ReportsComplaintsCreateOrConnectWithoutHostelInput[]
    upsert?: ReportsComplaintsUpsertWithWhereUniqueWithoutHostelInput | ReportsComplaintsUpsertWithWhereUniqueWithoutHostelInput[]
    createMany?: ReportsComplaintsCreateManyHostelInputEnvelope
    set?: ReportsComplaintsWhereUniqueInput | ReportsComplaintsWhereUniqueInput[]
    disconnect?: ReportsComplaintsWhereUniqueInput | ReportsComplaintsWhereUniqueInput[]
    delete?: ReportsComplaintsWhereUniqueInput | ReportsComplaintsWhereUniqueInput[]
    connect?: ReportsComplaintsWhereUniqueInput | ReportsComplaintsWhereUniqueInput[]
    update?: ReportsComplaintsUpdateWithWhereUniqueWithoutHostelInput | ReportsComplaintsUpdateWithWhereUniqueWithoutHostelInput[]
    updateMany?: ReportsComplaintsUpdateManyWithWhereWithoutHostelInput | ReportsComplaintsUpdateManyWithWhereWithoutHostelInput[]
    deleteMany?: ReportsComplaintsScalarWhereInput | ReportsComplaintsScalarWhereInput[]
  }

  export type HostelCreateNestedOneWithoutAdminsInput = {
    create?: XOR<HostelCreateWithoutAdminsInput, HostelUncheckedCreateWithoutAdminsInput>
    connectOrCreate?: HostelCreateOrConnectWithoutAdminsInput
    connect?: HostelWhereUniqueInput
  }

  export type HostelUpdateOneRequiredWithoutAdminsNestedInput = {
    create?: XOR<HostelCreateWithoutAdminsInput, HostelUncheckedCreateWithoutAdminsInput>
    connectOrCreate?: HostelCreateOrConnectWithoutAdminsInput
    upsert?: HostelUpsertWithoutAdminsInput
    connect?: HostelWhereUniqueInput
    update?: XOR<XOR<HostelUpdateToOneWithWhereWithoutAdminsInput, HostelUpdateWithoutAdminsInput>, HostelUncheckedUpdateWithoutAdminsInput>
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type HostelCreateNestedOneWithoutReportsComplaintsInput = {
    create?: XOR<HostelCreateWithoutReportsComplaintsInput, HostelUncheckedCreateWithoutReportsComplaintsInput>
    connectOrCreate?: HostelCreateOrConnectWithoutReportsComplaintsInput
    connect?: HostelWhereUniqueInput
  }

  export type ReportReplyCreateNestedManyWithoutReportComplaintInput = {
    create?: XOR<ReportReplyCreateWithoutReportComplaintInput, ReportReplyUncheckedCreateWithoutReportComplaintInput> | ReportReplyCreateWithoutReportComplaintInput[] | ReportReplyUncheckedCreateWithoutReportComplaintInput[]
    connectOrCreate?: ReportReplyCreateOrConnectWithoutReportComplaintInput | ReportReplyCreateOrConnectWithoutReportComplaintInput[]
    createMany?: ReportReplyCreateManyReportComplaintInputEnvelope
    connect?: ReportReplyWhereUniqueInput | ReportReplyWhereUniqueInput[]
  }

  export type ReportReplyUncheckedCreateNestedManyWithoutReportComplaintInput = {
    create?: XOR<ReportReplyCreateWithoutReportComplaintInput, ReportReplyUncheckedCreateWithoutReportComplaintInput> | ReportReplyCreateWithoutReportComplaintInput[] | ReportReplyUncheckedCreateWithoutReportComplaintInput[]
    connectOrCreate?: ReportReplyCreateOrConnectWithoutReportComplaintInput | ReportReplyCreateOrConnectWithoutReportComplaintInput[]
    createMany?: ReportReplyCreateManyReportComplaintInputEnvelope
    connect?: ReportReplyWhereUniqueInput | ReportReplyWhereUniqueInput[]
  }

  export type EnumReportTypeFieldUpdateOperationsInput = {
    set?: $Enums.ReportType
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority
  }

  export type HostelUpdateOneRequiredWithoutReportsComplaintsNestedInput = {
    create?: XOR<HostelCreateWithoutReportsComplaintsInput, HostelUncheckedCreateWithoutReportsComplaintsInput>
    connectOrCreate?: HostelCreateOrConnectWithoutReportsComplaintsInput
    upsert?: HostelUpsertWithoutReportsComplaintsInput
    connect?: HostelWhereUniqueInput
    update?: XOR<XOR<HostelUpdateToOneWithWhereWithoutReportsComplaintsInput, HostelUpdateWithoutReportsComplaintsInput>, HostelUncheckedUpdateWithoutReportsComplaintsInput>
  }

  export type ReportReplyUpdateManyWithoutReportComplaintNestedInput = {
    create?: XOR<ReportReplyCreateWithoutReportComplaintInput, ReportReplyUncheckedCreateWithoutReportComplaintInput> | ReportReplyCreateWithoutReportComplaintInput[] | ReportReplyUncheckedCreateWithoutReportComplaintInput[]
    connectOrCreate?: ReportReplyCreateOrConnectWithoutReportComplaintInput | ReportReplyCreateOrConnectWithoutReportComplaintInput[]
    upsert?: ReportReplyUpsertWithWhereUniqueWithoutReportComplaintInput | ReportReplyUpsertWithWhereUniqueWithoutReportComplaintInput[]
    createMany?: ReportReplyCreateManyReportComplaintInputEnvelope
    set?: ReportReplyWhereUniqueInput | ReportReplyWhereUniqueInput[]
    disconnect?: ReportReplyWhereUniqueInput | ReportReplyWhereUniqueInput[]
    delete?: ReportReplyWhereUniqueInput | ReportReplyWhereUniqueInput[]
    connect?: ReportReplyWhereUniqueInput | ReportReplyWhereUniqueInput[]
    update?: ReportReplyUpdateWithWhereUniqueWithoutReportComplaintInput | ReportReplyUpdateWithWhereUniqueWithoutReportComplaintInput[]
    updateMany?: ReportReplyUpdateManyWithWhereWithoutReportComplaintInput | ReportReplyUpdateManyWithWhereWithoutReportComplaintInput[]
    deleteMany?: ReportReplyScalarWhereInput | ReportReplyScalarWhereInput[]
  }

  export type ReportReplyUncheckedUpdateManyWithoutReportComplaintNestedInput = {
    create?: XOR<ReportReplyCreateWithoutReportComplaintInput, ReportReplyUncheckedCreateWithoutReportComplaintInput> | ReportReplyCreateWithoutReportComplaintInput[] | ReportReplyUncheckedCreateWithoutReportComplaintInput[]
    connectOrCreate?: ReportReplyCreateOrConnectWithoutReportComplaintInput | ReportReplyCreateOrConnectWithoutReportComplaintInput[]
    upsert?: ReportReplyUpsertWithWhereUniqueWithoutReportComplaintInput | ReportReplyUpsertWithWhereUniqueWithoutReportComplaintInput[]
    createMany?: ReportReplyCreateManyReportComplaintInputEnvelope
    set?: ReportReplyWhereUniqueInput | ReportReplyWhereUniqueInput[]
    disconnect?: ReportReplyWhereUniqueInput | ReportReplyWhereUniqueInput[]
    delete?: ReportReplyWhereUniqueInput | ReportReplyWhereUniqueInput[]
    connect?: ReportReplyWhereUniqueInput | ReportReplyWhereUniqueInput[]
    update?: ReportReplyUpdateWithWhereUniqueWithoutReportComplaintInput | ReportReplyUpdateWithWhereUniqueWithoutReportComplaintInput[]
    updateMany?: ReportReplyUpdateManyWithWhereWithoutReportComplaintInput | ReportReplyUpdateManyWithWhereWithoutReportComplaintInput[]
    deleteMany?: ReportReplyScalarWhereInput | ReportReplyScalarWhereInput[]
  }

  export type ReportsComplaintsCreateNestedOneWithoutReportRepliesInput = {
    create?: XOR<ReportsComplaintsCreateWithoutReportRepliesInput, ReportsComplaintsUncheckedCreateWithoutReportRepliesInput>
    connectOrCreate?: ReportsComplaintsCreateOrConnectWithoutReportRepliesInput
    connect?: ReportsComplaintsWhereUniqueInput
  }

  export type ReportsComplaintsUpdateOneRequiredWithoutReportRepliesNestedInput = {
    create?: XOR<ReportsComplaintsCreateWithoutReportRepliesInput, ReportsComplaintsUncheckedCreateWithoutReportRepliesInput>
    connectOrCreate?: ReportsComplaintsCreateOrConnectWithoutReportRepliesInput
    upsert?: ReportsComplaintsUpsertWithoutReportRepliesInput
    connect?: ReportsComplaintsWhereUniqueInput
    update?: XOR<XOR<ReportsComplaintsUpdateToOneWithWhereWithoutReportRepliesInput, ReportsComplaintsUpdateWithoutReportRepliesInput>, ReportsComplaintsUncheckedUpdateWithoutReportRepliesInput>
  }

  export type NotificationCreatenotificationReadUserIdsInput = {
    set: string[]
  }

  export type NotificationUpdatenotificationReadUserIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type HostelStudentCreatestudentDocumentsInput = {
    set: string[]
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type HostelStudentUpdatestudentDocumentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumRoomTypeFieldUpdateOperationsInput = {
    set?: $Enums.RoomType
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedEnumReportTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportType | EnumReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReportType[] | ListEnumReportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportType[] | ListEnumReportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReportTypeFilter<$PrismaModel> | $Enums.ReportType
  }

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NestedEnumReportTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportType | EnumReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReportType[] | ListEnumReportTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportType[] | ListEnumReportTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReportTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReportType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportTypeFilter<$PrismaModel>
    _max?: NestedEnumReportTypeFilter<$PrismaModel>
  }

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoomTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeFilter<$PrismaModel> | $Enums.RoomType
  }

  export type NestedEnumRoomTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoomType | EnumRoomTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoomType[] | ListEnumRoomTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoomTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoomType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoomTypeFilter<$PrismaModel>
    _max?: NestedEnumRoomTypeFilter<$PrismaModel>
  }

  export type AdminCreateWithoutHostelInput = {
    adminId?: string
    adminName: string
    adminEmail: string
    adminPhone: string
    authId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type AdminUncheckedCreateWithoutHostelInput = {
    id?: number
    adminId?: string
    adminName: string
    adminEmail: string
    adminPhone: string
    authId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type AdminCreateOrConnectWithoutHostelInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutHostelInput, AdminUncheckedCreateWithoutHostelInput>
  }

  export type AdminCreateManyHostelInputEnvelope = {
    data: AdminCreateManyHostelInput | AdminCreateManyHostelInput[]
    skipDuplicates?: boolean
  }

  export type ReportsComplaintsCreateWithoutHostelInput = {
    reportId?: string
    reportTitle: string
    reportDescription: string
    reportType?: $Enums.ReportType
    reportStatus?: $Enums.Status
    reportPriority?: $Enums.Priority
    reporterUserType?: $Enums.Role
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    reportReplies?: ReportReplyCreateNestedManyWithoutReportComplaintInput
  }

  export type ReportsComplaintsUncheckedCreateWithoutHostelInput = {
    id?: number
    reportId?: string
    reportTitle: string
    reportDescription: string
    reportType?: $Enums.ReportType
    reportStatus?: $Enums.Status
    reportPriority?: $Enums.Priority
    reporterUserType?: $Enums.Role
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    reportReplies?: ReportReplyUncheckedCreateNestedManyWithoutReportComplaintInput
  }

  export type ReportsComplaintsCreateOrConnectWithoutHostelInput = {
    where: ReportsComplaintsWhereUniqueInput
    create: XOR<ReportsComplaintsCreateWithoutHostelInput, ReportsComplaintsUncheckedCreateWithoutHostelInput>
  }

  export type ReportsComplaintsCreateManyHostelInputEnvelope = {
    data: ReportsComplaintsCreateManyHostelInput | ReportsComplaintsCreateManyHostelInput[]
    skipDuplicates?: boolean
  }

  export type AdminUpsertWithWhereUniqueWithoutHostelInput = {
    where: AdminWhereUniqueInput
    update: XOR<AdminUpdateWithoutHostelInput, AdminUncheckedUpdateWithoutHostelInput>
    create: XOR<AdminCreateWithoutHostelInput, AdminUncheckedCreateWithoutHostelInput>
  }

  export type AdminUpdateWithWhereUniqueWithoutHostelInput = {
    where: AdminWhereUniqueInput
    data: XOR<AdminUpdateWithoutHostelInput, AdminUncheckedUpdateWithoutHostelInput>
  }

  export type AdminUpdateManyWithWhereWithoutHostelInput = {
    where: AdminScalarWhereInput
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyWithoutHostelInput>
  }

  export type AdminScalarWhereInput = {
    AND?: AdminScalarWhereInput | AdminScalarWhereInput[]
    OR?: AdminScalarWhereInput[]
    NOT?: AdminScalarWhereInput | AdminScalarWhereInput[]
    id?: IntFilter<"Admin"> | number
    adminId?: StringFilter<"Admin"> | string
    adminName?: StringFilter<"Admin"> | string
    adminEmail?: StringFilter<"Admin"> | string
    adminPhone?: StringFilter<"Admin"> | string
    authId?: StringFilter<"Admin"> | string
    hostelId?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    academicYear?: IntFilter<"Admin"> | number
  }

  export type ReportsComplaintsUpsertWithWhereUniqueWithoutHostelInput = {
    where: ReportsComplaintsWhereUniqueInput
    update: XOR<ReportsComplaintsUpdateWithoutHostelInput, ReportsComplaintsUncheckedUpdateWithoutHostelInput>
    create: XOR<ReportsComplaintsCreateWithoutHostelInput, ReportsComplaintsUncheckedCreateWithoutHostelInput>
  }

  export type ReportsComplaintsUpdateWithWhereUniqueWithoutHostelInput = {
    where: ReportsComplaintsWhereUniqueInput
    data: XOR<ReportsComplaintsUpdateWithoutHostelInput, ReportsComplaintsUncheckedUpdateWithoutHostelInput>
  }

  export type ReportsComplaintsUpdateManyWithWhereWithoutHostelInput = {
    where: ReportsComplaintsScalarWhereInput
    data: XOR<ReportsComplaintsUpdateManyMutationInput, ReportsComplaintsUncheckedUpdateManyWithoutHostelInput>
  }

  export type ReportsComplaintsScalarWhereInput = {
    AND?: ReportsComplaintsScalarWhereInput | ReportsComplaintsScalarWhereInput[]
    OR?: ReportsComplaintsScalarWhereInput[]
    NOT?: ReportsComplaintsScalarWhereInput | ReportsComplaintsScalarWhereInput[]
    id?: IntFilter<"ReportsComplaints"> | number
    reportId?: StringFilter<"ReportsComplaints"> | string
    reportTitle?: StringFilter<"ReportsComplaints"> | string
    reportDescription?: StringFilter<"ReportsComplaints"> | string
    reportType?: EnumReportTypeFilter<"ReportsComplaints"> | $Enums.ReportType
    reportStatus?: EnumStatusFilter<"ReportsComplaints"> | $Enums.Status
    reportPriority?: EnumPriorityFilter<"ReportsComplaints"> | $Enums.Priority
    reporterUserType?: EnumRoleFilter<"ReportsComplaints"> | $Enums.Role
    userId?: StringNullableFilter<"ReportsComplaints"> | string | null
    hostelId?: StringFilter<"ReportsComplaints"> | string
    createdAt?: DateTimeFilter<"ReportsComplaints"> | Date | string
    updatedAt?: DateTimeFilter<"ReportsComplaints"> | Date | string
    academicYear?: IntFilter<"ReportsComplaints"> | number
  }

  export type HostelCreateWithoutAdminsInput = {
    hostelId?: string
    hostelNumber: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    hostelExpiryRemainingTime: number
    hostelExpiryDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    userInId: string
    authId: string
    reportsComplaints?: ReportsComplaintsCreateNestedManyWithoutHostelInput
  }

  export type HostelUncheckedCreateWithoutAdminsInput = {
    id?: number
    hostelId?: string
    hostelNumber: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    hostelExpiryRemainingTime: number
    hostelExpiryDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    userInId: string
    authId: string
    reportsComplaints?: ReportsComplaintsUncheckedCreateNestedManyWithoutHostelInput
  }

  export type HostelCreateOrConnectWithoutAdminsInput = {
    where: HostelWhereUniqueInput
    create: XOR<HostelCreateWithoutAdminsInput, HostelUncheckedCreateWithoutAdminsInput>
  }

  export type HostelUpsertWithoutAdminsInput = {
    update: XOR<HostelUpdateWithoutAdminsInput, HostelUncheckedUpdateWithoutAdminsInput>
    create: XOR<HostelCreateWithoutAdminsInput, HostelUncheckedCreateWithoutAdminsInput>
    where?: HostelWhereInput
  }

  export type HostelUpdateToOneWithWhereWithoutAdminsInput = {
    where?: HostelWhereInput
    data: XOR<HostelUpdateWithoutAdminsInput, HostelUncheckedUpdateWithoutAdminsInput>
  }

  export type HostelUpdateWithoutAdminsInput = {
    hostelId?: StringFieldUpdateOperationsInput | string
    hostelNumber?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    hostelExpiryRemainingTime?: IntFieldUpdateOperationsInput | number
    hostelExpiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    userInId?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    reportsComplaints?: ReportsComplaintsUpdateManyWithoutHostelNestedInput
  }

  export type HostelUncheckedUpdateWithoutAdminsInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostelId?: StringFieldUpdateOperationsInput | string
    hostelNumber?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    hostelExpiryRemainingTime?: IntFieldUpdateOperationsInput | number
    hostelExpiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    userInId?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    reportsComplaints?: ReportsComplaintsUncheckedUpdateManyWithoutHostelNestedInput
  }

  export type HostelCreateWithoutReportsComplaintsInput = {
    hostelId?: string
    hostelNumber: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    hostelExpiryRemainingTime: number
    hostelExpiryDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    userInId: string
    authId: string
    admins?: AdminCreateNestedManyWithoutHostelInput
  }

  export type HostelUncheckedCreateWithoutReportsComplaintsInput = {
    id?: number
    hostelId?: string
    hostelNumber: string
    hostelName: string
    hostelAddress: string
    totalRooms: number
    totalBeds: number
    totalFloors: number
    hostelExpiryRemainingTime: number
    hostelExpiryDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    userInId: string
    authId: string
    admins?: AdminUncheckedCreateNestedManyWithoutHostelInput
  }

  export type HostelCreateOrConnectWithoutReportsComplaintsInput = {
    where: HostelWhereUniqueInput
    create: XOR<HostelCreateWithoutReportsComplaintsInput, HostelUncheckedCreateWithoutReportsComplaintsInput>
  }

  export type ReportReplyCreateWithoutReportComplaintInput = {
    replyId?: string
    replyContent: string
    replyStatus?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type ReportReplyUncheckedCreateWithoutReportComplaintInput = {
    id?: number
    replyId?: string
    replyContent: string
    replyStatus?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type ReportReplyCreateOrConnectWithoutReportComplaintInput = {
    where: ReportReplyWhereUniqueInput
    create: XOR<ReportReplyCreateWithoutReportComplaintInput, ReportReplyUncheckedCreateWithoutReportComplaintInput>
  }

  export type ReportReplyCreateManyReportComplaintInputEnvelope = {
    data: ReportReplyCreateManyReportComplaintInput | ReportReplyCreateManyReportComplaintInput[]
    skipDuplicates?: boolean
  }

  export type HostelUpsertWithoutReportsComplaintsInput = {
    update: XOR<HostelUpdateWithoutReportsComplaintsInput, HostelUncheckedUpdateWithoutReportsComplaintsInput>
    create: XOR<HostelCreateWithoutReportsComplaintsInput, HostelUncheckedCreateWithoutReportsComplaintsInput>
    where?: HostelWhereInput
  }

  export type HostelUpdateToOneWithWhereWithoutReportsComplaintsInput = {
    where?: HostelWhereInput
    data: XOR<HostelUpdateWithoutReportsComplaintsInput, HostelUncheckedUpdateWithoutReportsComplaintsInput>
  }

  export type HostelUpdateWithoutReportsComplaintsInput = {
    hostelId?: StringFieldUpdateOperationsInput | string
    hostelNumber?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    hostelExpiryRemainingTime?: IntFieldUpdateOperationsInput | number
    hostelExpiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    userInId?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    admins?: AdminUpdateManyWithoutHostelNestedInput
  }

  export type HostelUncheckedUpdateWithoutReportsComplaintsInput = {
    id?: IntFieldUpdateOperationsInput | number
    hostelId?: StringFieldUpdateOperationsInput | string
    hostelNumber?: StringFieldUpdateOperationsInput | string
    hostelName?: StringFieldUpdateOperationsInput | string
    hostelAddress?: StringFieldUpdateOperationsInput | string
    totalRooms?: IntFieldUpdateOperationsInput | number
    totalBeds?: IntFieldUpdateOperationsInput | number
    totalFloors?: IntFieldUpdateOperationsInput | number
    hostelExpiryRemainingTime?: IntFieldUpdateOperationsInput | number
    hostelExpiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    userInId?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    admins?: AdminUncheckedUpdateManyWithoutHostelNestedInput
  }

  export type ReportReplyUpsertWithWhereUniqueWithoutReportComplaintInput = {
    where: ReportReplyWhereUniqueInput
    update: XOR<ReportReplyUpdateWithoutReportComplaintInput, ReportReplyUncheckedUpdateWithoutReportComplaintInput>
    create: XOR<ReportReplyCreateWithoutReportComplaintInput, ReportReplyUncheckedCreateWithoutReportComplaintInput>
  }

  export type ReportReplyUpdateWithWhereUniqueWithoutReportComplaintInput = {
    where: ReportReplyWhereUniqueInput
    data: XOR<ReportReplyUpdateWithoutReportComplaintInput, ReportReplyUncheckedUpdateWithoutReportComplaintInput>
  }

  export type ReportReplyUpdateManyWithWhereWithoutReportComplaintInput = {
    where: ReportReplyScalarWhereInput
    data: XOR<ReportReplyUpdateManyMutationInput, ReportReplyUncheckedUpdateManyWithoutReportComplaintInput>
  }

  export type ReportReplyScalarWhereInput = {
    AND?: ReportReplyScalarWhereInput | ReportReplyScalarWhereInput[]
    OR?: ReportReplyScalarWhereInput[]
    NOT?: ReportReplyScalarWhereInput | ReportReplyScalarWhereInput[]
    id?: IntFilter<"ReportReply"> | number
    replyId?: StringFilter<"ReportReply"> | string
    replyContent?: StringFilter<"ReportReply"> | string
    replyStatus?: EnumStatusFilter<"ReportReply"> | $Enums.Status
    reportComplaintId?: StringFilter<"ReportReply"> | string
    createdAt?: DateTimeFilter<"ReportReply"> | Date | string
    updatedAt?: DateTimeFilter<"ReportReply"> | Date | string
    academicYear?: IntFilter<"ReportReply"> | number
  }

  export type ReportsComplaintsCreateWithoutReportRepliesInput = {
    reportId?: string
    reportTitle: string
    reportDescription: string
    reportType?: $Enums.ReportType
    reportStatus?: $Enums.Status
    reportPriority?: $Enums.Priority
    reporterUserType?: $Enums.Role
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
    hostel: HostelCreateNestedOneWithoutReportsComplaintsInput
  }

  export type ReportsComplaintsUncheckedCreateWithoutReportRepliesInput = {
    id?: number
    reportId?: string
    reportTitle: string
    reportDescription: string
    reportType?: $Enums.ReportType
    reportStatus?: $Enums.Status
    reportPriority?: $Enums.Priority
    reporterUserType?: $Enums.Role
    userId?: string | null
    hostelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type ReportsComplaintsCreateOrConnectWithoutReportRepliesInput = {
    where: ReportsComplaintsWhereUniqueInput
    create: XOR<ReportsComplaintsCreateWithoutReportRepliesInput, ReportsComplaintsUncheckedCreateWithoutReportRepliesInput>
  }

  export type ReportsComplaintsUpsertWithoutReportRepliesInput = {
    update: XOR<ReportsComplaintsUpdateWithoutReportRepliesInput, ReportsComplaintsUncheckedUpdateWithoutReportRepliesInput>
    create: XOR<ReportsComplaintsCreateWithoutReportRepliesInput, ReportsComplaintsUncheckedCreateWithoutReportRepliesInput>
    where?: ReportsComplaintsWhereInput
  }

  export type ReportsComplaintsUpdateToOneWithWhereWithoutReportRepliesInput = {
    where?: ReportsComplaintsWhereInput
    data: XOR<ReportsComplaintsUpdateWithoutReportRepliesInput, ReportsComplaintsUncheckedUpdateWithoutReportRepliesInput>
  }

  export type ReportsComplaintsUpdateWithoutReportRepliesInput = {
    reportId?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportDescription?: StringFieldUpdateOperationsInput | string
    reportType?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    reportStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    reportPriority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    reporterUserType?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    hostel?: HostelUpdateOneRequiredWithoutReportsComplaintsNestedInput
  }

  export type ReportsComplaintsUncheckedUpdateWithoutReportRepliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportDescription?: StringFieldUpdateOperationsInput | string
    reportType?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    reportStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    reportPriority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    reporterUserType?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hostelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateManyHostelInput = {
    id?: number
    adminId?: string
    adminName: string
    adminEmail: string
    adminPhone: string
    authId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type ReportsComplaintsCreateManyHostelInput = {
    id?: number
    reportId?: string
    reportTitle: string
    reportDescription: string
    reportType?: $Enums.ReportType
    reportStatus?: $Enums.Status
    reportPriority?: $Enums.Priority
    reporterUserType?: $Enums.Role
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type AdminUpdateWithoutHostelInput = {
    adminId?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPhone?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type AdminUncheckedUpdateWithoutHostelInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPhone?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type AdminUncheckedUpdateManyWithoutHostelInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    adminEmail?: StringFieldUpdateOperationsInput | string
    adminPhone?: StringFieldUpdateOperationsInput | string
    authId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type ReportsComplaintsUpdateWithoutHostelInput = {
    reportId?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportDescription?: StringFieldUpdateOperationsInput | string
    reportType?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    reportStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    reportPriority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    reporterUserType?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    reportReplies?: ReportReplyUpdateManyWithoutReportComplaintNestedInput
  }

  export type ReportsComplaintsUncheckedUpdateWithoutHostelInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportDescription?: StringFieldUpdateOperationsInput | string
    reportType?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    reportStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    reportPriority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    reporterUserType?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
    reportReplies?: ReportReplyUncheckedUpdateManyWithoutReportComplaintNestedInput
  }

  export type ReportsComplaintsUncheckedUpdateManyWithoutHostelInput = {
    id?: IntFieldUpdateOperationsInput | number
    reportId?: StringFieldUpdateOperationsInput | string
    reportTitle?: StringFieldUpdateOperationsInput | string
    reportDescription?: StringFieldUpdateOperationsInput | string
    reportType?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    reportStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    reportPriority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    reporterUserType?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type ReportReplyCreateManyReportComplaintInput = {
    id?: number
    replyId?: string
    replyContent: string
    replyStatus?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    academicYear: number
  }

  export type ReportReplyUpdateWithoutReportComplaintInput = {
    replyId?: StringFieldUpdateOperationsInput | string
    replyContent?: StringFieldUpdateOperationsInput | string
    replyStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type ReportReplyUncheckedUpdateWithoutReportComplaintInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyId?: StringFieldUpdateOperationsInput | string
    replyContent?: StringFieldUpdateOperationsInput | string
    replyStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }

  export type ReportReplyUncheckedUpdateManyWithoutReportComplaintInput = {
    id?: IntFieldUpdateOperationsInput | number
    replyId?: StringFieldUpdateOperationsInput | string
    replyContent?: StringFieldUpdateOperationsInput | string
    replyStatus?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    academicYear?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}