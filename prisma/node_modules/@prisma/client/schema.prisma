// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SuperAdmin
  Admin
  Student
  User
}

model System {
  id                   Int      @id @default(autoincrement())
  systemId             String   @unique @default(uuid())
  systemName           String
  systemEmail          String
  sytemMaintenanceMode Boolean  @default(false)
  SMTPHost             String?
  SMTPPort             Int?
  SMTPUser             String?
  SMTPPassword         String?
  passwordPolicy       Boolean  @default(false)
  twoFactorAuth        Boolean  @default(false)
  sessionDuration      Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  academicYear         Int

  @@map("system")
}

model Auth {
  id                Int      @id @default(autoincrement())
  authId            String   @unique @default(uuid())
  userInEmail       String
  userInPhone       String
  userInName        String
  userInPassword    String
  isVerified        Boolean  @default(false)
  isRequestApproved Boolean  @default(false)
  role              Role     @default(User)
  hostelId          String?
  academicYear      Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userInEmail, hostelId])
  @@unique([userInPhone, hostelId])
  @@map("auth")
}

model Hostel {
  id                        Int                 @id @default(autoincrement())
  hostelId                  String              @unique @default(uuid())
  hostelNumber              String
  hostelName                String
  hostelAddress             String
  totalRooms                Int
  totalBeds                 Int
  totalFloors               Int
  hostelExpiryRemainingTime Int
  hostelExpiryDate          DateTime
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  admins                    Admin[]
  reportsComplaints         ReportsComplaints[]
  academicYear              Int
  userInId                  String // Id of the user from auth table
  authId                    String // Id of the user who has created the hostel

  @@map("hostels")
}

model Admin {
  id           Int      @id @default(autoincrement())
  adminId      String   @unique @default(uuid())
  adminName    String
  adminEmail   String   @unique
  adminPhone   String   @unique
  authId       String // id from auth table to link the admin to the auth
  hostelId     String
  hostel       Hostel   @relation(fields: [hostelId], references: [hostelId], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  academicYear Int

  @@map("admin")
}

enum Status {
  Pending
  Approved
  Rejected
}

model HostelRequest {
  id              Int      @id @default(autoincrement())
  hostelRequestId String   @unique @default(uuid())
  hostelName      String
  hostelAddress   String
  totalRooms      Int
  totalBeds       Int
  totalFloors     Int
  adminName       String
  adminEmail      String
  adminPhone      String
  adminPassword   String
  adminAddress    String
  status          Status   @default(Pending)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  academicYear    Int

  @@map("hostel_requests")
}

enum ReportType {
  Complaint
  Suggestion
  Feedback
}

enum Priority {
  Low
  Medium
  High
}

model ReportsComplaints {
  id                Int           @id @default(autoincrement())
  reportId          String        @unique @default(uuid())
  reportTitle       String
  reportDescription String
  reportType        ReportType    @default(Complaint)
  reportStatus      Status        @default(Pending)
  reportPriority    Priority      @default(Low)
  reporterUserType  Role          @default(Student)
  userId            String? // Id of the user who has done complaint
  hostelId          String
  hostel            Hostel        @relation(fields: [hostelId], references: [hostelId], onDelete: Cascade)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  academicYear      Int
  reportReplies     ReportReply[]

  @@map("reports_complaints")
}

// handle replies to the reports complaCints
model ReportReply {
  id                Int               @id @default(autoincrement())
  replyId           String            @unique @default(uuid())
  replyContent      String
  replyStatus       Status            @default(Pending)
  reportComplaintId String
  reportComplaint   ReportsComplaints @relation(fields: [reportComplaintId], references: [reportId], onDelete: Cascade)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  academicYear      Int

  @@map("report_replies")
}

enum NotificationType {
  Complaint
  Suggestion
  Feedback
  Maintenance
  Alert
  System
  Other
}

model Notification {
  id                      Int              @id @default(autoincrement())
  notificationId          String           @unique @default(uuid())
  notificationTitle       String
  notificationMessage     String
  notificationReadUserIds String[]
  notificationType        NotificationType @default(Other)
  notificationStatus      Status           @default(Pending)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  academicYear            Int

  @@map("notifications")
}

enum PaymentMethod {
  Cash
  Card
  BankTransfer
  Wallet
  Other
}

model Payment {
  id                              Int           @id @default(autoincrement())
  paymentId                       String        @unique @default(uuid())
  paymentAmount                   Float
  paymentHostelPreviousExpiryTime Int
  paymentAddedTime                Int
  paymentDescription              String
  paymentStatus                   Status        @default(Pending)
  paymentMethod                   PaymentMethod @default(Other)
  createdAt                       DateTime      @default(now())
  hostelId                        String
  creditRemainingAmount           Float
  updatedAt                       DateTime      @updatedAt
  academicYear                    Int

  @@map("payments")
}

enum Gender {
  Male
  Female
  Other
}

// Models of Hostel
model HostelStudent {
  id                      Int       @id @default(autoincrement())
  studentId               String    @unique @default(uuid())
  studentGeneratedId      String    @unique
  studentName             String
  studentEmail            String
  studentPhone            String
  studentGender           Gender    @default(Male)
  studentAddress          String?
  studentRoomNumber       String?
  studentBedNumber        String?
  status                  Status    @default(Pending)
  studentCheckInDate      DateTime
  studentCheckOutDate     DateTime?
  studentGuardianName     String
  studentGuardianPhone    String
  studentGuardianAddress  String
  studentGuardianEmail    String?
  studentGuardianRelation String
  studentDocuments        String[] // Array of document URLs
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  hostelId                String
  academicYear            Int
  authId                  String

  @@unique([studentEmail, hostelId])
  @@unique([studentPhone, hostelId])
  @@map("students")
}

// model of room

enum RoomType {
  Single
  Double
  Triple
}

model HostelRoom {
  id                Int      @id @default(autoincrement())
  roomId            String   @unique @default(uuid())
  roomNumber        String
  roomCapacity      String
  roomFloor         String
  roomType          RoomType @default(Single)
  roomPricePerMonth String
  roomBuilding      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  hostelId          String
  academicYear      Int

  @@unique([roomNumber, hostelId])
  @@map("rooms")
}
